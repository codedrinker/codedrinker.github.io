<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[码匠笔记]]></title>
  <link href="http://www.majiang.life/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2018-07-01T09:00:53+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[notepad.cc 替代品——在线 Markdown 笔记]]></title>
    <link href="http://www.majiang.life/blog/online-markdown-note-replace-notepad-dot-cc/"/>
    <updated>2018-07-01T08:43:42+08:00</updated>
    <id>http://www.majiang.life/blog/online-markdown-note-replace-notepad-dot-cc</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>方便简洁的 notepad.cc 关闭，对于喜欢使用不需要登录，又简单的云存储工具的我们是一个损失，于是笔者就自己写了一个。PS:不需要担心再次关闭，因为作者几乎使用的免费的工具来实现：<br/>
1. Github Pages 承载空间<br/>
2. 七牛免费 10G 的存储空间存储笔记，我们假定一个文档的使用空间是 1K，那么免费可以容纳 <code>10*1024*1024 = 10,485,760</code>，如果真的到了这个数量级，那么也不需要考虑是否免费了。</p>

<p>所以请大家放心使用。至于安全问题，如果特别敏感的东西，相信你也不会存在这个地方，不过笔者还是做了一些限制，把七牛的 <code>key</code> 存储到了云端。</p>

<!-- more -->


<h2>实现</h2>

<p>实现相对非常简单，使用了免费的 <a href="https://gitee.com/pandao/editor.md">Editor.md</a> 作为 Markdown 的编辑工具。  <br/>
使用 <code>Github Pages</code> 承载编辑器页面，直接使用七牛 <code>JavaScript SDK</code>，同步编辑内容到七牛云空间。</p>

<h2>使用</h2>

<p>访问 <a href="http://mdnote.gettools.wang/">http://mdnote.gettools.wang/</a><br/>
如果带 <code>#codedrinker</code>，先获取当前短链接下面是否有内容，如果有展示，没有的话自动填入 <code>Markdown</code> 语法<br/>
编辑完成以后按 <code>Ctrl+S</code> 或者 <code>Command+S</code>保存</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把《阿里巴巴Java开发手册》读薄]]></title>
    <link href="http://www.majiang.life/blog/alibaba-p3c/"/>
    <updated>2018-05-13T14:59:27+08:00</updated>
    <id>http://www.majiang.life/blog/alibaba-p3c</id>
    <content type="html"><![CDATA[<h1>描述</h1>

<p>最近读了一下《阿里巴巴Java开发手册》，下面是一些应该注意问题的整理。其实读这个手册最重要明白了两个问题<br/>
第一点，一个开发团队一定要有一个自己的编程规约。<br/>
第二点，优化是从每一个小的细节入手。</p>

<!-- more -->


<h1>编程命名</h1>

<h2>命名规则</h2>

<p>1.【强制】所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br/>
反例：_name / __name / $Object / name_ / name$ / Object$
2.【强制】类名使用UpperCamelCase风格，以下情形例外：DO / BO / DTO / VO / AO<br/>
3.【强制】常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br/>
4.【强制】抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类名开始，以Test结尾。<br/>
5.【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。  <br/>
正例：应用工具类包名为com.alibaba.aone.force.util；类名为MessageUtils（此规则参考spring的框架结构）
6.【强制】杜绝完全不规范的缩写，集团认可的缩写请参考附2。<br/>
反例：&lt;某业务代码>AbstractClass“缩写”命名成AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。<br/>
7.【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达。<br/>
正例：在JDK中，对某个对象引用的volatile字段进行原子更新的类名为：AtomicReferenceFieldUpdater。
反例：常见的方法内变量为int a; 的定义方式。<br/>
8.【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。  <br/>
说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br/>
正例：public class OrderFactory;<br/>
    public class LoginProxy;
    public class ResourceObserver;<br/>
9.【参考】枚举类名建议带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br/>
说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br/>
正例：枚举名字：ProcessStatusEnum；成员名称：SUCCESS / UNKNOWN_REASON。<br/>
10.【参考】各层命名规约： <br/>
A) Service/DAO层方法命名规约<br/>
   1） 获取单个对象的方法用get作前缀。<br/>
   2） 获取多个对象的方法用list作前缀。<br/>
   3） 获取统计值的方法用count作前缀。<br/>
   4） 插入的方法用save/insert作前缀。<br/>
   5） 删除的方法用remove/delete作前缀。<br/>
   6） 修改的方法用update作前缀。</p>

<h2>常量定义</h2>

<p>1.【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。<br/>
反例：String key = &ldquo;Id#taobao_&rdquo; + tradeId；<br/>
    cache.put(key, value);<br/>
  本例中同学A定义了缓存的key，然后缓存提取的同学B使用了Id#taobao来提取，少了下划线，导致故障。<br/>
2.【强制】long或者Long初始赋值时，使用大写的L，不能是小写的l，小写容易跟数字1混淆，造成误解。<br/>
说明：Long a = 2l; 写的是数字的21，还是Long型的2?<br/>
3.【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。<br/>
正例：缓存相关的常量放在类CacheConsts下；系统配置相关的常量放在类ConfigConsts下。<br/>
说明：大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解，也不利于维护。<br/>
4.【推荐】如果变量值仅在一个固定范围内变化用enum类型来定义。<br/>
说明：如果存在名称之外的延伸属性使用enum类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。<br/>
正例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">SeasonEnum</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SPRING</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="n">SUMMER</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="n">AUTUMN</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="n">WINTER</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">seq</span><span class="o">;</span>
</span><span class='line'>    <span class="n">SeasonEnum</span><span class="o">(</span><span class="kt">int</span> <span class="n">seq</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">seq</span> <span class="o">=</span> <span class="n">seq</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>格式规约</h2>

<p>1.【强制】注释的双斜线与注释内容之间有且仅有一个空格。<br/>
正例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 这是示例注释，请注意在双斜线之后有一个空格</span>
</span><span class='line'><span class="n">String</span> <span class="n">ygb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.【强制】单行字符数不超过120个，超出则需要换行，换行时遵循如下原则：<br/>
 1） 第二行相对第一行缩进4个空格，从第三行开始，不再继续缩进，参考示例。<br/>
 2） 运算符与下文一起换行。<br/>
 3） 方法调用的点符号与下文一起换行。<br/>
 4） 方法调用中的多个参数需要换行时，在逗号后进行。<br/>
 5） 在括号前不要换行，见反例。<br/>
正例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuffer</span><span class="o">();</span>
</span><span class='line'><span class="c1">// 超过120个字符的情况下，换行缩进4个空格，并且方法前的点号一起换行</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;zi&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;xin&quot;</span><span class="o">)...</span>
</span><span class='line'>    <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;huang&quot;</span><span class="o">)...</span>
</span><span class='line'>    <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;huang&quot;</span><span class="o">)...</span>
</span><span class='line'>    <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;huang&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>OOP规约</h3>

<p>1.【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。<br/>
2.【强制】不能使用过时的类或方法。<br/>
说明：java.net.URLDecoder 中的方法decode(String encodeStr) 这个方法已经过时，应该使用双参数decode(String source, String encode)  。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。<br/>
3.【强制】Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。<br/>
正例：&#8221;test&#8221;.equals(object);<br/>
反例：object.equals(&ldquo;test&rdquo;);<br/>
说明：推荐使用java.util.Objects#equals （JDK7引入的工具类）<br/>
4.【强制】所有的相同类型的包装类对象之间值的比较，全部使用equals方法比较。<br/>
说明：对于Integer var=?在-128至127之间的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。<br/>
5.关于基本数据类型与包装数据类型的使用标准如下：<br/>
1） 【强制】所有的 POJO 类属性必须使用包装数据类型。<br/>
2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。<br/>
3） 【推荐】所有的局部变量使用基本数据类型。<br/>
说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE   问题，或者入库检查，都由使用者来保证。正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。<br/>
6.【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。<br/>
反例：POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。<br/>
7.【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具：source> generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。  <br/>
说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p>

<h2>集合处理</h2>

<ol>
<li>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：<br/>
1） 只要重写 equals，就必须重写 hashCode。<br/>
2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。<br/>
3） 如果自定义对象作为 Map 的键，那么必须重写 hashCode 和 equals。<br/>
说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</li>
<li>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。<br/>
正例：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ArrayList</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;guan&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bao&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。<br/>
说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;you&quot;</span><span class="o">,</span> <span class="s">&quot;wu&quot;</span> <span class="o">};</span>
</span><span class='line'><span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一种情况：list.add(&ldquo;yangguanbao&rdquo;); 运行时异常。<br/>
第二种情况：str[0] = &ldquo;gujin&rdquo;; 那么 list.get(0)也会随之修改。<br/>
4.【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。<br/>
正例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">删除元素的条件</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.【推荐】集合初始化时，指定集合初始值大小。<br/>
说明：HashMap 使用 HashMap(int initialCapacity) 初始化，正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loaderfactor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。<br/>
反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。<br/>
6.【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。<br/>
说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。<br/>
正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p>

<h2>并发处理</h2>

<p>1.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<br/>
说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。<br/>
2.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br/>
说明：Executors 返回的线程池对象的弊端如下：<br/>
1）FixedThreadPool 和 SingleThreadPool:允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br/>
2）CachedThreadPool 和 ScheduledThreadPool:允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。<br/>
3.【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await   方法，直到超时才返回结果。说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。<br/>
4.【参考】volatile   解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p>

<h2>控制语句</h2>

<p>1.【强制】在高并发场景中，避免使用”等于”判断作为中断或退出的条件。<br/>
说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间
判断条件来代替。<br/>
反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变
成了负数，这样的话，活动无法终止。</p>

<h2>注释规约</h2>

<p>1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/**内容*/格式，不得使用// xxx 方式。
说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率 。<br/>
2.【强制】所有的类都必须添加创建者和创建日期。<br/>
3.【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。<br/>
4.【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<br/>
5.【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<br/>
反例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// put elephant into fridge</span>
</span><span class='line'><span class="n">put</span><span class="p">(</span><span class="n">elephant</span><span class="p">,</span> <span class="n">fridge</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p>

<h1>异常日志</h1>

<p>1.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。<br/>
说明：本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。<br/>
2. 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：<br/>
1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。<br/>
2） 数据库的查询结果可能为 null。<br/>
3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。<br/>
4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。<br/>
5） 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。<br/>
6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。<br/>
正例：使用 JDK8 的 Optional 类来防止 NPE 问题。<br/>
3.【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Abc</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。
说明：logger.debug(&ldquo;Processing trade with id: &rdquo; + id + &ldquo; and symbol: &rdquo; + symbol);如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。<br/>
正例：（条件）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Processing trade with id: &quot;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&quot; and symbol: &quot;</span> <span class="o">+</span> <span class="n">symbol</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正例：（占位符）  <br/>
logger.debug(&ldquo;Processing trade with id: {} and symbol : {} &rdquo;, id, symbol);  <br/>
5.【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity=false。<br/>
正例：<logger name="com.taobao.dubbo.config" additivity="false"></p>

<h2>其他</h2>

<p>1.【强制】velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is前缀），会自动调用 isXxx()  方法。说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</p>

<h1>安全规约</h1>

<p>1.【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。<br/>
说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。<br/>
2.【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。<br/>
说明：个人手机号码显示为:158****9119，隐藏中间 4 位，防止隐私泄露。<br/>
3.【强制】用户请求传入的任何参数必须做有效性验证。<br/>
说明：忽略参数校验可能导致：<br/>
 page size 过大导致内存溢出<br/>
 恶意 order by 导致数据库慢查询<br/>
 任意重定向<br/>
 SQL 注入<br/>
 反序列化注入<br/>
 正则输入源串拒绝服务 ReDoS</p>

<h1>MySQL 数据库</h1>

<h2>建表规约</h2>

<p>1.【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否）。<br/>
说明：任何字段如果为非负数，必须是 unsigned。<br/>
正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。<br/>
2.【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只
出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br/>
说明：MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库<br/>
名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。<br/>
正例：aliyun_admin，rdc_config，level3_name<br/>
反例：AliyunAdmin，rdcConfig，level_3_name<br/>
3.【强制】表名不使用复数名词。 <br/>
说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数
形式，符合表达习惯。<br/>
4.【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。<br/>
5.【强制】主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br/>
说明：pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。<br/>
6.【强制】小数类型为 decimal，禁止使用 float 和 double。<br/>
说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不
正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。<br/>
7.【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。<br/>
8.【强制】表必备三字段：id, gmt_create, gmt_modified。<br/>
说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create,
gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被
动更新。<br/>
9.【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<br/>
说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。<br/>
10.【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检
索速度。<br/>
正例：如下表，其中无符号值可以避免误存负数，且扩大了表示范围。<br/>
对象 年龄区间 类型 字节 表示范围<br/>
人 150 岁之内 unsigned tinyint 1 无符号值：0 到 255<br/>
龟 数百岁 unsigned smallint 2 无符号值：0 到 65535<br/>
恐龙化石 数千万年 unsigned int 4 无符号值：0 到约 42.9 亿<br/>
太阳 约 50 亿年 unsigned bigint 8 无符号值：0 到约 10 的 19 次方</p>

<h2>索引规约</h2>

<p>1.【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<br/>
说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明
显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必
然有脏数据产生。<br/>
2.【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br/>
说明：索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索
引。<br/>
3.【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合
索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。<br/>
正例：where a=? and b=? order by c; 索引：a_b_c<br/>
反例：索引中有范围查找，那么索引有序性无法利用，如：WHERE a>10 ORDER BY b; 索引
a_b 无法排序。<br/>
4.【推荐】利用延迟关联或者子查询优化超多分页场景。<br/>
说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回
N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过
特定阈值的页数进行 SQL 改写。<br/>
正例：先快速定位需要获取的 id 段，然后再关联：<br/>
 SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id<br/>
5. 【推荐】建组合索引的时候，区分度最高的在最左边。<br/>
正例：如果 where a=? and b=? ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即
可。<br/>
说明：存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where a>?
and b=? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p>

<h2>SQL 语句</h2>

<p>1.【强制】不要使用 count(列名)或 count(常量)来替代 count(*)，count(*)是 SQL92 定义的
标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br/>
说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。<br/>
2.【强制】不得使用外键与级联，一切外键概念必须在应用层解决。<br/>
说明：以学生和成绩的关系为例，学生表中的 student_id是主键，那么成绩表中的 student_id
则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为
级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻
塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。<br/>
3.【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p>

<h2>ORM 映射</h2>

<p>1.【强制】在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。
说明：1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。<br/>
2.【强制】sql.xml 配置参数使用：#{}，#param# 不要使用${} 此种方式容易出现 SQL 注入。<br/>
3.【强制】更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。<br/>
4.【推荐】不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字
段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL
时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p>

<h1>工程结构</h1>

<p>1.【参考】分层领域模型规约：
 DO（Data Object）：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。<br/>
 DTO（Data Transfer Object）：数据传输对象，Service 或 Manager 向外传输的对象。<br/>
 BO（Business Object）：业务对象。由 Service 层输出的封装业务逻辑的对象。<br/>
 AO（Application Object）：应用对象。在 Web 层与 Service 层之间抽象的复用对象模型,极为贴近展示层，复用度不高。<br/>
 VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。<br/>
 Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止
使用 Map 类来传输。<br/>
2.【强制】定义 GAV 遵从以下规则：  <br/>
1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。<br/>
说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。<br/>
正例：com.taobao.jstorm 或 com.alibaba.dubbo.register<br/>
2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。<br/>
正例：dubbo-client / fastjson-api / jstorm-tool<br/>
3） Version：详细规定参考下方。<br/>
3.【强制】二方库版本号命名方式：主版本号.次版本号.修订号<br/>
1） 主版本号：产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。<br/>
2） 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。<br/>
3） 修订号：保持完全兼容性，修复 BUG、新增次要功能特性等。<br/>
说明：注意起始版本号必须为：1.0.0，而不是 0.0.1 正式发布的类库必须先去中央仓库进
行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本：1.3.3，那么下一个
合理的版本号：1.3.4 或 1.4.0 或 2.0.0<br/>
4.【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。<br/>
说明：依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一
个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。<br/>
5.【推荐】高并发服务器建议调小 TCP 协议的 time_wait 超时时间。
说明：操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服
务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上
调小此等待值。<br/>
正例：在 linux 服务器上请通过变更/etc/sysctl.conf 文件去修改该缺省值（秒）：
net.ipv4.tcp_fin_timeout = 30<br/>
6.【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。<br/>
说明：主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，即一个连接对
应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open too many files”错误，导致新的连接无法建立。 建议将 linux
服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。<br/>
7.【推荐】给 JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出
dump 信息。<br/>
说明：OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错
非常有价值。<br/>
8.【推荐】在线上生产环境，JVM 的 Xms 和 Xmx 设置一样大小的内存容量，避免在 GC 后调整堆
大小带来的压力。</p>

<p><a href="https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BA%AA%E5%BF%B5%E7%89%88%EF%BC%89.pdf">阿里巴巴Java开发手册（纪念版）.pdf</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Longest Substring Without Repeating Characters]]></title>
    <link href="http://www.majiang.life/blog/longest-substring-without-repeating-characters/"/>
    <updated>2018-05-13T14:42:51+08:00</updated>
    <id>http://www.majiang.life/blog/longest-substring-without-repeating-characters</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>Given a string, find the length of the longest substring without repeating characters.</p>

<p>Examples:</p>

<p>Given &ldquo;abcabcbb&rdquo;, the answer is &ldquo;abc&rdquo;, which the length is 3.</p>

<p>Given &ldquo;bbbbb&rdquo;, the answer is &ldquo;b&rdquo;, with the length of 1.</p>

<p>Given &ldquo;pwwkew&rdquo;, the answer is &ldquo;wke&rdquo;, with the length of 3. Note that the answer must be a substring, &ldquo;pwke&rdquo; is a subsequence and not a substring.</p>

<h2>中文解释</h2>

<p>给定一个字符串，获得它不重复连续子序列的长度</p>

<!-- more -->


<h2>解题思路</h2>

<p>这题没有什么巧妙的方式，误区是我们不需要太关注子字符串是什么，只要记录它的长度最终比较就可以了，所以求解方式比较简单，直接循环字符串的每一个字节，判断是否出现过，如果出现过从头计算，更新重复的index，如果没有出现过，计数+1继续循环。</p>

<h2>源码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestSubstringWithoutRepeatingCharacters</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">repeatedIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">repeatedIndex</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)),</span> <span class="n">repeatedIndex</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">length</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">length</span><span class="o">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">repeatedIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">length</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LongestSubstringWithoutRepeatingCharacters</span> <span class="n">lswrc</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LongestSubstringWithoutRepeatingCharacters</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lswrc</span><span class="o">.</span><span class="na">lengthOfLongestSubstring</span><span class="o">(</span><span class="s">&quot;abcabcbb&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lswrc</span><span class="o">.</span><span class="na">lengthOfLongestSubstring</span><span class="o">(</span><span class="s">&quot;bbbbb&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lswrc</span><span class="o">.</span><span class="na">lengthOfLongestSubstring</span><span class="o">(</span><span class="s">&quot;pwwkew&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters">https://leetcode.com/problems/longest-substring-without-repeating-characters</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Add Two Numbers]]></title>
    <link href="http://www.majiang.life/blog/leetcode-add-two-numbers/"/>
    <updated>2018-05-11T22:37:53+08:00</updated>
    <id>http://www.majiang.life/blog/leetcode-add-two-numbers</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>

<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
</span><span class='line'>Output: 7 -&gt; 0 -&gt; 8
</span><span class='line'>Explanation: 342 + 465 = 807.</span></code></pre></td></tr></table></div></figure>


<h2>中文解释</h2>

<p>给定两个非空的链表里面分别包含不等数量的正整数，每一个节点都包含一个正整数，肯能是0，但是不会是<code>01</code>这种情况。我们需要按照倒序计算他们的和然后再次倒序输出。</p>

<!-- more -->


<h2>解题思路</h2>

<p>这题没有什么巧妙的方式，不过仔细思考一下，它其实是在模拟正常的多位数加法。我们试想在计算多位数加法的时候，从最末位开始计算，如果大于10就进位，并加到下次高位计算中；如果不大于10继续计算；就这样我们就有了下面的阶梯思路。<br/>
一次循环就可以搞定，通过判断他们其中是不是空，就像是多位数加减法，如果一个高位没有了，当然也要继续计算，所以有了下面默认 <code>int carry = 0</code>，然后通过 <code>sum / 10</code> 算出进位，通过 <code>sum % 10</code> 算出当前位，这个题就迎刃而解。</p>

<h2>源码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddTwoNumbers</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">addTwoNumbers</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">tempNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">a</span> <span class="o">=</span> <span class="n">l1</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">l2</span><span class="o">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">tempNode</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">a</span><span class="o">.</span><span class="na">val</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">b</span><span class="o">.</span><span class="na">val</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">carry</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>            <span class="n">carry</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>            <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="n">sum</span> <span class="o">%</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="n">carry</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">tempNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">l1</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">l1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
</span><span class='line'>        <span class="n">l1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">l2</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>        <span class="n">l2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">6</span><span class="o">));</span>
</span><span class='line'>        <span class="n">l2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">listNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AddTwoNumbers</span><span class="o">().</span><span class="na">addTwoNumbers</span><span class="o">(</span><span class="n">l1</span><span class="o">,</span> <span class="n">l2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">listNode</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">listNode</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">listNode</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span><span class='line'>            <span class="n">listNode</span> <span class="o">=</span> <span class="n">listNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>    <span class="n">ListNode</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ListNode</span> <span class="n">last</span> <span class="o">=</span> <span class="n">getLast</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">last</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ListNode</span> <span class="nf">getLast</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">getLast</span><span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/add-two-numbers/">https://leetcode.com/problems/add-two-numbers/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Two Sum]]></title>
    <link href="http://www.majiang.life/blog/leetcode-two-sum/"/>
    <updated>2018-05-10T23:36:59+08:00</updated>
    <id>http://www.majiang.life/blog/leetcode-two-sum</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br/>
You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given nums = [2, 7, 11, 15], target = 9,
</span><span class='line'>
</span><span class='line'>Because nums[0] + nums[1] = 2 + 7 = 9,
</span><span class='line'>return [0, 1].</span></code></pre></td></tr></table></div></figure>


<h2>中文解释</h2>

<p>给定一个整型数组和一个给定的整数，返回两个数加和等于给定数的下标值。假设答案只有一个并且数组中没有重复的整数。</p>

<!-- more -->


<h2>解题思路</h2>

<p>首先循环数组中的整数，巧妙的定义一个 HashMap，用 key 记录整数的值，用 value 记录 该整数的下标。<br/>
使用 <code>map.get(target-nums[i]);</code> 判断其是否存在，如果存在说明给定的值减去当前的值的整数已经存在，意思就是说已经找到了加和等于给定数的两个值，他们的下标就放在了map的 value里面，直接取出即可。那么可以判断循环结束了，如果不存在那么就继续把当前值和下标放到 Map中。</p>

<h2>源码</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">integer</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">integer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">integer</span><span class="o">;</span>
</span><span class='line'>                <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用 Post Dispather 把文章快速发布在多个平台]]></title>
    <link href="http://www.majiang.life/blog/auto-post-to-multiple-platform/"/>
    <updated>2018-05-06T12:13:38+08:00</updated>
    <id>http://www.majiang.life/blog/auto-post-to-multiple-platform</id>
    <content type="html"><![CDATA[<h2>痛点</h2>

<p>每次发布一篇新博文，如果想发布到不同的平台，需要人工处理好多事情，诸如，登录，点击发布文章，拷贝，粘贴，发布。想寻找一款工具能够一次编辑，同步到不同的社交平台。</p>

<!-- more -->


<h2>解决方案</h2>

<p>使用 <code>Post Dispatcher</code> 自动发送博文到不同社交平台，SegmentFault、简书、CSDN等，弊端是需要熟悉 <code>JAVA</code> 的同学使用运行程序的方式实现。</p>

<h2>实现原理</h2>

<p>本项目的实现原理比较简单，主要是使用 <code>Selenium</code> 的 <code>Webdriver</code>，模拟浏览在操作，从登陆，编辑，到发布一系列的流程如同自动化。</p>

<h2>使用说明</h2>

<h3>环境准备</h3>

<ul>
<li>JDK 1.8</li>
<li>Idea(安装Lombok)</li>
<li>Firefox</li>
</ul>


<h3>克隆代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/codedrinker/post-dispatcher.git
</span></code></pre></td></tr></table></div></figure>


<h3>配置依赖</h3>

<p>因为使用原生的 <code>Maven</code> 的依赖不能运行 <code>Selenium</code>，所以并未深究，直接使用下载版本的依赖，放在项目 <code>lib</code> 目录，所以需要我们手动添加整个目录为 <code>Library</code> 即可。</p>

<h3>配置账号</h3>

<p>上文已经说了，使用模拟账号登录的方式，所以需要在 <code>post-dispatcher.properties</code> 里面配置好每一个平台的用户名和密码。<br/>
同时也支持使用<code>-Dcustom-config=dp.properties</code> 自定义配置名称。</p>

<h3>运行</h3>

<p>配置全部完成以后直接运行 <code>PostDispatcher</code> 即可。</p>

<h2>支持平台</h2>

<ul>
<li>SegmentFault：用户名密码登录</li>
<li>CSDN：Github 登录</li>
<li>简书：用户名密码登录，需要功能介入点击图像验证码。</li>
</ul>


<h2>反馈</h2>

<p>使用过程中需要问题，欢迎反馈到如下地址<br/>
<a href="https://github.com/codedrinker/post-dispatcher/issues">https://github.com/codedrinker/post-dispatcher/issues</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku 教程：MySQL 中文乱码]]></title>
    <link href="http://www.majiang.life/blog/fix-heroku-cleardb-mysql-chinese-messy-code/"/>
    <updated>2018-05-01T16:03:01+08:00</updated>
    <id>http://www.majiang.life/blog/fix-heroku-cleardb-mysql-chinese-messy-code</id>
    <content type="html"><![CDATA[<h2>方案</h2>

<p>Heroku 的 MySQL 默认就是 UTF-8字符集，本身不应该出现乱码，但是笔者在测试过程中出现中文乱码。<br/>
解决方法非常简单，直接在配置的URL后面添加如下内容即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&useUnicode=true&characterEncoding=UTF-8</span></code></pre></td></tr></table></div></figure>


<p>不过在添加之前需要查看一下当前URL格式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku run echo \$JDBC_DATABASE_URL</span></code></pre></td></tr></table></div></figure>


<p>输出内容如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jdbc:mysql://endpoint/database?reconnect=true&user=username&password=password</span></code></pre></td></tr></table></div></figure>


<p>所以我直接在后面追加<code>&amp;useUnicode=true&amp;characterEncoding=UTF-8</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku 教程：自定义域名配置 HTTPS]]></title>
    <link href="http://www.majiang.life/blog/setting-up-ssl-on-heroku-with-custom-domain/"/>
    <updated>2018-04-30T08:42:05+08:00</updated>
    <id>http://www.majiang.life/blog/setting-up-ssl-on-heroku-with-custom-domain</id>
    <content type="html"><![CDATA[<h2>起源</h2>

<p>本身 Heroku 的 app 域名是开始 SSL 的，但是因为他的域名为 appname.herokuapp.com，没有在国内备案，所以我们需要绑定一个国内备案的域名到 Heroku 上面。于是就有了下面的文章。</p>

<!-- more -->


<h2>获取 SSL 证书</h2>

<p>可以直接使用一些服务商购买域名 SSL 证书，或者用其他的方式自己生成。下面我们讲解一下怎么生成。</p>

<h3>生成私有 Key</h3>

<table>
<thead>
<tr>
<th>系统  </th>
<th> 安装方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mac OS X </td>
<td> Homebrew: <code>brew install openssl</code></td>
</tr>
<tr>
<td>Windows   </td>
<td> <a href="http://slproweb.com/products/Win32OpenSSL.html">Windows complete package .exe installer</a></td>
</tr>
<tr>
<td>Ubuntu Linux </td>
<td> <code>apt-get install openssl</code></td>
</tr>
</tbody>
</table>


<p>Heroku 只支持 RSA，下面我们直接运行命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl genrsa -des3 -out server.pass.key 2048
</span></code></pre></td></tr></table></div></figure>


<p>输入如下命令获取<code>server.key</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl rsa -in server.pass.key -out server.key
</span></code></pre></td></tr></table></div></figure>


<h3>生成 CSR</h3>

<p>CSR是证书签名请求，需要使用上一步生成的私有 Key 进行生成。这个时候需要输入 Country Name 和 Common Name，格式如下</p>

<table>
<thead>
<tr>
<th>字段  </th>
<th> 内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Country Name    </td>
<td> <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166</a> 格式的简码</td>
</tr>
<tr>
<td>Common Name  </td>
<td> www.example.com,*.example.com 需要注意的是这个名字必须和使用的保持一致</td>
</tr>
</tbody>
</table>


<p>输入如下命令生成 CSR</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl req -nodes -new -key server.key -out server.csr
</span></code></pre></td></tr></table></div></figure>


<h3>生成 CRT</h3>

<p>CRT 一般都是找签发 SSL 的机构签发，大部分是收费的，也有免费的，如果不找 SSL 机构签发，可以按照下面的方式自己生成，不过自己生成的证书可以使用，只是默认是不信任的，需要用户自己认证。通常情况生成的证书为 CRT 或者 PEM格式的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl req -new -x509 -key server.key -out ca.crt -days 3650
</span></code></pre></td></tr></table></div></figure>


<p>这个证书用来给自己的证书签名，下面是创建服务器证书</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl x509 -req -days <span class="m">3650</span> -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt
</span></code></pre></td></tr></table></div></figure>


<p>笔者购买的是阿里云的域名，其默认支持生成3个免费的域名，而且使用他的生成，默认是信任的。直接通过阿里云控制台生成然后下载使用即可，可以省略上面的步骤。</p>

<h2>配置 Heroku</h2>

<h3>创建插件</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku addons:create ssl:endpoint
</span></code></pre></td></tr></table></div></figure>


<h3>添加证书</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku certs:add server.crt server.key --type endpoint
</span></code></pre></td></tr></table></div></figure>


<p>运行完命令会为你分配一个新的 SSL 域名，需要你后面做绑定使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>appname now served by iiii-65701.herokussl.com
</span></code></pre></td></tr></table></div></figure>


<h3>修改证书</h3>

<p>如果后面更新了证书，可以使用如下命令修改证书。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku certs:update server.crt server.key --endpoint example-2121.herokussl.com
</span></code></pre></td></tr></table></div></figure>


<h2>配置域名</h2>

<h3>添加域名</h3>

<p>直接使用如下命令配置刚才你输入的域名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku domains:add www.example.com
</span></code></pre></td></tr></table></div></figure>


<p>如果是配置域名，更多详情可以参照<br/>
<a href="http://www.majiang.life/blog/heroku-custom-domains/?utm_source=rel">Heroku 教程：绑定自定义域名</a></p>

<h3>配置DNS</h3>

<p>这个时候需要配置一下 DNS 创建一个 CNAME 指向 Heroku，这个时候就需要指向到我们刚才生成的,<code>iiii-65701.herokussl.com</code>。</p>

<h2>验证</h2>

<p>等待一会儿以后可以使用如下命令检测一下是否配置成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -kvI https://www.example.com
</span><span class='line'>* About to connect<span class="o">()</span> to www.example.com port <span class="m">443</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 50.16.234.21... connected
</span><span class='line'>* Connected to www.example.com <span class="o">(</span>50.16.234.21<span class="o">)</span> port <span class="m">443</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>* SSLv3, TLS handshake, Client hello <span class="o">(</span>1<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS handshake, Server hello <span class="o">(</span>2<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS handshake, CERT <span class="o">(</span>11<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS handshake, Server finished <span class="o">(</span>14<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS handshake, Client key exchange <span class="o">(</span>16<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS change cipher, Client hello <span class="o">(</span>1<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS handshake, Finished <span class="o">(</span>20<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS change cipher, Client hello <span class="o">(</span>1<span class="o">)</span>:
</span><span class='line'>* SSLv3, TLS handshake, Finished <span class="o">(</span>20<span class="o">)</span>:
</span><span class='line'>* SSL connection using AES256-SHA
</span><span class='line'>* Server certificate:
</span><span class='line'>*    subject: <span class="nv">C</span><span class="o">=</span>US<span class="p">;</span> <span class="nv">ST</span><span class="o">=</span>CA<span class="p">;</span> <span class="nv">L</span><span class="o">=</span>SF<span class="p">;</span> <span class="nv">O</span><span class="o">=</span>SFDC<span class="p">;</span> <span class="nv">OU</span><span class="o">=</span>Heroku<span class="p">;</span> <span class="nv">CN</span><span class="o">=</span>www.example.com
</span><span class='line'>*    start date: 2011-11-01 17:18:11 GMT
</span><span class='line'>*    expire date: 2012-10-31 17:18:11 GMT
</span><span class='line'>*    common name: www.example.com <span class="o">(</span>matched<span class="o">)</span>
</span><span class='line'>*    issuer: <span class="nv">C</span><span class="o">=</span>US<span class="p">;</span> <span class="nv">ST</span><span class="o">=</span>CA<span class="p">;</span> <span class="nv">L</span><span class="o">=</span>SF<span class="p">;</span> <span class="nv">O</span><span class="o">=</span>SFDC<span class="p">;</span> <span class="nv">OU</span><span class="o">=</span>Heroku<span class="p">;</span> <span class="nv">CN</span><span class="o">=</span>www.heroku.com
</span><span class='line'>*    SSL certificate verify ok.
</span><span class='line'>GET / HTTP/1.1
</span><span class='line'>User-Agent: curl/7.19.7 <span class="o">(</span>universal-apple-darwin10.0<span class="o">)</span> libcurl/7.19.7 OpenSSL/0.9.8r zlib/1.2.3
</span><span class='line'>Host: www.example.com
</span><span class='line'>Accept: */*
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>参考文档</h2>

<p><a href="https://devcenter.heroku.com/articles/ssl-endpoint#acquire-ssl-certificate">Heroku 官方配置</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用 Heroku 搭建免费的微信小程序服务]]></title>
    <link href="http://www.majiang.life/blog/how-to-set-up-mini-programs-free-server-using-heroku/"/>
    <updated>2018-04-30T08:42:05+08:00</updated>
    <id>http://www.majiang.life/blog/how-to-set-up-mini-programs-free-server-using-heroku</id>
    <content type="html"><![CDATA[<h2>起源</h2>

<p>最近小程序愈发的火热，好多人都纷纷的加入到小程序的开发阵营。虽然小程序的开发对个人用户是免费的，但是还是有一些要求的，比如需要服务器支持，购买域名，并且需要 HTTPS 支持，那么这样对于一些想学习小程序开发，或者是做一些开源的小程序工具的开发者来说，购买域名，服务器，HTTPS搭建都是额外的成本。虽然腾讯云提供了免费的调试环境，但是生成环境还是需要购买的。这里小编就来给搭建提供一种免费搭建小程序服务的方式。</p>

<!-- more -->


<h2>简介</h2>

<p>Heroku是一个支持多种编程语言的云平台即服务。在2010年被Salesforce.com收购。Heroku作为最开始的云平台之一，从2007年6月起开发，当时它仅支持Ruby，但后来增加了对Java、Node.js、Scala、Clojure、Python以及PHP和Perl的支持。基础操作系统是Debian，在最新的堆栈则是基于Debian的Ubuntu。</p>

<p>这样一下自己就解决问题，Heroku 作为PaaS 支持各种语言，同时他默认支持 HTTPS。乍一看他不也是 PaaS 吗，肯定也需要收费啊。为什么博主说不收费呢？ <br/>
那么我们看一下他的官方介绍。他提供起初的免费版本，他是<code>512 MB RAM │ 1 web/1 worker</code>，每个月提供免费的1000个小时，如果你超过1000个小时就不提供服务了，不过我们粗略的计算一下，1x24x30=720，按照30天计算的话才720小时，加上免费的版本还有一个特性，30分钟没有人使用就自动休眠，下次访问的时候自动启动，休眠期间不计入时间。这样对于刚刚小程序起步的我们已经足够了，并且你可以做好几个小程序的服务呢。</p>

<h2>注册</h2>

<p>直接去官网注册即可。<a href="https://www.heroku.com">https://www.heroku.com</a></p>

<h2>搭建</h2>

<p>进入 <a href="https://devcenter.heroku.com/">https://devcenter.heroku.com/</a> 页面，即可选择对应的语言进行开发。<br/>
英文不是很好的小伙伴可能有点吃力，因为这个是纯外文的。不过笔者也整理了一个中文的搭建过程，希望可以帮到大家。<br/>
<a href="http://www.majiang.life/blog/heroku-get-started/?utm_source=inner">Heroku 入门教程之：使用 Heroku 快速搭建站点</a></p>

<h2>配置 HTTPS</h2>

<p>本身 heroku 免费提供的域名没有在国内备案，所以你需要自己把一个已经备案好的域名指定到 Heroku 空间，同时配置好 HTTPS，详情参考<br/>
<a href="http://www.majiang.life/blog/setting-up-ssl-on-heroku-with-custom-domain/?utm_source=inner">Heroku 教程：自定义域名配置 HTTPS</a></p>

<h2>实例</h2>

<p>官方提供的 JAVA 例子好多东西都自己集成，笔者结合官方的例子自己写了一个，增加了 Spring，MyBatis，MySQL，H2，Migration的支持。如果有需要的可以自取。<br/>
<a href="https://github.com/codedrinker/heroku-spring-boot-mybatis-mysql-flyway-example">https://github.com/codedrinker/heroku-spring-boot-mybatis-mysql-flyway-example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUC系列:ThreadPoolExecutor]]></title>
    <link href="http://www.majiang.life/blog/juc-threadpoolexecutor/"/>
    <updated>2018-04-28T00:22:21+08:00</updated>
    <id>http://www.majiang.life/blog/juc-threadpoolexecutor</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>ThreadPoolExecutor 是 JUC 里面的成员，我们可以使用他轻松的创建线程池。<br/>
当然我们可以自己创建线程，但是有 ThreadPoolExecutor，他的好处还是很多的，比如可以帮我们管理线程，不需要我们手动的关闭线程，同时可以通过各种不同的线程创建和销毁策略应对不同的多线程场景。合理的使用 ThreadPoolExecutor 会让我们的开发效率和性能事半功倍。</p>

<!-- more -->


<h2>使用</h2>

<h3>创建</h3>

<p>我们可以通过ThreadPoolExecutor来创建一个线程池。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new  ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, milliseconds,runnableTaskQueue, handler);</span></code></pre></td></tr></table></div></figure>


<p>创建一个线程池需要输入几个参数，需要简单的讲解一下。
corePoolSize：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。这个时候新的线程会放到阻塞队列里面。也就是下面的参数。</p>

<p>runnableTaskQueue：阻塞队列有很多种，分别使用不同的场景。
ArrayBlockingQueue</p>

<ul>
<li>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</li>
<li>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出）排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</li>
<li>PriorityBlockingQueue：一个具有优先级得无限阻塞队列。</li>
</ul>


<p>maximumPoolSize：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的任务队列这个参数就没什么效果。</p>

<p>ThreadFactory：用于设置创建线程的工厂，可以创建线程的时候指定名字和一些其他配置，方便记录和调试。</p>

<p>RejectedExecutionHandler：当队列和线程池都满了，这个时候线程池已经出现负载问题，不能处理新的任务了，所以需要一个策略来处理。可选的策略如下，当然我们可以实现RejectedExecutionHandler接口自定义策略。</p>

<ul>
<li>AbortPolicy：直接抛出异常。</li>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>
<li>DiscardPolicy：不处理，丢弃掉。</li>
</ul>


<p>keepAliveTime：线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。减少因频繁创建线程消耗的时间。<br/>
TimeUnit：可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</p>

<h2>使用</h2>

<p>使用方式很简单，有两种方式，一种是直接execute，这样直接可以运营一个 Runnable的类，但是不能获得返回值，另一种方式是使用submit，调用成功以后会获得一个future，这样就可以通过这个future查看当前线程的运行状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TheadPoolTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ThreadPoolExecutor</span> <span class="n">threadPoolExecutor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;());</span>
</span><span class='line'>        <span class="n">threadPoolExecutor</span><span class="o">.</span><span class="na">execute</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;?&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">threadPoolExecutor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">future</span><span class="o">.</span><span class="na">isDone</span><span class="o">()){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="na">isDone</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p>主要的配置参数就是coreSize了，其他的参数主要还是在配置coreSize使用。通常情况下任务分为CPU密集型任务和IO密集型任务
CPU密集型任务配置尽可能少的线程数量，如配置Ncpu+1个线程的线程池，可以使用Executors.newFixedThreadPool()创建。
IO密集型任务则由于需要等待IO操作，线程并不是一直在执行任务，则配置尽可能多的线程，如2*Ncpu。混合型的任务，可以使用 Executors.newCachedThreadPool 创建。</p>

<h2>关闭</h2>

<h3>shutdown</h3>

<p>将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>

<h3>shutdownNow</h3>

<p>遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。</p>

<p>当调用上述任何一个方式，isShutdown方法就会返回true。当所有任务直接完成以后，isTermined方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复 Octopress Table 样式]]></title>
    <link href="http://www.majiang.life/blog/fixing-octopress-table-rendering/"/>
    <updated>2018-02-24T20:19:39+08:00</updated>
    <id>http://www.majiang.life/blog/fixing-octopress-table-rendering</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>Octopress 自带的 Table 样式太丑了，于是自己自定义一个，方法非常简单，操作如下。</p>

<!-- more -->


<h2>效果</h2>

<table>
<thead>
<tr>
<th>key </th>
<th> value1 </th>
<th> value2</th>
</tr>
</thead>
<tbody>
<tr>
<td>a   </td>
<td> apple  </td>
<td> aardvark</td>
</tr>
<tr>
<td>b   </td>
<td> banana </td>
<td> bonobo</td>
</tr>
<tr>
<td>c   </td>
<td> clementine </td>
<td> cat</td>
</tr>
</tbody>
</table>


<p>源码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>key | value1 | value2
</span><span class='line'>----|--------|----------
</span><span class='line'>a   | apple  | aardvark
</span><span class='line'>b   | banana | bonobo
</span><span class='line'>c   | clementine | cat</span></code></pre></td></tr></table></div></figure>


<h2>编码</h2>

<p>在 sass/custom 目录创建 _better_tables.scss，填写如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// make the text for the header row bold and centered.</span>
</span><span class='line'><span class="c1">// (I have not been able to figure out where jekyll/octopress are overriding</span>
</span><span class='line'><span class="c1">//  the text-align and setting it to `left`)</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">th</span> <span class="p">{</span> <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span> <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// typography for p/blockquote/ul/ol puts a 1.5em margin below those elements,</span>
</span><span class='line'><span class="c1">// so do the same for our tables ...</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">table</span> <span class="p">{</span> <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... but undo that for tables for pygments-generated code</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">table</span> <span class="p">{</span> <span class="na">margin-bottom</span><span class="o">:</span> <span class="no">inherit</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// add a border around each cell and padding around its content ...</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">th</span><span class="o">,</span> <span class="nc">.entry-content</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">6</span><span class="kt">px</span> <span class="mi">13</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... but undo that for tables for pygments-generated code</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">th</span><span class="o">,</span> <span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">border</span><span class="o">:</span> <span class="no">inherit</span><span class="p">;</span> <span class="na">padding</span><span class="o">:</span> <span class="no">inherit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// zebra-stripe the rows (N.B. `nth-child(2n)` works too) ...</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">tr</span>                 <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="mh">#FFFFFF</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">tr</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">even</span><span class="o">)</span> <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="mh">#F8F8F8</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... but undo that for tables for pygments-generated code</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">tr</span>                 <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="no">inherit</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">tr</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">even</span><span class="o">)</span> <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="no">inherit</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>entry-content</code> 是为了限制这个样式只在博文中生效。<br/>
然后在 <code>_styles.scss</code> 文件中添加一行内容即可完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;better_tables&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考文档</h2>

<p><a href="http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/">http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的成功首先需要从规划时间开始]]></title>
    <link href="http://www.majiang.life/blog/how-to-manage-your-time-effectively/"/>
    <updated>2018-02-23T22:57:57+08:00</updated>
    <id>http://www.majiang.life/blog/how-to-manage-your-time-effectively</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>最近突然觉得无论是生活还是工作乱糟糟的，没有一个计划，想到哪里做到哪里。不知不觉时间已经过去了，但是原来的计划都没有实现。而后无意间看到了一篇新闻，关于<a href="https://mp.weixin.qq.com/s/JMd0brQfNmHll991mOs1yQ">王健林的一天</a>，很受感触:</p>

<blockquote><p>想想我们本为平庸之辈还在浑浑噩噩的生活，他人已然成功却更加努力，这不禁让我想去了一句话：“比你优秀的人不可怕，可怕的是比你优秀的人比你更努力”。</p></blockquote>

<p>所以如果你和我一样，对目前自己的现状不满意，对自己的水平也不满意，不妨参考大佬们的作息时间制定一下自己的作息，不需要一样，我给自己规划的也不一定对。当然笔者不是说有了作息时间一定成功，和大佬们比肩，而是有了它能让你“充实”。</p>

<!-- more -->


<h2>大佬们的作息</h2>

<p>柳传志习惯早起，每天5点起床，运动一小时，然后早餐，上班处理工作。<br/>
苹果公司创始人乔布斯6点起床，“在孩子们起床前做一些锻炼和工作，然后和孩子们吃早餐，看着他们上学。”<br/>
巨人网络集团董事长史玉柱，每天凌晨三四点入睡，然后从午后开始工作。<br/>
新东方董事长兼总裁俞敏洪的作息时间比较规律，每天早上六点钟起床，一天工作十几个小时，对于他来说几乎没有节假日，他曾经抱怨自己甚至没有时间看完一整本书。<br/>
李嘉诚已经有88岁高龄，但却依然保持早起习惯：无论每天多晚睡，第二天早晨6点一定会准时起床。随后，听新闻，打一个半小时高尔夫。在8点前到办公室工作。<br/>
美国通用电气公司董事长杰夫·伊梅尔特起床时间是5：30。<br/>
星巴克咖啡公司创始人霍华德·舒尔茨每天早上4：30起床，吃早餐的同时还能高效率地看完三份报纸，他会保证自己在6点之前赶到办公室。<br/>
<a href="http://www.sohu.com/a/219234926_762024">想看更多请点击</a></p>

<h2>规划自己的作息</h2>

<p>规划是规划，但是重在坚持，不坚持的话再多的规划都是空话。笔者第一次做规划，先按照下面的尝试一下，看看是不是能坚持21天养成习惯。空挡的时间是什么？当然是工作的时间。周末呢？当然是陪家人。 当然时间的规划也是循序渐进的，开始规划。</p>

<h3>2018-02-23</h3>

<h4>作息</h4>

<ul>
<li>6:00 起床</li>
<li>6:00 - 6:30 健身</li>
<li>6:30 - 7:00 洗漱+冥想(计划和变化)</li>
<li>7:00 - 8:00 学习技能</li>
<li>8:00 - 9:00 上班路上(看新闻)</li>
<li>9:00 - 10:00 回顾(工作内容和技术难点)</li>
<li>12:00 - 14:00 写文章</li>
<li>9:00 - 10:00 下班路上(看文学书)</li>
<li>10:00 - 陪家人+看技术书籍</li>
</ul>


<h4>作息说明</h4>

<ul>
<li>6:00起床，没有起这么早过，但是如果不早起你的时间哪里来？就像是特朗普在《每日新闻》里说:“一天睡12-14小时的人如何能与每天睡3-4个小时的人竞争?”。</li>
<li>6:00 - 6:30 健身，公司有健身房，但是早晨起来需要精神一下，用自己的器材抖擞一下精神。</li>
<li>6:30 - 7:00 洗漱+冥想，洗漱也可以思考，主要思考一下今天昨天做的事，今天该做的事情，是否有疏漏，同时可以考虑一下家庭中是否有什么需要计划的。虽然在上面大佬的作息中很少看到家庭的因素，但是齐家治国平天下嘛。</li>
<li>7:00 - 8:00 学习技能，做技术这个行业，不想吃年轻饭，不想有中年危机就必须坚持的学下去。相比大家看中年危机的文章也是太多了吧。当然如果你能按照 <a href="https://amazon.cn/gp/product/B00368C0FG/ref=as_li_tl?ie=UTF8&amp;tag=majiang-23&amp;camp=536&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B00368C0FG&amp;linkId=8e76aef45d9df7e6f02fd7b3f4c3a42a"><strong>GTD</strong></a> 去做那效果会更好。Omnifocus 软件是一个不错的选择。</li>
<li>8:00 - 9:00、9:00 - 10:00 <a href="https://mp.weixin.qq.com/s/J9vWk4cvLRhrKQ5HxLH-zg">《如何有效的进行碎片化学习》</a>，<a href="https://amazon.cn/gp/product/B005DSK4W8/ref=as_li_tl?ie=UTF8&amp;tag=majiang-23&amp;camp=536&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B005DSK4W8&amp;linkId=ef1261dd4c6cf521898673e9f539ab9f">《暗时间》</a>，看过上面的文章和书籍的人就会明白，零碎的时间才是最多的时间。</li>
<li>12:00 - 14:00，有午睡习惯的码友就算了，本人是大部分中午时间都奉献给“王者荣耀”了，现在想想几千局的时间就明白了。一两个小时，整理一个文章发发博文，整理一下微信号的时间肯定是有的，其实主要是知识的积累。</li>
<li>10:00 点以后到家对于我们这个行业的人来说很正常，但是对于家庭来说已经迟到了。所以应该有更多的时间陪陪家人，剩下的时间看看技术方面的书籍。一天一个小时就够了，这个就要推荐 “网易蜗牛读书”，用一下你就知道他的好处了。</li>
</ul>


<h2>共勉</h2>

<p>最后希望我们都能按照计划如期进行，摆脱自己的舒适区，以此共勉。</p>

<h2>参考文献</h2>

<p><a href="https://www.zhihu.com/question/48553439">https://www.zhihu.com/question/48553439</a><br/>
<a href="http://www.sohu.com/a/219234926_762024">http://www.sohu.com/a/219234926_762024</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commenthub —— 多说、网易云跟帖的替代品]]></title>
    <link href="http://www.majiang.life/blog/octopress-and-hexo-comments-widget/"/>
    <updated>2018-02-19T20:57:35+08:00</updated>
    <id>http://www.majiang.life/blog/octopress-and-hexo-comments-widget</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>“多说”和“网易云跟帖”相继不维护了，每一次给大家带来了希望又带来了失望，于是 <a href="https://github.com/codedrinker/commenthub">Commenthub</a> 出现了。Commenthub 是作者使用免费的服务 Heroku 和 Github Issues 结合起来做的一套开源的评论系统。其灵感源于 Gitment，但是 Gitment 的 Key 和 Secret 都存在浏览器端，这样对于安全也是一个问题，于是作者使用 Heroku 搭建后端服务用于处理业务和存储证书，通过 iframe 实现评论功能。</p>

<!-- more -->


<h2>效果图</h2>

<p><img src="http://www.majiang.life/images/posts/commenthub1.png" alt="Demo" /></p>

<h2>演示地址</h2>

<p><a href="http://commenthub.github.io/">http://commenthub.github.io/</a></p>

<h2>功能介绍</h2>

<p>Commenthub 目前只支持 Github 用户登录评论，同时也只支持 Github 用户为自己的博客添加评论功能。目前 Commenthub 支持 Markdown 语法，表情，手机和PC响应式布局。</p>

<h2>Octopress 接入</h2>

<h3>注册 commenthub 账号</h3>

<p>访问 <a href="http://commenthub.herokuapp.com/">Commenthub官网</a>，点击 Sign up，使用 Github 账号登录成功以后，点击 Set up，填写博客地址。同时记住 ID，后面需要使用。</p>

<h3>配置 config.yml</h3>

<p>在 config.yml 里面填写 commenthub_id，其内容就是上面说的ID，用于标记作者是谁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commenthub_id: 3821949</span></code></pre></td></tr></table></div></figure>


<h3>配置显示位置</h3>

<p>在 <code>_layouts/post.html</code> 的 article 标签下面添加如下代码，用来告诉 Commenthub，在什么地方显示评论功能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.commenthub_id and page.comments == true %}
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>评论<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;commenthub_thread&quot;</span> <span class="na">aria-live=</span><span class="s">&quot;polite&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h3>创建 commenthub.html</h3>

<p>创建 <code>includes/commenthub.html</code>，填入如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% comment %} Load script if commenthub comments are enabled and `page.comments` is either empty (index) or set to true {% endcomment %}
</span><span class='line'>{% if site.commenthub_id and page.comments != false %}
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_id</span> <span class="o">=</span> <span class="s1">&#39;{{ site.commenthub_id }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_website</span> <span class="o">=</span> <span class="s1">&#39;{{ site.url }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_identifier</span> <span class="o">=</span> <span class="s1">&#39;{{ page.url }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_url</span> <span class="o">=</span> <span class="s1">&#39;{{ site.url }}{{ page.url }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_title</span> <span class="o">=</span> <span class="s1">&#39;{{ page.title }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;https://commenthub.herokuapp.com/js/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}());</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h3>引入 commenthub.html</h3>

<p>在 <code>includes/after_foot.html</code> 里面添加一行如下内容，用于引入 commenthub.html 文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% include commenthub.html %}
</span></code></pre></td></tr></table></div></figure>


<h3>完成</h3>

<p>这样 Octopress 的配置就结束了，如果配置中遇到问题，可以在当前博客中评论留言，或者到 Github Issue 中留言。</p>

<h2>Hexo 接入</h2>

<p>Hexo 使用的是比较热门的主题 Next。</p>

<h3>注册 commenthub 账号</h3>

<p>同上</p>

<h3>配置 config.yml</h3>

<p>配置 <code>themes/next/_config.yml</code> 文件，在里面的 Disqus 后面配置如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commenthub:
</span><span class='line'>  enable: true
</span><span class='line'>  id: your_id
</span><span class='line'>  site: your_website_url</span></code></pre></td></tr></table></div></figure>


<h3>配置显示位置</h3>

<p>在<code>themes/next/layout/_partials/comments.swig</code>里面添加一行代码，记得注意看<code>elseif</code>的位置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  {% elseif theme.commenthub.enable %}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;comments&quot;</span> <span class="na">id=</span><span class="s">&quot;comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;commenthub_thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建 commenthub.swig</h3>

<p>创建新文件<code>themes/next/layout/_third-party/comments/commenthub.swig</code>并贴入如下代码，如下代码主要是用于加载和生成评论的逻辑。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname %}
</span><span class='line'>  {% if theme.commenthub.enable %}
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_id</span> <span class="o">=</span> <span class="s1">&#39;{{ theme.commenthub.id }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_website</span> <span class="o">=</span> <span class="s1">&#39;{{ theme.commenthub.site }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_identifier</span> <span class="o">=</span> <span class="s1">&#39;{{ page.path }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_url</span> <span class="o">=</span> <span class="s1">&#39;{{ page.permalink }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_title</span> <span class="o">=</span> <span class="s1">&#39;{{ page.title| addslashes }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;https://commenthub.herokuapp.com/js/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>      <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h3>引入 commenthub.swig</h3>

<p>在<code>themes/next/layout/_third-party/comments/index.swig</code>文件添加如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% include &#39;commenthub.swig&#39; %}
</span></code></pre></td></tr></table></div></figure>


<h3>完成</h3>

<p>这样 Hexo 的配置就结束了，如果配置中遇到问题，可以在当前博客中评论留言，或者到 Github Issue 中留言。</p>

<h2>建议与反馈</h2>

<p>如果在使用过程中有任何问题欢迎建议和反馈到 <a href="https://github.com/codedrinker/commenthub">Commenthub</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给博客添加目录]]></title>
    <link href="http://www.majiang.life/blog/blog-table-of-contents/"/>
    <updated>2018-02-19T12:11:10+08:00</updated>
    <id>http://www.majiang.life/blog/blog-table-of-contents</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Hexo 模板的博客都带了文章目录[toc]，但是作者当前使用的是 Octopress 博客系统，所以不支持目录。这样给阅读的人带来了很大的不便捷。所以作者使用了 Table of contents sidebar 为 Octopress 添加了目录，并且可以快速定位。过程很简单，内容如下。</p>

<!-- more -->


<h2>添加插件</h2>

<p>直接添加到如下代码到博客通用的文件即可，其中 querySelector 可以定义生成目录的区域。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://table-of-contents-sidebar.github.io/table-of-contents-sidebar-lib/table-of-contents-sidebar.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">TableOfContents</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">basePath</span><span class="o">:</span> <span class="s2">&quot;https://table-of-contents-sidebar.github.io/table-of-contents-sidebar-lib/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">querySelector</span><span class="o">:</span> <span class="s2">&quot;body&quot;</span> <span class="c1">// or other css querySelector</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>插件</h2>

<p>这样仅仅是看自己的博客有了目录，如果想看别人的博客也有目录，可以安装 Table of contents sidebar 的插件，这样只要能识别的文章都能查看目录并且快速定位了。<br/>
<a href="https://chrome.google.com/webstore/detail/table-of-contents-sidebar/ohohkfheangmbedkgechjkmbepeikkej">https://chrome.google.com/webstore/detail/table-of-contents-sidebar/ohohkfheangmbedkgechjkmbepeikkej</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加 扩展相关阅读]]></title>
    <link href="http://www.majiang.life/blog/octopress-related-posts/"/>
    <updated>2018-02-18T20:24:22+08:00</updated>
    <id>http://www.majiang.life/blog/octopress-related-posts</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>原生的 Octopress 没有更丰富的阅读体验，只有上一篇下一篇，每次需要为当前文章添加相关文章的时候都需要在 Markdown 里面手动填写，这样非常浪费时间又不全面，于是笔者使用 Category 作为相关性的依据，修改了 Liqiud 代码，使得每一个 post 里面有具有相关的文章。</p>

<!-- more -->


<h2>实现</h2>

<p>实现起来也是很简单的，直接把如下代码添加到 <code>includes/article.html</code> 里面，跟在下面代码之后即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;entry-content&quot;</span><span class="nt">&gt;</span>{{ content }}
</span></code></pre></td></tr></table></div></figure>


<p>
代码如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>扩展阅读<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>{% if page %}
</span><span class='line'>    <span class="nt">&lt;ol&gt;</span>
</span><span class='line'>      {% for category in page.categories %}
</span><span class='line'>        {% for post in site.categories[category] %}
</span><span class='line'>        {% if  page.url == post.url %}
</span><span class='line'>          {% continue %}
</span><span class='line'>        {% endif %}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        {% endfor %}
</span><span class='line'>      {% endfor %}
</span><span class='line'>    <span class="nt">&lt;/ol&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>原理就比较简单了，取到当前页面的 categories，然后循环遍历得到每一个category下面的 post 展示即可。</p>

<h2>参照</h2>

<p>实际中的应用可以参照如下地址<br/>
<a href="https://github.com/codedrinker/codedrinker.github.io/blob/source/source/_includes/article.html">参考地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku 教程：绑定自定义域名]]></title>
    <link href="http://www.majiang.life/blog/heroku-custom-domains/"/>
    <updated>2018-02-18T18:50:38+08:00</updated>
    <id>http://www.majiang.life/blog/heroku-custom-domains</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Heroku 会提供一个默认的域名，即[name of app].herokuapp.com，如果你不喜欢可以绑定自己的域名。</p>

<!-- more -->


<h2>绑定</h2>

<p>绑定方式比较简单，直接修改 DNS 指向到 Heroku，然后配置Heroku 即可。</p>

<h3>修改 DNS</h3>

<p>在 Heroku 项目目录使用 <code>heroku domains</code> 命令查看当前项目的域名，为 DNS 添加 CNAME 指向到该域名。</p>

<h3>配置 Heroku</h3>

<p>使用 <code>heroku domains:add</code> 命令添加域名到 Heroku，然后等待即可。更多详细内容直接参照 <a href="https://devcenter.heroku.com/articles/custom-domains">官方文档</a></p>

<h2>参考文献</h2>

<p><a href="https://devcenter.heroku.com/articles/custom-domains">https://devcenter.heroku.com/articles/custom-domains</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku 教程：使用 Heroku 快速搭建站点]]></title>
    <link href="http://www.majiang.life/blog/heroku-get-started/"/>
    <updated>2018-02-18T17:49:25+08:00</updated>
    <id>http://www.majiang.life/blog/heroku-get-started</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Heroku 是 Salesforce 旗下云服务商，提供方便便捷的各种云服务，如服务器，数据库，监控，计算等等。并且他提供了免费版本，这使得我们这些平时想搞一些小东西的人提供了莫大的便捷，虽然他有时长和宕机的限制，但是对于个人小程序来说已经足够了。</p>

<!-- more -->


<h2>快速入门</h2>

<h3>注册账号</h3>

<p>进入 <a href="https://www.heroku.com">Heroku 官网</a>，因为 Heroku 是国外的站点，所以需要提前准备好翻墙。点击 Sign Up，根据要求填写好信息。这里需要注意的是，国内大部分的邮箱不支持，所以这里提前准备好 gmail 邮箱进行注册。</p>

<h3>创建 App</h3>

<p>Heroku 提供了便捷的网页控制台和终端，登录成功后我们直接进入 Heroku 的网页控制台，选择我们熟悉的语言进行创建，我们这里选择两种方式进行介绍，PHP 和 Java。</p>

<h4>PHP</h4>

<h5>准备</h5>

<p>点击按钮以后进入开始界面，界面提示我们需要提前安装好 <a href="http://php.net/">PHP</a> 和 <a href="https://getcomposer.org/doc/00-intro.md">Composer</a>，使用 PHP 的朋友就不需要更多的介绍了，直接点击 <code>I'm ready to start</code>。</p>

<h5>Set up</h5>

<p>下载 Heroku CLI，这是 Heroku 的命令行工具，下载以后可以使用命令行直接进行代码更新和部署等操作，当然下文也会介绍更方便的部署方式。下载成功以后使用 <code>heroku login</code> 命令，输入邮箱和密码进行登录。</p>

<h5>准备项目</h5>

<p>如果我们没有项目，可以直接使用如下命令下载项目源码，然后部署项目。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/heroku/php-getting-started.git sesamepaste</span></code></pre></td></tr></table></div></figure>


<p>后面跟随的 sesamepaste 是我将来的项目名称，然后进入项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd sesamepaste</span></code></pre></td></tr></table></div></figure>


<h5>创建App</h5>

<p>这里说的 App 不再是我们本地的项目，我们目前可以简单理解为 Heroku 的一个用来存放我们项目的容器，只有先有了这个容器才能部署我们的项目。运行如下命令创建，其中 sesamepaste 是项目的名称，也是 Heroku 的唯一标识，后面我们运行成功了，也需要使用 sesamepaste.herokuapp.com 来访问 App。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> heroku create sesamepaste
</span></code></pre></td></tr></table></div></figure>


<p>创建成功以后运行如下命令部署，其实就是把代码push 到 Heroku 的仓库，它会帮助我们自动化部署。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>最后使用 <code>heroku open</code> 命令就可以打开我们部署好的网站了。</p>

<h4>Java</h4>

<p>其他步骤和上面一样，除了项目地址，如下地址不是官方的例子，是笔者添加了一些spring，mybatis，flyway等集成的版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://github.com/codedrinker/heroku-spring-boot-mybatis-mysql-flyway-example.git sesamepaste
</span></code></pre></td></tr></table></div></figure>


<h4>其他</h4>

<p>如果是其他语言直接访问 Heroku帮助页面，<a href="https://devcenter.heroku.com">https://devcenter.heroku.com</a></p>

<h4>注意事项</h4>

<p>主要注意的是，笔者自己写的这个 JAVA 项目使用的是 MySQL，所以需要使用的人在创建好了 App 之后执行如下命令。删除默认数据库，添加MySQL数据库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>heroku addons:destroy heroku-postgresql
</span><span class='line'>heroku addons:create cleardb:ignite
</span><span class='line'>heroku config <span class="c"># 过程中可以使用 config 命令查看数据库 URL 是否修改成功</span>
</span></code></pre></td></tr></table></div></figure>


<h4>查看日志</h4>

<p>如果启动过程中出现问题，可以使用heroku logs查看日志。如果看到发现变量不对可以使用如下命令打印变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>heroku run <span class="nb">echo</span> <span class="se">\$</span>JDBC_DATABASE_URL
</span></code></pre></td></tr></table></div></figure>


<h2>简单介绍</h2>

<h3>日志</h3>

<p>每次运行命令需要进入当前项目的目录，必要的时候需要输入 <code>heroku login</code>，使用 <code>heroku logs --tail</code> 命令实施查看输出日志。</p>

<h3>Procfile</h3>

<p>你会发现拉取下来的代码里面有名字是 Procfile 的文件，这文件是用来定义运行项目时候的命令，默认如下，表示使用apache 运行 web项目，目录是web。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>web: vendor/bin/heroku-php-apache2 web/
</span></code></pre></td></tr></table></div></figure>


<h3>关联 Github</h3>

<p>上文说到需要 push 到 heroku 的仓库才能部署，heroku 提供了更强带的功能，直接关联 Github 的仓库的分支，等分支有新内容更新的时候直接部署。这个配置就需要去 web控制台配置了。进入项目，点击 <code>Deploy</code>，勾选 <code>Github</code>，然后完成配置即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于 Amazon SES 搭建高可用的邮件系统]]></title>
    <link href="http://www.majiang.life/blog/how-to-build-email-system-with-amazon-ses/"/>
    <updated>2018-02-14T14:22:55+08:00</updated>
    <id>http://www.majiang.life/blog/how-to-build-email-system-with-amazon-ses</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>通常情况下我们使用 smtp 调用第三方的 api 发送邮件，但是 gmail 一天只能发送100封，这对于营销邮件来说无疑是非常大的影响。所以考虑两种方案，第一种自己搭建邮件服务器，这种方案耗费时间并且需要额外的服务器成本。第二种方案使用 Amazon SES 搭建有限服务。简单方便并且 Amazon 本身也做了一些优化。</p>

<!-- more -->


<h2>域名准备</h2>

<h3>购买域名</h3>

<p>这一步不在本文的范围只，但是你需要需要准备好一个域名。</p>

<h3>托管域名到 Route53</h3>

<p>Route53 是Aws的 DNS，不托管用自己的也行，用他的一个方便之处是配置SES的时候他会很好的给你继承好，省去好多自己配置的麻烦。不过本身托管域名也需要配置，所以这里自行考虑是否托管域名到Route53。如需配置如下是配置文档。
<a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html">https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html</a><br/>
如果是gmail，在gmail的服务里面也会明确的写着怎么迁移。
通常情况下如下输入记录到Route53作为验证。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ns-***.awsdns-49.net.
</span><span class='line'>ns-***.awsdns-50.org.
</span><span class='line'>ns-***.awsdns-22.co.uk.
</span><span class='line'>ns-***.awsdns-59.com.</span></code></pre></td></tr></table></div></figure>


<h2>配置 Amazon SES</h2>

<p>进入aws 控制台，进入Simple Email Service(SES)，点击 domains -> Verify a New Domain。</p>

<h3>Route53 域名配置</h3>

<p>如果是Route53 托管的域名，他会直接提示你是否创建关联到Route53，直接点击关联就好了。关联主要分为几个方便，验证，DKIM，SPF验证。说简单一点就是验证这个域名是你的，验证这个邮箱地址发送是合法的，避免一些成为垃圾邮件的可能性。</p>

<h3>非 Route53 域名配置</h3>

<p>如果是非 Route53 域名也没有关系，他也会按步骤提示你配置一个TXT，和三个CNAME到你的DNS就可以。</p>

<h3>等待验证</h3>

<p>配置完成之后需要有一定的时间验证，等待验证成功之后会标记为验证通过，这个时候就可以进行下面的编码。</p>

<h2>程序实现</h2>

<h3>添加依赖</h3>

<p>首先需要添加两个aws的依赖，一个是通用的一个是ses的，<br/>
另外需要配置一个把富文本解析成普通文本的工具，下文会有更详细的解释，<br/>
最后配置一个velocity依赖，用于生成邮件模板。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-ses<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;optional&gt;</span>false<span class="nt">&lt;/optional&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.11.95<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-s3<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.11.95<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.jsoup<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jsoup<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.10.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>velocity<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>velocity<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建模板</h3>

<p>本文采用velocity生成邮件模板，好处就不说了。主要使用velocity的模板引擎生成邮件模板。<br/>
<a href="http://velocity.apache.org/engine/1.7/developer-guide.html">官方文档</a> <a href="https://www.ibm.com/developerworks/cn/java/j-lo-velocity1/">中文文档</a></p>

<h4>创建template.vm</h4>

<p>首先在 resouces下面创建一个 email-template.vm，因为测试内容比较简单，当然这里面可以编写html文档。内容如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>${title}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>${name}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>${content}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>构建模板</h4>

<p>直接使用 volecity 的模板引擎加载上面的 vm 模板，然后生成即可，具体代码如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailTemplateUtils</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Data</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">EmailEntity</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">generate</span><span class="o">(</span><span class="n">EmailEntity</span> <span class="n">emailEntity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">VelocityEngine</span> <span class="n">velocityEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VelocityEngine</span><span class="o">();</span>
</span><span class='line'>        <span class="n">velocityEngine</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">RuntimeConstants</span><span class="o">.</span><span class="na">RESOURCE_LOADER</span><span class="o">,</span> <span class="s">&quot;classpath&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">velocityEngine</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;classpath.resource.loader.class&quot;</span><span class="o">,</span> <span class="n">ClasspathResourceLoader</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">velocityEngine</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">velocityEngine</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="s">&quot;email-template.vm&quot;</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VelocityContext</span><span class="o">();</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">emailEntity</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">emailEntity</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;content&quot;</span><span class="o">,</span> <span class="n">emailEntity</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>            <span class="n">StringWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringWriter</span><span class="o">();</span>
</span><span class='line'>            <span class="n">template</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">EmailEntity</span> <span class="n">emailEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EmailEntity</span><span class="o">();</span>
</span><span class='line'>        <span class="n">emailEntity</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;email title&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">emailEntity</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">&quot;email content&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">emailEntity</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;email name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">generate</span> <span class="o">=</span> <span class="n">generate</span><span class="o">(</span><span class="n">emailEntity</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">generate</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接运行程序会得到如下，输出表示已经配置成功，稍后将其配置成自己的邮件模板的样子就行了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>email title<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>email name<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>email content<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>发送邮件</h3>

<p>发送邮件功能主要是调用 Amazon SES 的工具包发送，代码比较简单，直接阅读代码即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AmazonSESProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">EmailResult</span> <span class="nf">sendEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">from</span><span class="o">,</span> <span class="n">String</span> <span class="n">subject</span><span class="o">,</span> <span class="n">String</span> <span class="n">body</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">addrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Destination</span> <span class="n">destination</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Destination</span><span class="o">().</span><span class="na">withToAddresses</span><span class="o">(</span><span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Content</span> <span class="n">mailSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Content</span><span class="o">().</span><span class="na">withData</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Content</span> <span class="n">html</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Content</span><span class="o">().</span><span class="na">withData</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">textPlain</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">body</span><span class="o">).</span><span class="na">text</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Body</span> <span class="n">htmlBody</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Body</span><span class="o">().</span><span class="na">withHtml</span><span class="o">(</span><span class="n">html</span><span class="o">).</span><span class="na">withText</span><span class="o">(</span><span class="k">new</span> <span class="nf">Content</span><span class="o">().</span><span class="na">withData</span><span class="o">(</span><span class="n">textPlain</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Message</span><span class="o">().</span><span class="na">withSubject</span><span class="o">(</span><span class="n">mailSubject</span><span class="o">).</span><span class="na">withBody</span><span class="o">(</span><span class="n">htmlBody</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SendEmailRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SendEmailRequest</span><span class="o">().</span><span class="na">withSource</span><span class="o">(</span><span class="n">from</span><span class="o">).</span><span class="na">withDestination</span><span class="o">(</span><span class="n">destination</span><span class="o">).</span><span class="na">withMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">BasicAWSCredentials</span> <span class="n">awsCreds</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BasicAWSCredentials</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">AmazonSimpleEmailServiceClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AmazonSimpleEmailServiceClient</span><span class="o">(</span><span class="n">awsCreds</span><span class="o">);</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">setRegion</span><span class="o">(</span><span class="n">Region</span><span class="o">.</span><span class="na">getRegion</span><span class="o">(</span><span class="n">Regions</span><span class="o">.</span><span class="na">US_WEST_2</span><span class="o">));</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">sendEmail</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;send:succeed,address-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EmailResult</span><span class="o">.</span><span class="na">success</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AmazonServiceException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="s">&quot;Throttling&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getErrorCode</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;send:failure,addrs-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;error : Max for the rate!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;send:failure,addrs-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;error : &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EmailResult</span><span class="o">.</span><span class="na">failure</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;send:failure,addrs-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;error : &quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EmailResult</span><span class="o">.</span><span class="na">failure</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sendEmail</span><span class="o">(</span><span class="s">&quot;fromaddress@gmail.com&quot;</span><span class="o">,</span> <span class="s">&quot;email subject&quot;</span><span class="o">,</span> <span class="s">&quot;Test email from codedrinker&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;toaddress@gmail.com&quot;</span><span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要发送的逻辑就是创建Amazon 的Client，然后调用发送邮件，主要注意的是如下语句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">body</span><span class="o">).</span><span class="na">text</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们传递过来的body是 html 类型的，我们需要生成一个纯文本类型的，这样可以保证邮件接收者不能预览富文本类型的时候有一个纯文本预览，使用 Jsoup.parse 可以提取出来文本内容，这样可减少了邮件发送到垃圾箱的概率。具体关于邮件发送到垃圾箱的概率可以使用邮件测试网址进行进一步验证。<a href="https://www.mail-tester.com/">测试工具地址</a>。</p>

<h2>参考文献</h2>

<p><a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/getting-started.html">Amazon SES 文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说 Java hashCode]]></title>
    <link href="http://www.majiang.life/blog/deep-dive-on-java-hashcode/"/>
    <updated>2017-12-24T01:04:24+08:00</updated>
    <id>http://www.majiang.life/blog/deep-dive-on-java-hashcode</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>写过 <code>Java</code> 程序的同学一定都知道 <code>hashCode</code> 方法，它是 <code>Object</code> 对象的一个 <code>native</code> 方法。无论是我们平常使用的 <code>HashMap</code> 还是重写 <code>equals</code> 方法的时候，都会接触到 <code>hashCode</code> 方法，那么它究竟是怎么生成的，又有什么作用呢？笔者带着这个疑问开始探寻。</p>

<!-- more -->


<h2>hashCode 方法的定义</h2>

<p>在 <a href="https://docs.oracle.com/javase/7/docs/api/"><code>jdk api</code></a> 中 关于 <code>hashCode</code> 有如下说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Returns a <span class="nb">hash </span>code value <span class="k">for</span> the object.
</span><span class='line'>This method is supported <span class="k">for</span> the benefit of <span class="nb">hash </span>tables such as those provided by HashMap.
</span><span class='line'>The general contract of hashCode is:
</span><span class='line'>
</span><span class='line'>Whenever it is invoked on the same object more than once during an execution of a Java application,
</span><span class='line'>the hashCode method must consistently <span class="k">return</span> the same integer,
</span><span class='line'>provided no information used in equals comparisons on the object is modified.
</span><span class='line'>This integer need not remain consistent from one execution of an application to another execution of the same application.
</span><span class='line'>If two objects are equal according to the equals<span class="o">(</span>Object<span class="o">)</span> method,
</span><span class='line'><span class="k">then</span> calling the hashCode method on each of the two objects must produce the same integer result.
</span><span class='line'>It is not required that <span class="k">if</span> two objects are unequal according to the equals<span class="o">(</span>java.lang.Object<span class="o">)</span> method,
</span><span class='line'><span class="k">then</span> calling the hashCode method on each of the two objects must produce distinct integer results.
</span><span class='line'>However, the programmer should be aware that producing distinct integer results <span class="k">for</span> unequal objects may improve the performance of <span class="nb">hash </span>tables.
</span><span class='line'>As much as is reasonably practical,
</span><span class='line'>the hashCode method defined by class Object does <span class="k">return</span> distinct integers <span class="k">for</span> distinct objects.
</span><span class='line'><span class="o">(</span>This is typically implemented by converting the internal address of the object into an integer,
</span><span class='line'>  but this implementation technique is not required by the JavaTM programming language.<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
其大致意思如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>只要在Java应用程序的执行过程中多次调用同一个对象，
</span><span class='line'>hashCode方法必须始终返回相同的整数，
</span><span class='line'>前提是在对象的equals比较中没有使用的信息被修改。
</span><span class='line'>从应用程序的一次执行到同一应用程序的另一次执行，此整数不必保持一致。
</span><span class='line'>
</span><span class='line'>如果两个对象按照equals（Object）方法相等，
</span><span class='line'>那么在两个对象的每一个上调用hashCode方法必须产生相同的整数结果。
</span><span class='line'>如果两个对象根据equals（java.lang.Object）方法不相等，
</span><span class='line'>则不要求对两个对象中的每个对象调用hashCode方法都必须产生不同的整数结果。
</span><span class='line'>但是，程序员应该知道，为不相等的对象生成不同的整数结果可以提高散列表的性能。
</span><span class='line'>
</span><span class='line'>尽可能多地合理实用，由类Object定义的hashCode方法确实为不同的对象返回不同的整数。
</span><span class='line'>这通常通过将对象的内部地址转换为整数来实现，但JavaTM编程语言不需要此实现技术。
</span></code></pre></td></tr></table></div></figure>


<p>所以由上可以得到两条有用的信息，同一个对象 <code>hashcode</code> 的值在一次运行中一定相等，并且不同对象的 <code>hashcode</code> 一定不同，但是他还备注通常使用内部地址转换，但是 <code>JAVA</code> 不是使用这种方式实现的，那么怎么实现的呢？</p>

<h2>hashCode 实现原理</h2>

<h3>hashcode 源码</h3>

<p><code>OpenJDK</code> 的源码可以直接查看，所以我们就选择查看一下其源码一看究竟。<br/>
我们可以看到<code>src/share/vm/prims/jvm.h</code>和<code>src/share/vm/prims/jvm.cpp</code>两个文件中有关于 <code>hashcode</code> 的说明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   JVM_ENTRY<span class="o">(</span>jint, JVM_IHashCode<span class="o">(</span>JNIEnv* env, jobject handle<span class="o">))</span>
</span><span class='line'>   JVMWrapper<span class="o">(</span><span class="s2">&quot;JVM_IHashCode&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>   // as implemented in the classic virtual machine<span class="p">;</span> <span class="k">return</span> <span class="m">0</span> <span class="k">if</span> object is NULL
</span><span class='line'>   <span class="k">return</span> <span class="nv">handle</span> <span class="o">==</span> NULL ? <span class="m">0</span> : ObjectSynchronizer::FastHashCode <span class="o">(</span>THREAD, JNIHandles::resolve_non_null<span class="o">(</span>handle<span class="o">))</span> <span class="p">;</span>
</span><span class='line'> JVM_END
</span></code></pre></td></tr></table></div></figure>


<p>我们继续进入<code>FashHashCode</code>里面查看，其位于<code>src/share/vm/runtime/synchronizer.cpp</code>文件，相对代码比较多，我们只摘取关键部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">// Inflate the monitor to set hash code</span>
</span><span class='line'>  <span class="n">monitor</span> <span class="o">=</span> <span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">inflate</span><span class="p">(</span><span class="n">Self</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Load displaced header and check it has hash code</span>
</span><span class='line'>  <span class="n">mark</span> <span class="o">=</span> <span class="n">monitor</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">();</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">(</span><span class="n">mark</span><span class="o">-&gt;</span><span class="n">is_neutral</span><span class="p">(),</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">hash</span> <span class="o">=</span> <span class="n">mark</span><span class="o">-&gt;</span><span class="n">hash</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hash</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hash</span> <span class="o">=</span> <span class="n">get_next_hash</span><span class="p">(</span><span class="n">Self</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">mark</span><span class="o">-&gt;</span><span class="n">copy_set_hash</span><span class="p">(</span><span class="n">hash</span><span class="p">);</span> <span class="c1">// merge hash code into header</span>
</span><span class='line'>    <span class="n">assert</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">is_neutral</span><span class="p">(),</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="p">(</span><span class="n">markOop</span><span class="p">)</span> <span class="n">Atomic</span><span class="o">::</span><span class="n">cmpxchg_ptr</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">monitor</span><span class="p">,</span> <span class="n">mark</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">test</span> <span class="o">!=</span> <span class="n">mark</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// The only update to the header in the monitor (outside GC)</span>
</span><span class='line'>      <span class="c1">// is install the hash code. If someone add new usage of</span>
</span><span class='line'>      <span class="c1">// displaced header, please update this code</span>
</span><span class='line'>      <span class="n">hash</span> <span class="o">=</span> <span class="n">test</span><span class="o">-&gt;</span><span class="n">hash</span><span class="p">();</span>
</span><span class='line'>      <span class="n">assert</span> <span class="p">(</span><span class="n">test</span><span class="o">-&gt;</span><span class="n">is_neutral</span><span class="p">(),</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>      <span class="n">assert</span> <span class="p">(</span><span class="n">hash</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;Trivial unexpected object/monitor header usage.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// We finally get the hash</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>monitor</code> 相关代码我们先略过不理，通过 <code>if</code> 语句我们可以看出，当 <code>hash</code>为0时候需要调用 <code>get_next_hash</code> 生成一个新的 <code>hash</code>，那么我们便可以继续前行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">intptr_t</span> <span class="nf">get_next_hash</span><span class="p">(</span><span class="n">Thread</span> <span class="o">*</span> <span class="n">Self</span><span class="p">,</span> <span class="n">oop</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">intptr_t</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// This form uses an unguarded global Park-Miller RNG,</span>
</span><span class='line'>     <span class="c1">// so it&#39;s possible for two threads to race and generate the same RNG.</span>
</span><span class='line'>     <span class="c1">// On MP system we&#39;ll have lots of RW access to a global, so the</span>
</span><span class='line'>     <span class="c1">// mechanism induces lots of coherency traffic.</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">os</span><span class="o">::</span><span class="n">random</span><span class="p">()</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// This variation has the property of being stable (idempotent)</span>
</span><span class='line'>     <span class="c1">// between STW operations.  This can be useful in some of the 1-0</span>
</span><span class='line'>     <span class="c1">// synchronization schemes.</span>
</span><span class='line'>     <span class="kt">intptr_t</span> <span class="n">addrBits</span> <span class="o">=</span> <span class="n">cast_from_oop</span><span class="o">&lt;</span><span class="kt">intptr_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">addrBits</span> <span class="o">^</span> <span class="p">(</span><span class="n">addrBits</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">^</span> <span class="n">GVars</span><span class="p">.</span><span class="n">stwRandom</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span>            <span class="c1">// for sensitivity testing</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="o">++</span><span class="n">GVars</span><span class="p">.</span><span class="n">hcSequence</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">cast_from_oop</span><span class="o">&lt;</span><span class="kt">intptr_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Marsaglia&#39;s xor-shift scheme with thread-specific state</span>
</span><span class='line'>     <span class="c1">// This is probably the best overall implementation -- we&#39;ll</span>
</span><span class='line'>     <span class="c1">// likely make this the default in future releases.</span>
</span><span class='line'>     <span class="kt">unsigned</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateX</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">t</span> <span class="o">^=</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="mi">11</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateX</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateY</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateY</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateZ</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateZ</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateW</span> <span class="p">;</span>
</span><span class='line'>     <span class="kt">unsigned</span> <span class="n">v</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateW</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span> <span class="o">^</span> <span class="p">(</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="mi">19</span><span class="p">))</span> <span class="o">^</span> <span class="p">(</span><span class="n">t</span> <span class="o">^</span> <span class="p">(</span><span class="n">t</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">))</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateW</span> <span class="o">=</span> <span class="n">v</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">v</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">&amp;=</span> <span class="n">markOopDesc</span><span class="o">::</span><span class="n">hash_mask</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">value</span> <span class="o">=</span> <span class="mh">0xBAD</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="n">markOopDesc</span><span class="o">::</span><span class="n">no_hash</span><span class="p">,</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">TEVENT</span> <span class="p">(</span><span class="nl">hashCode</span><span class="p">:</span> <span class="n">GENERATE</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上述代码我们看到，其实 <code>hashCode</code> 的生成有6中方式<br/>
1. 随机数<br/>
2. 对象的内存地址的函数<br/>
3. 固定值，这个只是为了进行灵敏度测试<br/>
4. 递增序列<br/>
5. int类型的该对象的内存地址 <br/>
6. 结合当前线程和xorshift生成</p>

<p>通过 <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/87ee5ee27509/src/share/vm/runtime/globals.hpp#l1127">globals.hpp</a> 我们可以发现，JDK8 默认为5，也就是最后一种。<br/>
<code>product(intx, hashCode, 5, "(Unstable) select hashCode generation algorithm")</code>  <br/>
当然，OpenJDK6，7中用的都是第一种方案，那么问题又来了，既然都是随机数，那么怎么确保每次都一样的呢？</p>

<h3>对象头</h3>

<p>这里就需要引入一个<code>对象头</code>的概念，每次对象生成以后，都需要找一个地方存储一下这个对象的hashCode和锁信息，这就是<code>对象头</code>，英文称之为 <code>Mark Word</code>。这样一来我们就明白了，每次生成对象以后都会把它的<code>hashCode</code>存起来，这样无论对象怎么在新生代，老年代之间<code>游走</code>都不会改变其<code>hashCode</code>的值，然而事实并没有那么简单。</p>

<h3>偏向锁</h3>

<p>这时候我们翻回来看刚才略过的内容，<code>ObjectSynchronizer::FastHashCode()</code>里面的其他逻辑。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">UseBiasedLocking</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// NOTE: many places throughout the JVM do not expect a safepoint</span>
</span><span class='line'>    <span class="c1">// to be taken here, in particular most operations on perm gen</span>
</span><span class='line'>    <span class="c1">// objects. However, we only ever bias Java instances and all of</span>
</span><span class='line'>    <span class="c1">// the call sites of identity_hash that might revoke biases have</span>
</span><span class='line'>    <span class="c1">// been checked to make sure they can handle a safepoint. The</span>
</span><span class='line'>    <span class="c1">// added check of the bias pattern is to avoid useless calls to</span>
</span><span class='line'>    <span class="c1">// thread-local storage.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">mark</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">has_bias_pattern</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Box and unbox the raw reference just in case we cause a STW safepoint.</span>
</span><span class='line'>      <span class="n">Handle</span> <span class="n">hobj</span> <span class="p">(</span><span class="n">Self</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>      <span class="c1">// Relaxing assertion for bug 6320749.</span>
</span><span class='line'>      <span class="n">assert</span> <span class="p">(</span><span class="n">Universe</span><span class="o">::</span><span class="n">verify_in_progress</span><span class="p">()</span> <span class="o">||</span>
</span><span class='line'>              <span class="o">!</span><span class="n">SafepointSynchronize</span><span class="o">::</span><span class="n">is_at_safepoint</span><span class="p">(),</span>
</span><span class='line'>             <span class="s">&quot;biases should not be seen by VM thread here&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">BiasedLocking</span><span class="o">::</span><span class="n">revoke_and_rebias</span><span class="p">(</span><span class="n">hobj</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">JavaThread</span><span class="o">::</span><span class="n">current</span><span class="p">());</span>
</span><span class='line'>      <span class="n">obj</span> <span class="o">=</span> <span class="n">hobj</span><span class="p">()</span> <span class="p">;</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">mark</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">has_bias_pattern</span><span class="p">(),</span> <span class="s">&quot;biases should be revoked by now&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上述代码我们可以得知，当前对象处于<code>偏向锁</code>时，会清除<code>偏向锁</code>通过从<code>锁</code>上面取回<code>Mark Word</code> 信息。为什么提到取回呢？之前消失了吗？是的，现在就需要解释一下<code>偏向锁</code>了。<br/>
<code>Hotspot</code> 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入
了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程 <code>ID</code>，以后该线程在进入和退出同步块时不需要花费 <code>CAS</code> 操作来加锁和解锁，而只需简单的测试一下对象头的 <code>Mark Word</code> 里是否存储着指向当前线程的偏向锁，如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下 <code>Mark Word</code> 中偏向锁的标识是否设置成 1（表示当前是偏向锁），如果没有设置，则使用 <code>CAS</code> 竞争锁，如果设置了，则尝试使用 <code>CAS</code> 将对象头的偏向锁指向当前线程。所以我们便知道为什么有<code>取回</code>这个概念了。然而代码带没有结束。</p>

<h3>轻量级锁</h3>

<p>轻量级锁相对比较简单，<code>JVM</code>会在当前的线程栈桢中创建用于存放锁的空间，同时将对象头中的<code>Mark Word</code>复制到锁记录中，也称作 <code>Displaced Mark Word</code>。比较复杂的是<code>重量级</code>锁。</p>

<h3>重量级锁</h3>

<p>这个时候如果多个线程来竞争资源，就会发生<code>锁膨胀</code>，这样因为需要保存竞争资源需要<code>wait</code>的线程和相关信息，就引入了<code>monitor</code>的概念。于是这时候就把<code>Mark Word</code>存放到了<code>Monitor</code>里面，当然<code>Monitor</code>不仅仅用于存储对象的<code>Mark Word</code>，具体的作用就不是本文的重点了。</p>

<h2>hashCode 的用途</h2>

<p><code>hashCode</code> 的唯一性决定了他可以用来生成<code>HashMap</code>的key，同时也能判断对象是否为同一个对象。另外我们再重写他的时候要多加注意，因为<code>JVM</code>会根据它做一些性能优化。</p>

<h2>总结</h2>

<p>此文为笔者学习 <code>hashCode</code> 的笔记，如有问题欢迎指正。</p>

<h2>参考文献</h2>

<p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/87ee5ee27509/src/share/vm">OpenJDK 源码</a><br/>
<a href="https://docs.oracle.com/javase/7/docs/api/">Oracle JDK Docs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解 ElasticSearch Doc Values]]></title>
    <link href="http://www.majiang.life/blog/deep-dive-on-elasticsearch-doc-values/"/>
    <updated>2017-11-28T00:47:21+08:00</updated>
    <id>http://www.majiang.life/blog/deep-dive-on-elasticsearch-doc-values</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近在使用 <code>ElasticSearch</code>，于是简单看了一下内部实现，看到 <code>Doc Values</code>的地方发现网上的翻译很是拗口，于是就有了下面的这篇文章。</p>

<!-- more -->


<h2>为什么要有 Doc Values</h2>

<p>我们都知道 <code>ElasticSearch</code>之所以搜索这么快速，归功于他的<code>倒排索引</code>的设计，然而它也不是万能的，倒排索引的检索性能是非常快的，但是在字段值排序时却不是理想的结构。下面是一个简单的<code>倒排索引</code>的结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Term      Doc_1  Doc_2
</span><span class='line'>-------------------------
</span><span class='line'>Quick   |       |  X
</span><span class='line'>The     |   X   |
</span><span class='line'>brown   |   X   |  X
</span><span class='line'>dog     |   X   |
</span><span class='line'>dogs    |       |  X
</span><span class='line'>fox     |   X   |
</span><span class='line'>foxes   |       |  X
</span><span class='line'>in      |       |  X
</span><span class='line'>jumped  |   X   |
</span><span class='line'>lazy    |   X   |  X
</span><span class='line'>leap    |       |  X
</span><span class='line'>over    |   X   |  X
</span><span class='line'>quick   |   X   |
</span><span class='line'>summer  |       |  X
</span><span class='line'>the     |   X   |
</span><span class='line'>------------------------</span></code></pre></td></tr></table></div></figure>


<p>如上表便可以看出，他只有词对应的<code>doc</code>，但是并不知道每一个<code>doc</code>中的内容，那么如果想要排序的话每一个<code>doc</code>都去获取一次文档内容岂不非常耗时？<code>Doc Values</code>的出现使得这个问题迎刃而解。</p>

<h2>Doc Values 是什么</h2>

<p>其实大部分<code>NoSQL</code>在创建多个索引的时候也采用这种方式，就是再使用另一种方式存储一份文本，使得可以增强搜索。<code>Doc values</code> 通过转置两者间的关系来解决这个问题。倒排索引将词项映射到包含它们的文档，<code>Doc values</code> 将文档映射到它们包含的词项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Doc      Terms
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'>Doc_1 | brown, dog, fox, jumped, lazy, over, quick, the
</span><span class='line'>Doc_2 | brown, dogs, foxes, in, lazy, leap, over, quick, summer
</span><span class='line'>Doc_3 | dog, dogs, fox, jumped, over, quick, the
</span><span class='line'>-----------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>当数据被转置之后，想要收集到每个文档行，获取所有的词项就非常简单了。所以搜索使用倒排索引查找文档，聚合操作收集和聚合 <code>Doc Values</code> 里的数据，这就是 <code>ElasticSearch</code>。</p>

<h2>深入理解 ElasticSearch Doc Values</h2>

<p><code>Doc Values</code> 是在索引时与倒排索引同时生成。也就是说 <code>Doc Values</code> 和<code>倒排索引</code>一样，基于 <code>Segement</code> 生成并且是不可变的。同时 <code>Doc Values</code> 和<code>倒排索引</code>一样序列化到磁盘，这样对性能和扩展性有很大帮助。</p>

<p><code>Doc Values</code> 通过序列化把数据结构持久化到磁盘，我们可以充分利用操作系统的内存，而不是 <code>JVM</code> 的 <code>Heap</code> 。
当 <code>working set</code> 远小于系统的可用内存，系统会自动将 <code>Doc Values</code> 保存在内存中，使得其读写十分高速；
不过，当其远大于可用内存时，操作系统会自动把 <code>Doc Values</code> 写入磁盘。很显然，这样性能会比在内存中差很多，但是它的大小就不再局限于服务器的内存了。如果是使用 <code>JVM</code> 的 <code>Heap</code> 来实现那么只能是因为 <code>OutOfMemory</code> 导致程序崩溃了。</p>

<h2>Doc Values 压缩</h2>

<p>从广义来说，<code>Doc Values</code> 本质上是一个序列化的 <em>列式存储</em>，这个结构非常适用于聚合、排序、脚本等操作。而且，这种存储方式也非常便于压缩，特别是数字类型。这样可以减少磁盘空间并且提高访问速度。下面来看一组数字类型的 <code>Doc Values</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Doc      Terms
</span><span class='line'>  -----------------------------------------------------------------
</span><span class='line'>  Doc_1 | 100
</span><span class='line'>  Doc_2 | 1000
</span><span class='line'>  Doc_3 | 1500
</span><span class='line'>  Doc_4 | 1200
</span><span class='line'>  Doc_5 | 300
</span><span class='line'>  Doc_6 | 1900
</span><span class='line'>  Doc_7 | 4200
</span><span class='line'>  -----------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>你会注意到这里每个数字都是 100 的倍数，<code>Doc Values</code> 会检测一个段里面的所有数值，并使用一个 <em>最大公约数</em> ，方便做进一步的数据压缩。我们可以对每个数字都除以 100，然后得到：  <code>[1,10,15,12,3,19,42]</code> 。现在这些数字变小了，只需要很少的位就可以存储下，也减少了磁盘存放的大小。</p>

<p><code>Doc Values</code> 在压缩过程中使用如下技巧。它会按依次检测以下压缩模式:</p>

<ul>
<li>如果所有的数值各不相同（或缺失），设置一个标记并记录这些值</li>
<li>如果这些值小于 256，将使用一个简单的编码表</li>
<li>如果这些值大于 256，检测是否存在一个最大公约数</li>
<li>如果没有存在最大公约数，从最小的数值开始，统一计算偏移量进行编码</li>
</ul>


<p>当然如果存储<code>String</code>类型，其一样可以通过顺序表对<code>String</code>类型进行数字编码，然后再把数字类型构建<code>Doc Values</code>。</p>

<h2>禁用 Doc Values</h2>

<p><code>Doc Values</code> 默认对所有字段启用，除了 <code>analyzed strings</code>。也就是说所有的数字、地理坐标、日期、IP 和不分析（<code>not_analyzed</code>）字符类型都会默认开启。</p>

<p><code>analyzed strings</code> 暂时还不能使用 <code>Doc Values</code>，是因为经过分析以后的文本会生成大量的<code>Token</code>，这样非常影响性能。</p>

<p>虽然<code>Doc Values</code>非常好用，但是如果你存储的数据确实不需要这个特性，就不如禁用他，这样不仅节省磁盘空间，也许会提升索引的速度。</p>

<p>要禁用 <code>Doc Values</code> ，在字段的映射（mapping）设置 <code>doc_values: false</code> 即可。例如，这里我们创建了一个新的索引，字段 <code>"session_id"</code> 禁用了  <code>Doc Values</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUT my_index
</span><span class='line'>{
</span><span class='line'>  "mappings": {
</span><span class='line'>    "my_type": {
</span><span class='line'>      "properties": {
</span><span class='line'>        "session_id": {
</span><span class='line'>          "type":       "string",
</span><span class='line'>          "index":      "not_analyzed",
</span><span class='line'>          "doc_values": false 
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>通过设置 <code>doc_values: false</code> ，这个字段将不能被用于聚合、排序以及脚本操作</p>

<p>同样可以禁用倒排索引，使它不能被正常搜索，但是可以排序，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUT my_index
</span><span class='line'>{
</span><span class='line'>  "mappings": {
</span><span class='line'>    "my_type": {
</span><span class='line'>      "properties": {
</span><span class='line'>        "customer_token": {
</span><span class='line'>          "type":       "string",
</span><span class='line'>          "index":      "not_analyzed",
</span><span class='line'>          "doc_values": true, 
</span><span class='line'>          "index": "no" 
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>通过设置 <code>doc_values: true</code> 和 <code>index: no</code> ，我们得到一个只能被用于聚合/排序/脚本的字段。</p>

<h2>总结</h2>

<p><code>倒排索引</code>和 <code>Doc Values</code> 只是 <code>ElasticSearch</code>的冰山一角，如果有兴趣的同学可以做更深入的研究，本文只是笔者的学习笔记，希望对大家有帮助。</p>
]]></content>
  </entry>
  
</feed>
