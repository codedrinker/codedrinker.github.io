<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[码匠笔记]]></title>
  <link href="http://www.majiang.life/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2018-04-30T09:12:49+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用 Heroku 搭建免费的微信小程序服务]]></title>
    <link href="http://www.majiang.life/blog/how-to-set-up-mini-programs-free-server-using-heroku/"/>
    <updated>2018-04-30T08:42:05+08:00</updated>
    <id>http://www.majiang.life/blog/how-to-set-up-mini-programs-free-server-using-heroku</id>
    <content type="html"><![CDATA[<h2>起源</h2>

<p>最近小程序愈发的火热，好多人都纷纷的加入到小程序的开发阵营。虽然小程序的开发对个人用户是免费的，但是还是有一些要求的，比如需要服务器支持，购买域名，并且需要 HTTPS 支持，那么这样对于一些想学习小程序开发，或者是做一些开源的小程序工具的开发者来说，购买域名，服务器，HTTPS搭建都是额外的成本。虽然腾讯云提供了免费的调试环境，但是生成环境还是需要购买的。这里小编就来给搭建提供一种免费搭建小程序服务的方式。</p>

<!-- more -->


<h2>简介</h2>

<p>Heroku是一个支持多种编程语言的云平台即服务。在2010年被Salesforce.com收购。Heroku作为最开始的云平台之一，从2007年6月起开发，当时它仅支持Ruby，但后来增加了对Java、Node.js、Scala、Clojure、Python以及PHP和Perl的支持。基础操作系统是Debian，在最新的堆栈则是基于Debian的Ubuntu。</p>

<p>这样一下自己就解决问题，Heroku 作为PaaS 支持各种语言，同时他默认支持 HTTPS。乍一看他不也是 PaaS 吗，肯定也需要收费啊。为什么博主说不收费呢？ <br/>
那么我们看一下他的官方介绍。他提供起初的免费版本，他是<code>512 MB RAM │ 1 web/1 worker</code>，每个月提供免费的1000个小时，如果你超过1000个小时就不提供服务了，不过我们粗略的计算一下，1x24x30=720，按照30天计算的话才720小时，加上免费的版本还有一个特性，30分钟没有人使用就自动休眠，下次访问的时候自动启动，休眠期间不计入时间。这样对于刚刚小程序起步的我们已经足够了，并且你可以做好几个小程序的服务呢。</p>

<h2>注册</h2>

<p>直接去官网注册即可。<a href="https://www.heroku.com">https://www.heroku.com</a></p>

<h2>搭建</h2>

<p>进入 <a href="https://devcenter.heroku.com/">https://devcenter.heroku.com/</a> 页面，即可选择对应的语言进行开发。<br/>
英文不是很好的小伙伴可能有点吃力，因为这个是纯外文的。不过笔者也整理了一个中文的搭建过程，希望可以帮到大家。<br/>
<a href="http://www.majiang.life/blog/heroku-get-started/?utm_source=inner">Heroku 入门教程之：使用 Heroku 快速搭建站点</a></p>

<h2>实例</h2>

<p>官方提供的 JAVA 例子好多东西都自己集成，笔者结合官方的例子自己写了一个，增加了 Spring，MyBatis，MySQL，H2，Migration的支持。如果有需要的可以自取。<br/>
<a href="https://github.com/codedrinker/heroku-spring-boot-mybatis-mysql-flyway-example">https://github.com/codedrinker/heroku-spring-boot-mybatis-mysql-flyway-example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUC系列:ThreadPoolExecutor]]></title>
    <link href="http://www.majiang.life/blog/juc-threadpoolexecutor/"/>
    <updated>2018-04-28T00:22:21+08:00</updated>
    <id>http://www.majiang.life/blog/juc-threadpoolexecutor</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>ThreadPoolExecutor 是 JUC 里面的成员，我们可以使用他轻松的创建线程池。<br/>
当然我们可以自己创建线程，但是有 ThreadPoolExecutor，他的好处还是很多的，比如可以帮我们管理线程，不需要我们手动的关闭线程，同时可以通过各种不同的线程创建和销毁策略应对不同的多线程场景。合理的使用 ThreadPoolExecutor 会让我们的开发效率和性能事半功倍。</p>

<!-- more -->


<h2>使用</h2>

<h3>创建</h3>

<p>我们可以通过ThreadPoolExecutor来创建一个线程池。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new  ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, milliseconds,runnableTaskQueue, handler);</span></code></pre></td></tr></table></div></figure>


<p>创建一个线程池需要输入几个参数，需要简单的讲解一下。
corePoolSize：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。这个时候新的线程会放到阻塞队列里面。也就是下面的参数。</p>

<p>runnableTaskQueue：阻塞队列有很多种，分别使用不同的场景。
ArrayBlockingQueue</p>

<ul>
<li>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</li>
<li>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出）排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</li>
<li>PriorityBlockingQueue：一个具有优先级得无限阻塞队列。</li>
</ul>


<p>maximumPoolSize：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的任务队列这个参数就没什么效果。</p>

<p>ThreadFactory：用于设置创建线程的工厂，可以创建线程的时候指定名字和一些其他配置，方便记录和调试。</p>

<p>RejectedExecutionHandler：当队列和线程池都满了，这个时候线程池已经出现负载问题，不能处理新的任务了，所以需要一个策略来处理。可选的策略如下，当然我们可以实现RejectedExecutionHandler接口自定义策略。</p>

<ul>
<li>AbortPolicy：直接抛出异常。</li>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>
<li>DiscardPolicy：不处理，丢弃掉。</li>
</ul>


<p>keepAliveTime：线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。减少因频繁创建线程消耗的时间。<br/>
TimeUnit：可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</p>

<h2>使用</h2>

<p>使用方式很简单，有两种方式，一种是直接execute，这样直接可以运营一个 Runnable的类，但是不能获得返回值，另一种方式是使用submit，调用成功以后会获得一个future，这样就可以通过这个future查看当前线程的运行状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TheadPoolTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ThreadPoolExecutor</span> <span class="n">threadPoolExecutor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">60</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;());</span>
</span><span class='line'>        <span class="n">threadPoolExecutor</span><span class="o">.</span><span class="na">execute</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;?&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">threadPoolExecutor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">future</span><span class="o">.</span><span class="na">isDone</span><span class="o">()){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="na">isDone</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<p>主要的配置参数就是coreSize了，其他的参数主要还是在配置coreSize使用。通常情况下任务分为CPU密集型任务和IO密集型任务
CPU密集型任务配置尽可能少的线程数量，如配置Ncpu+1个线程的线程池，可以使用Executors.newFixedThreadPool()创建。
IO密集型任务则由于需要等待IO操作，线程并不是一直在执行任务，则配置尽可能多的线程，如2*Ncpu。混合型的任务，可以使用 Executors.newCachedThreadPool 创建。</p>

<h2>关闭</h2>

<h3>shutdown</h3>

<p>将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>

<h3>shutdownNow</h3>

<p>遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。</p>

<p>当调用上述任何一个方式，isShutdown方法就会返回true。当所有任务直接完成以后，isTermined方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复 Octopress Table 样式]]></title>
    <link href="http://www.majiang.life/blog/fixing-octopress-table-rendering/"/>
    <updated>2018-02-24T20:19:39+08:00</updated>
    <id>http://www.majiang.life/blog/fixing-octopress-table-rendering</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>Octopress 自带的 Table 样式太丑了，于是自己自定义一个，方法非常简单，操作如下。</p>

<!-- more -->


<h2>效果</h2>

<table>
<thead>
<tr>
<th>key </th>
<th> value1 </th>
<th> value2</th>
</tr>
</thead>
<tbody>
<tr>
<td>a   </td>
<td> apple  </td>
<td> aardvark</td>
</tr>
<tr>
<td>b   </td>
<td> banana </td>
<td> bonobo</td>
</tr>
<tr>
<td>c   </td>
<td> clementine </td>
<td> cat</td>
</tr>
</tbody>
</table>


<p>源码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>key | value1 | value2
</span><span class='line'>----|--------|----------
</span><span class='line'>a   | apple  | aardvark
</span><span class='line'>b   | banana | bonobo
</span><span class='line'>c   | clementine | cat</span></code></pre></td></tr></table></div></figure>


<h2>编码</h2>

<p>在 sass/custom 目录创建 _better_tables.scss，填写如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// make the text for the header row bold and centered.</span>
</span><span class='line'><span class="c1">// (I have not been able to figure out where jekyll/octopress are overriding</span>
</span><span class='line'><span class="c1">//  the text-align and setting it to `left`)</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">th</span> <span class="p">{</span> <span class="na">font-weight</span><span class="o">:</span> <span class="no">bold</span><span class="p">;</span> <span class="na">text-align</span><span class="o">:</span> <span class="no">center</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// typography for p/blockquote/ul/ol puts a 1.5em margin below those elements,</span>
</span><span class='line'><span class="c1">// so do the same for our tables ...</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">table</span> <span class="p">{</span> <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.5</span><span class="kt">em</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... but undo that for tables for pygments-generated code</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">table</span> <span class="p">{</span> <span class="na">margin-bottom</span><span class="o">:</span> <span class="no">inherit</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// add a border around each cell and padding around its content ...</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">th</span><span class="o">,</span> <span class="nc">.entry-content</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">border</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="mh">#ddd</span><span class="p">;</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">6</span><span class="kt">px</span> <span class="mi">13</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... but undo that for tables for pygments-generated code</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">th</span><span class="o">,</span> <span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">border</span><span class="o">:</span> <span class="no">inherit</span><span class="p">;</span> <span class="na">padding</span><span class="o">:</span> <span class="no">inherit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// zebra-stripe the rows (N.B. `nth-child(2n)` works too) ...</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">tr</span>                 <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="mh">#FFFFFF</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nt">tr</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">even</span><span class="o">)</span> <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="mh">#F8F8F8</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... but undo that for tables for pygments-generated code</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">tr</span>                 <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="no">inherit</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.entry-content</span> <span class="nc">.code</span> <span class="nt">tr</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">even</span><span class="o">)</span> <span class="p">{</span> <span class="na">background-color</span><span class="o">:</span> <span class="no">inherit</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>entry-content</code> 是为了限制这个样式只在博文中生效。<br/>
然后在 <code>_styles.scss</code> 文件中添加一行内容即可完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;better_tables&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考文档</h2>

<p><a href="http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/">http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的成功首先需要从规划时间开始]]></title>
    <link href="http://www.majiang.life/blog/how-to-manage-your-time-effectively/"/>
    <updated>2018-02-23T22:57:57+08:00</updated>
    <id>http://www.majiang.life/blog/how-to-manage-your-time-effectively</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>最近突然觉得无论是生活还是工作乱糟糟的，没有一个计划，想到哪里做到哪里。不知不觉时间已经过去了，但是原来的计划都没有实现。而后无意间看到了一篇新闻，关于<a href="https://mp.weixin.qq.com/s/JMd0brQfNmHll991mOs1yQ">王健林的一天</a>，很受感触:</p>

<blockquote><p>想想我们本为平庸之辈还在浑浑噩噩的生活，他人已然成功却更加努力，这不禁让我想去了一句话：“比你优秀的人不可怕，可怕的是比你优秀的人比你更努力”。</p></blockquote>

<p>所以如果你和我一样，对目前自己的现状不满意，对自己的水平也不满意，不妨参考大佬们的作息时间制定一下自己的作息，不需要一样，我给自己规划的也不一定对。当然笔者不是说有了作息时间一定成功，和大佬们比肩，而是有了它能让你“充实”。</p>

<!-- more -->


<h2>大佬们的作息</h2>

<p>柳传志习惯早起，每天5点起床，运动一小时，然后早餐，上班处理工作。<br/>
苹果公司创始人乔布斯6点起床，“在孩子们起床前做一些锻炼和工作，然后和孩子们吃早餐，看着他们上学。”<br/>
巨人网络集团董事长史玉柱，每天凌晨三四点入睡，然后从午后开始工作。<br/>
新东方董事长兼总裁俞敏洪的作息时间比较规律，每天早上六点钟起床，一天工作十几个小时，对于他来说几乎没有节假日，他曾经抱怨自己甚至没有时间看完一整本书。<br/>
李嘉诚已经有88岁高龄，但却依然保持早起习惯：无论每天多晚睡，第二天早晨6点一定会准时起床。随后，听新闻，打一个半小时高尔夫。在8点前到办公室工作。<br/>
美国通用电气公司董事长杰夫·伊梅尔特起床时间是5：30。<br/>
星巴克咖啡公司创始人霍华德·舒尔茨每天早上4：30起床，吃早餐的同时还能高效率地看完三份报纸，他会保证自己在6点之前赶到办公室。<br/>
<a href="http://www.sohu.com/a/219234926_762024">想看更多请点击</a></p>

<h2>规划自己的作息</h2>

<p>规划是规划，但是重在坚持，不坚持的话再多的规划都是空话。笔者第一次做规划，先按照下面的尝试一下，看看是不是能坚持21天养成习惯。空挡的时间是什么？当然是工作的时间。周末呢？当然是陪家人。 当然时间的规划也是循序渐进的，开始规划。</p>

<h3>2018-02-23</h3>

<h4>作息</h4>

<ul>
<li>6:00 起床</li>
<li>6:00 - 6:30 健身</li>
<li>6:30 - 7:00 洗漱+冥想(计划和变化)</li>
<li>7:00 - 8:00 学习技能</li>
<li>8:00 - 9:00 上班路上(看新闻)</li>
<li>9:00 - 10:00 回顾(工作内容和技术难点)</li>
<li>12:00 - 14:00 写文章</li>
<li>9:00 - 10:00 下班路上(看文学书)</li>
<li>10:00 - 陪家人+看技术书籍</li>
</ul>


<h4>作息说明</h4>

<ul>
<li>6:00起床，没有起这么早过，但是如果不早起你的时间哪里来？就像是特朗普在《每日新闻》里说:“一天睡12-14小时的人如何能与每天睡3-4个小时的人竞争?”。</li>
<li>6:00 - 6:30 健身，公司有健身房，但是早晨起来需要精神一下，用自己的器材抖擞一下精神。</li>
<li>6:30 - 7:00 洗漱+冥想，洗漱也可以思考，主要思考一下今天昨天做的事，今天该做的事情，是否有疏漏，同时可以考虑一下家庭中是否有什么需要计划的。虽然在上面大佬的作息中很少看到家庭的因素，但是齐家治国平天下嘛。</li>
<li>7:00 - 8:00 学习技能，做技术这个行业，不想吃年轻饭，不想有中年危机就必须坚持的学下去。相比大家看中年危机的文章也是太多了吧。当然如果你能按照 <a href="https://amazon.cn/gp/product/B00368C0FG/ref=as_li_tl?ie=UTF8&amp;tag=majiang-23&amp;camp=536&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B00368C0FG&amp;linkId=8e76aef45d9df7e6f02fd7b3f4c3a42a"><strong>GTD</strong></a> 去做那效果会更好。Omnifocus 软件是一个不错的选择。</li>
<li>8:00 - 9:00、9:00 - 10:00 <a href="https://mp.weixin.qq.com/s/J9vWk4cvLRhrKQ5HxLH-zg">《如何有效的进行碎片化学习》</a>，<a href="https://amazon.cn/gp/product/B005DSK4W8/ref=as_li_tl?ie=UTF8&amp;tag=majiang-23&amp;camp=536&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B005DSK4W8&amp;linkId=ef1261dd4c6cf521898673e9f539ab9f">《暗时间》</a>，看过上面的文章和书籍的人就会明白，零碎的时间才是最多的时间。</li>
<li>12:00 - 14:00，有午睡习惯的码友就算了，本人是大部分中午时间都奉献给“王者荣耀”了，现在想想几千局的时间就明白了。一两个小时，整理一个文章发发博文，整理一下微信号的时间肯定是有的，其实主要是知识的积累。</li>
<li>10:00 点以后到家对于我们这个行业的人来说很正常，但是对于家庭来说已经迟到了。所以应该有更多的时间陪陪家人，剩下的时间看看技术方面的书籍。一天一个小时就够了，这个就要推荐 “网易蜗牛读书”，用一下你就知道他的好处了。</li>
</ul>


<h2>共勉</h2>

<p>最后希望我们都能按照计划如期进行，摆脱自己的舒适区，以此共勉。</p>

<h2>参考文献</h2>

<p><a href="https://www.zhihu.com/question/48553439">https://www.zhihu.com/question/48553439</a><br/>
<a href="http://www.sohu.com/a/219234926_762024">http://www.sohu.com/a/219234926_762024</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commenthub —— 多说、网易云跟帖的替代品]]></title>
    <link href="http://www.majiang.life/blog/octopress-and-hexo-comments-widget/"/>
    <updated>2018-02-19T20:57:35+08:00</updated>
    <id>http://www.majiang.life/blog/octopress-and-hexo-comments-widget</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>“多说”和“网易云跟帖”相继不维护了，每一次给大家带来了希望又带来了失望，于是 <a href="https://github.com/codedrinker/commenthub">Commenthub</a> 出现了。Commenthub 是作者使用免费的服务 Heroku 和 Github Issues 结合起来做的一套开源的评论系统。其灵感源于 Gitment，但是 Gitment 的 Key 和 Secret 都存在浏览器端，这样对于安全也是一个问题，于是作者使用 Heroku 搭建后端服务用于处理业务和存储证书，通过 iframe 实现评论功能。</p>

<!-- more -->


<h2>效果图</h2>

<p><img src="http://www.majiang.life/images/posts/commenthub1.png" alt="Demo" /></p>

<h2>演示地址</h2>

<p><a href="http://commenthub.github.io/">http://commenthub.github.io/</a></p>

<h2>功能介绍</h2>

<p>Commenthub 目前只支持 Github 用户登录评论，同时也只支持 Github 用户为自己的博客添加评论功能。目前 Commenthub 支持 Markdown 语法，表情，手机和PC响应式布局。</p>

<h2>Octopress 接入</h2>

<h3>注册 commenthub 账号</h3>

<p>访问 <a href="http://commenthub.herokuapp.com/">Commenthub官网</a>，点击 Sign up，使用 Github 账号登录成功以后，点击 Set up，填写博客地址。同时记住 ID，后面需要使用。</p>

<h3>配置 config.yml</h3>

<p>在 config.yml 里面填写 commenthub_id，其内容就是上面说的ID，用于标记作者是谁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commenthub_id: 3821949</span></code></pre></td></tr></table></div></figure>


<h3>配置显示位置</h3>

<p>在 <code>_layouts/post.html</code> 的 article 标签下面添加如下代码，用来告诉 Commenthub，在什么地方显示评论功能。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.commenthub_id and page.comments == true %}
</span><span class='line'>  <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>评论<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;commenthub_thread&quot;</span> <span class="na">aria-live=</span><span class="s">&quot;polite&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h3>创建 commenthub.html</h3>

<p>创建 <code>includes/commenthub.html</code>，填入如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% comment %} Load script if commenthub comments are enabled and `page.comments` is either empty (index) or set to true {% endcomment %}
</span><span class='line'>{% if site.commenthub_id and page.comments != false %}
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_id</span> <span class="o">=</span> <span class="s1">&#39;{{ site.commenthub_id }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_website</span> <span class="o">=</span> <span class="s1">&#39;{{ site.url }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_identifier</span> <span class="o">=</span> <span class="s1">&#39;{{ page.url }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_url</span> <span class="o">=</span> <span class="s1">&#39;{{ site.url }}{{ page.url }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">commenthub_title</span> <span class="o">=</span> <span class="s1">&#39;{{ page.title }}&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;https://commenthub.herokuapp.com/js/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}());</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h3>引入 commenthub.html</h3>

<p>在 <code>includes/after_foot.html</code> 里面添加一行如下内容，用于引入 commenthub.html 文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% include commenthub.html %}
</span></code></pre></td></tr></table></div></figure>


<h3>完成</h3>

<p>这样 Octopress 的配置就结束了，如果配置中遇到问题，可以在当前博客中评论留言，或者到 Github Issue 中留言。</p>

<h2>Hexo 接入</h2>

<p>Hexo 使用的是比较热门的主题 Next。</p>

<h3>注册 commenthub 账号</h3>

<p>同上</p>

<h3>配置 config.yml</h3>

<p>配置 <code>themes/next/_config.yml</code> 文件，在里面的 Disqus 后面配置如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commenthub:
</span><span class='line'>  enable: true
</span><span class='line'>  id: your_id
</span><span class='line'>  site: your_website_url</span></code></pre></td></tr></table></div></figure>


<h3>配置显示位置</h3>

<p>在<code>themes/next/layout/_partials/comments.swig</code>里面添加一行代码，记得注意看<code>elseif</code>的位置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  {% elseif theme.commenthub.enable %}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;comments&quot;</span> <span class="na">id=</span><span class="s">&quot;comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;commenthub_thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建 commenthub.swig</h3>

<p>创建新文件<code>themes/next/layout/_third-party/comments/commenthub.swig</code>并贴入如下代码，如下代码主要是用于加载和生成评论的逻辑。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname %}
</span><span class='line'>  {% if theme.commenthub.enable %}
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_id</span> <span class="o">=</span> <span class="s1">&#39;{{ theme.commenthub.id }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_website</span> <span class="o">=</span> <span class="s1">&#39;{{ theme.commenthub.site }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_identifier</span> <span class="o">=</span> <span class="s1">&#39;{{ page.path }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_url</span> <span class="o">=</span> <span class="s1">&#39;{{ page.permalink }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">commenthub_title</span> <span class="o">=</span> <span class="s1">&#39;{{ page.title| addslashes }}&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dsq</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">dsq</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">dsq</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">dsq</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;https://commenthub.herokuapp.com/js/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>      <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h3>引入 commenthub.swig</h3>

<p>在<code>themes/next/layout/_third-party/comments/index.swig</code>文件添加如下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% include &#39;commenthub.swig&#39; %}
</span></code></pre></td></tr></table></div></figure>


<h3>完成</h3>

<p>这样 Hexo 的配置就结束了，如果配置中遇到问题，可以在当前博客中评论留言，或者到 Github Issue 中留言。</p>

<h2>建议与反馈</h2>

<p>如果在使用过程中有任何问题欢迎建议和反馈到 <a href="https://github.com/codedrinker/commenthub">Commenthub</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给博客添加目录]]></title>
    <link href="http://www.majiang.life/blog/blog-table-of-contents/"/>
    <updated>2018-02-19T12:11:10+08:00</updated>
    <id>http://www.majiang.life/blog/blog-table-of-contents</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Hexo 模板的博客都带了文章目录[toc]，但是作者当前使用的是 Octopress 博客系统，所以不支持目录。这样给阅读的人带来了很大的不便捷。所以作者使用了 Table of contents sidebar 为 Octopress 添加了目录，并且可以快速定位。过程很简单，内容如下。</p>

<!-- more -->


<h2>添加插件</h2>

<p>直接添加到如下代码到博客通用的文件即可，其中 querySelector 可以定义生成目录的区域。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://table-of-contents-sidebar.github.io/table-of-contents-sidebar-lib/table-of-contents-sidebar.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">TableOfContents</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">basePath</span><span class="o">:</span> <span class="s2">&quot;https://table-of-contents-sidebar.github.io/table-of-contents-sidebar-lib/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">querySelector</span><span class="o">:</span> <span class="s2">&quot;body&quot;</span> <span class="c1">// or other css querySelector</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>插件</h2>

<p>这样仅仅是看自己的博客有了目录，如果想看别人的博客也有目录，可以安装 Table of contents sidebar 的插件，这样只要能识别的文章都能查看目录并且快速定位了。<br/>
<a href="https://chrome.google.com/webstore/detail/table-of-contents-sidebar/ohohkfheangmbedkgechjkmbepeikkej">https://chrome.google.com/webstore/detail/table-of-contents-sidebar/ohohkfheangmbedkgechjkmbepeikkej</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加 扩展相关阅读]]></title>
    <link href="http://www.majiang.life/blog/octopress-related-posts/"/>
    <updated>2018-02-18T20:24:22+08:00</updated>
    <id>http://www.majiang.life/blog/octopress-related-posts</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>原生的 Octopress 没有更丰富的阅读体验，只有上一篇下一篇，每次需要为当前文章添加相关文章的时候都需要在 Markdown 里面手动填写，这样非常浪费时间又不全面，于是笔者使用 Category 作为相关性的依据，修改了 Liqiud 代码，使得每一个 post 里面有具有相关的文章。</p>

<!-- more -->


<h2>实现</h2>

<p>实现起来也是很简单的，直接把如下代码添加到 <code>includes/article.html</code> 里面，跟在下面代码之后即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;entry-content&quot;</span><span class="nt">&gt;</span>{{ content }}
</span></code></pre></td></tr></table></div></figure>


<p>
代码如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>扩展阅读<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>{% if page %}
</span><span class='line'>    <span class="nt">&lt;ol&gt;</span>
</span><span class='line'>      {% for category in page.categories %}
</span><span class='line'>        {% for post in site.categories[category] %}
</span><span class='line'>        {% if  page.url == post.url %}
</span><span class='line'>          {% continue %}
</span><span class='line'>        {% endif %}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        {% endfor %}
</span><span class='line'>      {% endfor %}
</span><span class='line'>    <span class="nt">&lt;/ol&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>原理就比较简单了，取到当前页面的 categories，然后循环遍历得到每一个category下面的 post 展示即可。</p>

<h2>参照</h2>

<p>实际中的应用可以参照如下地址<br/>
<a href="https://github.com/codedrinker/codedrinker.github.io/blob/source/source/_includes/article.html">参考地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku 教程：绑定自定义域名]]></title>
    <link href="http://www.majiang.life/blog/heroku-custom-domains/"/>
    <updated>2018-02-18T18:50:38+08:00</updated>
    <id>http://www.majiang.life/blog/heroku-custom-domains</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Heroku 会提供一个默认的域名，即[name of app].herokuapp.com，如果你不喜欢可以绑定自己的域名。</p>

<!-- more -->


<h2>绑定</h2>

<p>绑定方式比较简单，直接修改 DNS 指向到 Heroku，然后配置Heroku 即可。</p>

<h3>修改 DNS</h3>

<p>在 Heroku 项目目录使用 <code>heroku domains</code> 命令查看当前项目的域名，为 DNS 添加 CNAME 指向到该域名。</p>

<h3>配置 Heroku</h3>

<p>使用 <code>heroku domains:add</code> 命令添加域名到 Heroku，然后等待即可。更多详细内容直接参照 <a href="https://devcenter.heroku.com/articles/custom-domains">官方文档</a></p>

<h2>参考文献</h2>

<p><a href="https://devcenter.heroku.com/articles/custom-domains">https://devcenter.heroku.com/articles/custom-domains</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku 教程：使用 Heroku 快速搭建站点]]></title>
    <link href="http://www.majiang.life/blog/heroku-get-started/"/>
    <updated>2018-02-18T17:49:25+08:00</updated>
    <id>http://www.majiang.life/blog/heroku-get-started</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Heroku 是 Salesforce 旗下云服务商，提供方便便捷的各种云服务，如服务器，数据库，监控，计算等等。并且他提供了免费版本，这使得我们这些平时想搞一些小东西的人提供了莫大的便捷，虽然他有时长和宕机的限制，但是对于个人小程序来说已经足够了。</p>

<!-- more -->


<h2>快速入门</h2>

<h3>注册账号</h3>

<p>进入 <a href="https://www.heroku.com">Heroku 官网</a>，因为 Heroku 是国外的站点，所以需要提前准备好翻墙。点击 Sign Up，根据要求填写好信息。这里需要注意的是，国内大部分的邮箱不支持，所以这里提前准备好 gmail 邮箱进行注册。</p>

<h3>创建 App</h3>

<p>Heroku 提供了便捷的网页控制台和终端，登录成功后我们直接进入 Heroku 的网页控制台，选择我们熟悉的语言进行创建，我们这里选择两种方式进行介绍，PHP 和 Java。</p>

<h4>PHP</h4>

<h5>准备</h5>

<p>点击按钮以后进入开始界面，界面提示我们需要提前安装好 <a href="http://php.net/">PHP</a> 和 <a href="https://getcomposer.org/doc/00-intro.md">Composer</a>，使用 PHP 的朋友就不需要更多的介绍了，直接点击 <code>I'm ready to start</code>。</p>

<h5>Set up</h5>

<p>下载 Heroku CLI，这是 Heroku 的命令行工具，下载以后可以使用命令行直接进行代码更新和部署等操作，当然下文也会介绍更方便的部署方式。下载成功以后使用 <code>heroku login</code> 命令，输入邮箱和密码进行登录。</p>

<h5>准备项目</h5>

<p>如果我们没有项目，可以直接使用如下命令下载项目源码，然后部署项目。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/heroku/php-getting-started.git sesamepaste</span></code></pre></td></tr></table></div></figure>


<p>后面跟随的 sesamepaste 是我将来的项目名称，然后进入项目</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd sesamepaste</span></code></pre></td></tr></table></div></figure>


<h5>创建App</h5>

<p>这里说的 App 不再是我们本地的项目，我们目前可以简单理解为 Heroku 的一个用来存放我们项目的容器，只有先有了这个容器才能部署我们的项目。运行如下命令创建，其中 sesamepaste 是项目的名称，也是 Heroku 的唯一标识，后面我们运行成功了，也需要使用 sesamepaste.herokuapp.com 来访问 App。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> heroku create sesamepaste
</span></code></pre></td></tr></table></div></figure>


<p>创建成功以后运行如下命令部署，其实就是把代码push 到 Heroku 的仓库，它会帮助我们自动化部署。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>最后使用 <code>heroku open</code> 命令就可以打开我们部署好的网站了。</p>

<h4>Java</h4>

<p>其他步骤和上面一样，除了项目地址，如下地址不是官方的例子，是笔者添加了一些spring，mybatis，flyway等集成的版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://github.com/codedrinker/heroku-spring-boot-mybatis-mysql-flyway-example.git sesamepaste
</span></code></pre></td></tr></table></div></figure>


<h4>其他</h4>

<p>如果是其他语言直接访问 Heroku帮助页面，<a href="https://devcenter.heroku.com">https://devcenter.heroku.com</a></p>

<h2>简单介绍</h2>

<h3>日志</h3>

<p>每次运行命令需要进入当前项目的目录，必要的时候需要输入 <code>heroku login</code>，使用 <code>heroku logs --tail</code> 命令实施查看输出日志。</p>

<h3>Procfile</h3>

<p>你会发现拉取下来的代码里面有名字是 Procfile 的文件，这文件是用来定义运行项目时候的命令，默认如下，表示使用apache 运行 web项目，目录是web。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>web: vendor/bin/heroku-php-apache2 web/
</span></code></pre></td></tr></table></div></figure>


<h3>关联 Github</h3>

<p>上文说到需要 push 到 heroku 的仓库才能部署，heroku 提供了更强带的功能，直接关联 Github 的仓库的分支，等分支有新内容更新的时候直接部署。这个配置就需要去 web控制台配置了。进入项目，点击 <code>Deploy</code>，勾选 <code>Github</code>，然后完成配置即可。</p>

<h2>相关文章</h2>

<p><a href="http://www.majiang.life/blog/heroku-custom-domains/">Heroku 入门教程之：绑定自定义域名</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于 Amazon SES 搭建高可用的邮件系统]]></title>
    <link href="http://www.majiang.life/blog/how-to-build-email-system-with-amazon-ses/"/>
    <updated>2018-02-14T14:22:55+08:00</updated>
    <id>http://www.majiang.life/blog/how-to-build-email-system-with-amazon-ses</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>通常情况下我们使用 smtp 调用第三方的 api 发送邮件，但是 gmail 一天只能发送100封，这对于营销邮件来说无疑是非常大的影响。所以考虑两种方案，第一种自己搭建邮件服务器，这种方案耗费时间并且需要额外的服务器成本。第二种方案使用 Amazon SES 搭建有限服务。简单方便并且 Amazon 本身也做了一些优化。</p>

<!-- more -->


<h2>域名准备</h2>

<h3>购买域名</h3>

<p>这一步不在本文的范围只，但是你需要需要准备好一个域名。</p>

<h3>托管域名到 Route53</h3>

<p>Route53 是Aws的 DNS，不托管用自己的也行，用他的一个方便之处是配置SES的时候他会很好的给你继承好，省去好多自己配置的麻烦。不过本身托管域名也需要配置，所以这里自行考虑是否托管域名到Route53。如需配置如下是配置文档。
<a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html">https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html</a><br/>
如果是gmail，在gmail的服务里面也会明确的写着怎么迁移。
通常情况下如下输入记录到Route53作为验证。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ns-***.awsdns-49.net.
</span><span class='line'>ns-***.awsdns-50.org.
</span><span class='line'>ns-***.awsdns-22.co.uk.
</span><span class='line'>ns-***.awsdns-59.com.</span></code></pre></td></tr></table></div></figure>


<h2>配置 Amazon SES</h2>

<p>进入aws 控制台，进入Simple Email Service(SES)，点击 domains -> Verify a New Domain。</p>

<h3>Route53 域名配置</h3>

<p>如果是Route53 托管的域名，他会直接提示你是否创建关联到Route53，直接点击关联就好了。关联主要分为几个方便，验证，DKIM，SPF验证。说简单一点就是验证这个域名是你的，验证这个邮箱地址发送是合法的，避免一些成为垃圾邮件的可能性。</p>

<h3>非 Route53 域名配置</h3>

<p>如果是非 Route53 域名也没有关系，他也会按步骤提示你配置一个TXT，和三个CNAME到你的DNS就可以。</p>

<h3>等待验证</h3>

<p>配置完成之后需要有一定的时间验证，等待验证成功之后会标记为验证通过，这个时候就可以进行下面的编码。</p>

<h2>程序实现</h2>

<h3>添加依赖</h3>

<p>首先需要添加两个aws的依赖，一个是通用的一个是ses的，<br/>
另外需要配置一个把富文本解析成普通文本的工具，下文会有更详细的解释，<br/>
最后配置一个velocity依赖，用于生成邮件模板。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-ses<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;optional&gt;</span>false<span class="nt">&lt;/optional&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.11.95<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>aws-java-sdk-s3<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.11.95<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.jsoup<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jsoup<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.10.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>velocity<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>velocity<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建模板</h3>

<p>本文采用velocity生成邮件模板，好处就不说了。主要使用velocity的模板引擎生成邮件模板。<br/>
<a href="http://velocity.apache.org/engine/1.7/developer-guide.html">官方文档</a> <a href="https://www.ibm.com/developerworks/cn/java/j-lo-velocity1/">中文文档</a></p>

<h4>创建template.vm</h4>

<p>首先在 resouces下面创建一个 email-template.vm，因为测试内容比较简单，当然这里面可以编写html文档。内容如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>${title}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>${name}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>${content}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>构建模板</h4>

<p>直接使用 volecity 的模板引擎加载上面的 vm 模板，然后生成即可，具体代码如下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailTemplateUtils</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Data</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">EmailEntity</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">generate</span><span class="o">(</span><span class="n">EmailEntity</span> <span class="n">emailEntity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">VelocityEngine</span> <span class="n">velocityEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VelocityEngine</span><span class="o">();</span>
</span><span class='line'>        <span class="n">velocityEngine</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">RuntimeConstants</span><span class="o">.</span><span class="na">RESOURCE_LOADER</span><span class="o">,</span> <span class="s">&quot;classpath&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">velocityEngine</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;classpath.resource.loader.class&quot;</span><span class="o">,</span> <span class="n">ClasspathResourceLoader</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">velocityEngine</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="n">velocityEngine</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="s">&quot;email-template.vm&quot;</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">VelocityContext</span><span class="o">();</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">emailEntity</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">emailEntity</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;content&quot;</span><span class="o">,</span> <span class="n">emailEntity</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>            <span class="n">StringWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringWriter</span><span class="o">();</span>
</span><span class='line'>            <span class="n">template</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">writer</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">EmailEntity</span> <span class="n">emailEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EmailEntity</span><span class="o">();</span>
</span><span class='line'>        <span class="n">emailEntity</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;email title&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">emailEntity</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">&quot;email content&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">emailEntity</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;email name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">generate</span> <span class="o">=</span> <span class="n">generate</span><span class="o">(</span><span class="n">emailEntity</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">generate</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接运行程序会得到如下，输出表示已经配置成功，稍后将其配置成自己的邮件模板的样子就行了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>email title<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>email name<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>email content<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>发送邮件</h3>

<p>发送邮件功能主要是调用 Amazon SES 的工具包发送，代码比较简单，直接阅读代码即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AmazonSESProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">EmailResult</span> <span class="nf">sendEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">from</span><span class="o">,</span> <span class="n">String</span> <span class="n">subject</span><span class="o">,</span> <span class="n">String</span> <span class="n">body</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">addrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Destination</span> <span class="n">destination</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Destination</span><span class="o">().</span><span class="na">withToAddresses</span><span class="o">(</span><span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Content</span> <span class="n">mailSubject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Content</span><span class="o">().</span><span class="na">withData</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Content</span> <span class="n">html</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Content</span><span class="o">().</span><span class="na">withData</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">textPlain</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">body</span><span class="o">).</span><span class="na">text</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Body</span> <span class="n">htmlBody</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Body</span><span class="o">().</span><span class="na">withHtml</span><span class="o">(</span><span class="n">html</span><span class="o">).</span><span class="na">withText</span><span class="o">(</span><span class="k">new</span> <span class="nf">Content</span><span class="o">().</span><span class="na">withData</span><span class="o">(</span><span class="n">textPlain</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Message</span><span class="o">().</span><span class="na">withSubject</span><span class="o">(</span><span class="n">mailSubject</span><span class="o">).</span><span class="na">withBody</span><span class="o">(</span><span class="n">htmlBody</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SendEmailRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SendEmailRequest</span><span class="o">().</span><span class="na">withSource</span><span class="o">(</span><span class="n">from</span><span class="o">).</span><span class="na">withDestination</span><span class="o">(</span><span class="n">destination</span><span class="o">).</span><span class="na">withMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">BasicAWSCredentials</span> <span class="n">awsCreds</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BasicAWSCredentials</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">AmazonSimpleEmailServiceClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AmazonSimpleEmailServiceClient</span><span class="o">(</span><span class="n">awsCreds</span><span class="o">);</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">setRegion</span><span class="o">(</span><span class="n">Region</span><span class="o">.</span><span class="na">getRegion</span><span class="o">(</span><span class="n">Regions</span><span class="o">.</span><span class="na">US_WEST_2</span><span class="o">));</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">sendEmail</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;send:succeed,address-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EmailResult</span><span class="o">.</span><span class="na">success</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AmazonServiceException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="s">&quot;Throttling&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getErrorCode</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;send:failure,addrs-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;error : Max for the rate!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;send:failure,addrs-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;error : &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EmailResult</span><span class="o">.</span><span class="na">failure</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;send:failure,addrs-&gt;{}&quot;</span><span class="o">,</span> <span class="n">addrs</span><span class="o">);</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;error : &quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">EmailResult</span><span class="o">.</span><span class="na">failure</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sendEmail</span><span class="o">(</span><span class="s">&quot;fromaddress@gmail.com&quot;</span><span class="o">,</span> <span class="s">&quot;email subject&quot;</span><span class="o">,</span> <span class="s">&quot;Test email from codedrinker&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;toaddress@gmail.com&quot;</span><span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要发送的逻辑就是创建Amazon 的Client，然后调用发送邮件，主要注意的是如下语句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">body</span><span class="o">).</span><span class="na">text</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们传递过来的body是 html 类型的，我们需要生成一个纯文本类型的，这样可以保证邮件接收者不能预览富文本类型的时候有一个纯文本预览，使用 Jsoup.parse 可以提取出来文本内容，这样可减少了邮件发送到垃圾箱的概率。具体关于邮件发送到垃圾箱的概率可以使用邮件测试网址进行进一步验证。<a href="https://www.mail-tester.com/">测试工具地址</a>。</p>

<h2>参考文献</h2>

<p><a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/getting-started.html">Amazon SES 文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[细说 Java hashCode]]></title>
    <link href="http://www.majiang.life/blog/deep-dive-on-java-hashcode/"/>
    <updated>2017-12-24T01:04:24+08:00</updated>
    <id>http://www.majiang.life/blog/deep-dive-on-java-hashcode</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>写过 <code>Java</code> 程序的同学一定都知道 <code>hashCode</code> 方法，它是 <code>Object</code> 对象的一个 <code>native</code> 方法。无论是我们平常使用的 <code>HashMap</code> 还是重写 <code>equals</code> 方法的时候，都会接触到 <code>hashCode</code> 方法，那么它究竟是怎么生成的，又有什么作用呢？笔者带着这个疑问开始探寻。</p>

<!-- more -->


<h2>hashCode 方法的定义</h2>

<p>在 <a href="https://docs.oracle.com/javase/7/docs/api/"><code>jdk api</code></a> 中 关于 <code>hashCode</code> 有如下说明：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Returns a <span class="nb">hash </span>code value <span class="k">for</span> the object.
</span><span class='line'>This method is supported <span class="k">for</span> the benefit of <span class="nb">hash </span>tables such as those provided by HashMap.
</span><span class='line'>The general contract of hashCode is:
</span><span class='line'>
</span><span class='line'>Whenever it is invoked on the same object more than once during an execution of a Java application,
</span><span class='line'>the hashCode method must consistently <span class="k">return</span> the same integer,
</span><span class='line'>provided no information used in equals comparisons on the object is modified.
</span><span class='line'>This integer need not remain consistent from one execution of an application to another execution of the same application.
</span><span class='line'>If two objects are equal according to the equals<span class="o">(</span>Object<span class="o">)</span> method,
</span><span class='line'><span class="k">then</span> calling the hashCode method on each of the two objects must produce the same integer result.
</span><span class='line'>It is not required that <span class="k">if</span> two objects are unequal according to the equals<span class="o">(</span>java.lang.Object<span class="o">)</span> method,
</span><span class='line'><span class="k">then</span> calling the hashCode method on each of the two objects must produce distinct integer results.
</span><span class='line'>However, the programmer should be aware that producing distinct integer results <span class="k">for</span> unequal objects may improve the performance of <span class="nb">hash </span>tables.
</span><span class='line'>As much as is reasonably practical,
</span><span class='line'>the hashCode method defined by class Object does <span class="k">return</span> distinct integers <span class="k">for</span> distinct objects.
</span><span class='line'><span class="o">(</span>This is typically implemented by converting the internal address of the object into an integer,
</span><span class='line'>  but this implementation technique is not required by the JavaTM programming language.<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
其大致意思如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>只要在Java应用程序的执行过程中多次调用同一个对象，
</span><span class='line'>hashCode方法必须始终返回相同的整数，
</span><span class='line'>前提是在对象的equals比较中没有使用的信息被修改。
</span><span class='line'>从应用程序的一次执行到同一应用程序的另一次执行，此整数不必保持一致。
</span><span class='line'>
</span><span class='line'>如果两个对象按照equals（Object）方法相等，
</span><span class='line'>那么在两个对象的每一个上调用hashCode方法必须产生相同的整数结果。
</span><span class='line'>如果两个对象根据equals（java.lang.Object）方法不相等，
</span><span class='line'>则不要求对两个对象中的每个对象调用hashCode方法都必须产生不同的整数结果。
</span><span class='line'>但是，程序员应该知道，为不相等的对象生成不同的整数结果可以提高散列表的性能。
</span><span class='line'>
</span><span class='line'>尽可能多地合理实用，由类Object定义的hashCode方法确实为不同的对象返回不同的整数。
</span><span class='line'>这通常通过将对象的内部地址转换为整数来实现，但JavaTM编程语言不需要此实现技术。
</span></code></pre></td></tr></table></div></figure>


<p>所以由上可以得到两条有用的信息，同一个对象 <code>hashcode</code> 的值在一次运行中一定相等，并且不同对象的 <code>hashcode</code> 一定不同，但是他还备注通常使用内部地址转换，但是 <code>JAVA</code> 不是使用这种方式实现的，那么怎么实现的呢？</p>

<h2>hashCode 实现原理</h2>

<h3>hashcode 源码</h3>

<p><code>OpenJDK</code> 的源码可以直接查看，所以我们就选择查看一下其源码一看究竟。<br/>
我们可以看到<code>src/share/vm/prims/jvm.h</code>和<code>src/share/vm/prims/jvm.cpp</code>两个文件中有关于 <code>hashcode</code> 的说明如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   JVM_ENTRY<span class="o">(</span>jint, JVM_IHashCode<span class="o">(</span>JNIEnv* env, jobject handle<span class="o">))</span>
</span><span class='line'>   JVMWrapper<span class="o">(</span><span class="s2">&quot;JVM_IHashCode&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>   // as implemented in the classic virtual machine<span class="p">;</span> <span class="k">return</span> <span class="m">0</span> <span class="k">if</span> object is NULL
</span><span class='line'>   <span class="k">return</span> <span class="nv">handle</span> <span class="o">==</span> NULL ? <span class="m">0</span> : ObjectSynchronizer::FastHashCode <span class="o">(</span>THREAD, JNIHandles::resolve_non_null<span class="o">(</span>handle<span class="o">))</span> <span class="p">;</span>
</span><span class='line'> JVM_END
</span></code></pre></td></tr></table></div></figure>


<p>我们继续进入<code>FashHashCode</code>里面查看，其位于<code>src/share/vm/runtime/synchronizer.cpp</code>文件，相对代码比较多，我们只摘取关键部分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">// Inflate the monitor to set hash code</span>
</span><span class='line'>  <span class="n">monitor</span> <span class="o">=</span> <span class="n">ObjectSynchronizer</span><span class="o">::</span><span class="n">inflate</span><span class="p">(</span><span class="n">Self</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Load displaced header and check it has hash code</span>
</span><span class='line'>  <span class="n">mark</span> <span class="o">=</span> <span class="n">monitor</span><span class="o">-&gt;</span><span class="n">header</span><span class="p">();</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">(</span><span class="n">mark</span><span class="o">-&gt;</span><span class="n">is_neutral</span><span class="p">(),</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">hash</span> <span class="o">=</span> <span class="n">mark</span><span class="o">-&gt;</span><span class="n">hash</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hash</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">hash</span> <span class="o">=</span> <span class="n">get_next_hash</span><span class="p">(</span><span class="n">Self</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">mark</span><span class="o">-&gt;</span><span class="n">copy_set_hash</span><span class="p">(</span><span class="n">hash</span><span class="p">);</span> <span class="c1">// merge hash code into header</span>
</span><span class='line'>    <span class="n">assert</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">is_neutral</span><span class="p">(),</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="p">(</span><span class="n">markOop</span><span class="p">)</span> <span class="n">Atomic</span><span class="o">::</span><span class="n">cmpxchg_ptr</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">monitor</span><span class="p">,</span> <span class="n">mark</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">test</span> <span class="o">!=</span> <span class="n">mark</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// The only update to the header in the monitor (outside GC)</span>
</span><span class='line'>      <span class="c1">// is install the hash code. If someone add new usage of</span>
</span><span class='line'>      <span class="c1">// displaced header, please update this code</span>
</span><span class='line'>      <span class="n">hash</span> <span class="o">=</span> <span class="n">test</span><span class="o">-&gt;</span><span class="n">hash</span><span class="p">();</span>
</span><span class='line'>      <span class="n">assert</span> <span class="p">(</span><span class="n">test</span><span class="o">-&gt;</span><span class="n">is_neutral</span><span class="p">(),</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>      <span class="n">assert</span> <span class="p">(</span><span class="n">hash</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;Trivial unexpected object/monitor header usage.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// We finally get the hash</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>monitor</code> 相关代码我们先略过不理，通过 <code>if</code> 语句我们可以看出，当 <code>hash</code>为0时候需要调用 <code>get_next_hash</code> 生成一个新的 <code>hash</code>，那么我们便可以继续前行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">intptr_t</span> <span class="nf">get_next_hash</span><span class="p">(</span><span class="n">Thread</span> <span class="o">*</span> <span class="n">Self</span><span class="p">,</span> <span class="n">oop</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">intptr_t</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// This form uses an unguarded global Park-Miller RNG,</span>
</span><span class='line'>     <span class="c1">// so it&#39;s possible for two threads to race and generate the same RNG.</span>
</span><span class='line'>     <span class="c1">// On MP system we&#39;ll have lots of RW access to a global, so the</span>
</span><span class='line'>     <span class="c1">// mechanism induces lots of coherency traffic.</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">os</span><span class="o">::</span><span class="n">random</span><span class="p">()</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// This variation has the property of being stable (idempotent)</span>
</span><span class='line'>     <span class="c1">// between STW operations.  This can be useful in some of the 1-0</span>
</span><span class='line'>     <span class="c1">// synchronization schemes.</span>
</span><span class='line'>     <span class="kt">intptr_t</span> <span class="n">addrBits</span> <span class="o">=</span> <span class="n">cast_from_oop</span><span class="o">&lt;</span><span class="kt">intptr_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">addrBits</span> <span class="o">^</span> <span class="p">(</span><span class="n">addrBits</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">^</span> <span class="n">GVars</span><span class="p">.</span><span class="n">stwRandom</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span>            <span class="c1">// for sensitivity testing</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="o">++</span><span class="n">GVars</span><span class="p">.</span><span class="n">hcSequence</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hashCode</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">cast_from_oop</span><span class="o">&lt;</span><span class="kt">intptr_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Marsaglia&#39;s xor-shift scheme with thread-specific state</span>
</span><span class='line'>     <span class="c1">// This is probably the best overall implementation -- we&#39;ll</span>
</span><span class='line'>     <span class="c1">// likely make this the default in future releases.</span>
</span><span class='line'>     <span class="kt">unsigned</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateX</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">t</span> <span class="o">^=</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;&lt;</span> <span class="mi">11</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateX</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateY</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateY</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateZ</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateZ</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateW</span> <span class="p">;</span>
</span><span class='line'>     <span class="kt">unsigned</span> <span class="n">v</span> <span class="o">=</span> <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateW</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span> <span class="o">^</span> <span class="p">(</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="mi">19</span><span class="p">))</span> <span class="o">^</span> <span class="p">(</span><span class="n">t</span> <span class="o">^</span> <span class="p">(</span><span class="n">t</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">))</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">Self</span><span class="o">-&gt;</span><span class="n">_hashStateW</span> <span class="o">=</span> <span class="n">v</span> <span class="p">;</span>
</span><span class='line'>     <span class="n">value</span> <span class="o">=</span> <span class="n">v</span> <span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">&amp;=</span> <span class="n">markOopDesc</span><span class="o">::</span><span class="n">hash_mask</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">value</span> <span class="o">=</span> <span class="mh">0xBAD</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">assert</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="n">markOopDesc</span><span class="o">::</span><span class="n">no_hash</span><span class="p">,</span> <span class="s">&quot;invariant&quot;</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="n">TEVENT</span> <span class="p">(</span><span class="nl">hashCode</span><span class="p">:</span> <span class="n">GENERATE</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上述代码我们看到，其实 <code>hashCode</code> 的生成有6中方式<br/>
1. 随机数<br/>
2. 对象的内存地址的函数<br/>
3. 固定值，这个只是为了进行灵敏度测试<br/>
4. 递增序列<br/>
5. int类型的该对象的内存地址 <br/>
6. 结合当前线程和xorshift生成</p>

<p>通过 <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/87ee5ee27509/src/share/vm/runtime/globals.hpp#l1127">globals.hpp</a> 我们可以发现，JDK8 默认为5，也就是最后一种。<br/>
<code>product(intx, hashCode, 5, "(Unstable) select hashCode generation algorithm")</code>  <br/>
当然，OpenJDK6，7中用的都是第一种方案，那么问题又来了，既然都是随机数，那么怎么确保每次都一样的呢？</p>

<h3>对象头</h3>

<p>这里就需要引入一个<code>对象头</code>的概念，每次对象生成以后，都需要找一个地方存储一下这个对象的hashCode和锁信息，这就是<code>对象头</code>，英文称之为 <code>Mark Word</code>。这样一来我们就明白了，每次生成对象以后都会把它的<code>hashCode</code>存起来，这样无论对象怎么在新生代，老年代之间<code>游走</code>都不会改变其<code>hashCode</code>的值，然而事实并没有那么简单。</p>

<h3>偏向锁</h3>

<p>这时候我们翻回来看刚才略过的内容，<code>ObjectSynchronizer::FastHashCode()</code>里面的其他逻辑。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">UseBiasedLocking</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// NOTE: many places throughout the JVM do not expect a safepoint</span>
</span><span class='line'>    <span class="c1">// to be taken here, in particular most operations on perm gen</span>
</span><span class='line'>    <span class="c1">// objects. However, we only ever bias Java instances and all of</span>
</span><span class='line'>    <span class="c1">// the call sites of identity_hash that might revoke biases have</span>
</span><span class='line'>    <span class="c1">// been checked to make sure they can handle a safepoint. The</span>
</span><span class='line'>    <span class="c1">// added check of the bias pattern is to avoid useless calls to</span>
</span><span class='line'>    <span class="c1">// thread-local storage.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">mark</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">has_bias_pattern</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Box and unbox the raw reference just in case we cause a STW safepoint.</span>
</span><span class='line'>      <span class="n">Handle</span> <span class="n">hobj</span> <span class="p">(</span><span class="n">Self</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>      <span class="c1">// Relaxing assertion for bug 6320749.</span>
</span><span class='line'>      <span class="n">assert</span> <span class="p">(</span><span class="n">Universe</span><span class="o">::</span><span class="n">verify_in_progress</span><span class="p">()</span> <span class="o">||</span>
</span><span class='line'>              <span class="o">!</span><span class="n">SafepointSynchronize</span><span class="o">::</span><span class="n">is_at_safepoint</span><span class="p">(),</span>
</span><span class='line'>             <span class="s">&quot;biases should not be seen by VM thread here&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">BiasedLocking</span><span class="o">::</span><span class="n">revoke_and_rebias</span><span class="p">(</span><span class="n">hobj</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="n">JavaThread</span><span class="o">::</span><span class="n">current</span><span class="p">());</span>
</span><span class='line'>      <span class="n">obj</span> <span class="o">=</span> <span class="n">hobj</span><span class="p">()</span> <span class="p">;</span>
</span><span class='line'>      <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">mark</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">has_bias_pattern</span><span class="p">(),</span> <span class="s">&quot;biases should be revoked by now&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上述代码我们可以得知，当前对象处于<code>偏向锁</code>时，会清除<code>偏向锁</code>通过从<code>锁</code>上面取回<code>Mark Word</code> 信息。为什么提到取回呢？之前消失了吗？是的，现在就需要解释一下<code>偏向锁</code>了。<br/>
<code>Hotspot</code> 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入
了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程 <code>ID</code>，以后该线程在进入和退出同步块时不需要花费 <code>CAS</code> 操作来加锁和解锁，而只需简单的测试一下对象头的 <code>Mark Word</code> 里是否存储着指向当前线程的偏向锁，如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下 <code>Mark Word</code> 中偏向锁的标识是否设置成 1（表示当前是偏向锁），如果没有设置，则使用 <code>CAS</code> 竞争锁，如果设置了，则尝试使用 <code>CAS</code> 将对象头的偏向锁指向当前线程。所以我们便知道为什么有<code>取回</code>这个概念了。然而代码带没有结束。</p>

<h3>轻量级锁</h3>

<p>轻量级锁相对比较简单，<code>JVM</code>会在当前的线程栈桢中创建用于存放锁的空间，同时将对象头中的<code>Mark Word</code>复制到锁记录中，也称作 <code>Displaced Mark Word</code>。比较复杂的是<code>重量级</code>锁。</p>

<h3>重量级锁</h3>

<p>这个时候如果多个线程来竞争资源，就会发生<code>锁膨胀</code>，这样因为需要保存竞争资源需要<code>wait</code>的线程和相关信息，就引入了<code>monitor</code>的概念。于是这时候就把<code>Mark Word</code>存放到了<code>Monitor</code>里面，当然<code>Monitor</code>不仅仅用于存储对象的<code>Mark Word</code>，具体的作用就不是本文的重点了。</p>

<h2>hashCode 的用途</h2>

<p><code>hashCode</code> 的唯一性决定了他可以用来生成<code>HashMap</code>的key，同时也能判断对象是否为同一个对象。另外我们再重写他的时候要多加注意，因为<code>JVM</code>会根据它做一些性能优化。</p>

<h2>总结</h2>

<p>此文为笔者学习 <code>hashCode</code> 的笔记，如有问题欢迎指正。</p>

<h2>参考文献</h2>

<p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/87ee5ee27509/src/share/vm">OpenJDK 源码</a><br/>
<a href="https://docs.oracle.com/javase/7/docs/api/">Oracle JDK Docs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解 ElasticSearch Doc Values]]></title>
    <link href="http://www.majiang.life/blog/deep-dive-on-elasticsearch-doc-values/"/>
    <updated>2017-11-28T00:47:21+08:00</updated>
    <id>http://www.majiang.life/blog/deep-dive-on-elasticsearch-doc-values</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近在使用 <code>ElasticSearch</code>，于是简单看了一下内部实现，看到 <code>Doc Values</code>的地方发现网上的翻译很是拗口，于是就有了下面的这篇文章。</p>

<!-- more -->


<h2>为什么要有 Doc Values</h2>

<p>我们都知道 <code>ElasticSearch</code>之所以搜索这么快速，归功于他的<code>倒排索引</code>的设计，然而它也不是万能的，倒排索引的检索性能是非常快的，但是在字段值排序时却不是理想的结构。下面是一个简单的<code>倒排索引</code>的结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Term      Doc_1  Doc_2
</span><span class='line'>-------------------------
</span><span class='line'>Quick   |       |  X
</span><span class='line'>The     |   X   |
</span><span class='line'>brown   |   X   |  X
</span><span class='line'>dog     |   X   |
</span><span class='line'>dogs    |       |  X
</span><span class='line'>fox     |   X   |
</span><span class='line'>foxes   |       |  X
</span><span class='line'>in      |       |  X
</span><span class='line'>jumped  |   X   |
</span><span class='line'>lazy    |   X   |  X
</span><span class='line'>leap    |       |  X
</span><span class='line'>over    |   X   |  X
</span><span class='line'>quick   |   X   |
</span><span class='line'>summer  |       |  X
</span><span class='line'>the     |   X   |
</span><span class='line'>------------------------</span></code></pre></td></tr></table></div></figure>


<p>如上表便可以看出，他只有词对应的<code>doc</code>，但是并不知道每一个<code>doc</code>中的内容，那么如果想要排序的话每一个<code>doc</code>都去获取一次文档内容岂不非常耗时？<code>Doc Values</code>的出现使得这个问题迎刃而解。</p>

<h2>Doc Values 是什么</h2>

<p>其实大部分<code>NoSQL</code>在创建多个索引的时候也采用这种方式，就是再使用另一种方式存储一份文本，使得可以增强搜索。<code>Doc values</code> 通过转置两者间的关系来解决这个问题。倒排索引将词项映射到包含它们的文档，<code>Doc values</code> 将文档映射到它们包含的词项：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Doc      Terms
</span><span class='line'>-----------------------------------------------------------------
</span><span class='line'>Doc_1 | brown, dog, fox, jumped, lazy, over, quick, the
</span><span class='line'>Doc_2 | brown, dogs, foxes, in, lazy, leap, over, quick, summer
</span><span class='line'>Doc_3 | dog, dogs, fox, jumped, over, quick, the
</span><span class='line'>-----------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>当数据被转置之后，想要收集到每个文档行，获取所有的词项就非常简单了。所以搜索使用倒排索引查找文档，聚合操作收集和聚合 <code>Doc Values</code> 里的数据，这就是 <code>ElasticSearch</code>。</p>

<h2>深入理解 ElasticSearch Doc Values</h2>

<p><code>Doc Values</code> 是在索引时与倒排索引同时生成。也就是说 <code>Doc Values</code> 和<code>倒排索引</code>一样，基于 <code>Segement</code> 生成并且是不可变的。同时 <code>Doc Values</code> 和<code>倒排索引</code>一样序列化到磁盘，这样对性能和扩展性有很大帮助。</p>

<p><code>Doc Values</code> 通过序列化把数据结构持久化到磁盘，我们可以充分利用操作系统的内存，而不是 <code>JVM</code> 的 <code>Heap</code> 。
当 <code>working set</code> 远小于系统的可用内存，系统会自动将 <code>Doc Values</code> 保存在内存中，使得其读写十分高速；
不过，当其远大于可用内存时，操作系统会自动把 <code>Doc Values</code> 写入磁盘。很显然，这样性能会比在内存中差很多，但是它的大小就不再局限于服务器的内存了。如果是使用 <code>JVM</code> 的 <code>Heap</code> 来实现那么只能是因为 <code>OutOfMemory</code> 导致程序崩溃了。</p>

<h2>Doc Values 压缩</h2>

<p>从广义来说，<code>Doc Values</code> 本质上是一个序列化的 <em>列式存储</em>，这个结构非常适用于聚合、排序、脚本等操作。而且，这种存储方式也非常便于压缩，特别是数字类型。这样可以减少磁盘空间并且提高访问速度。下面来看一组数字类型的 <code>Doc Values</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Doc      Terms
</span><span class='line'>  -----------------------------------------------------------------
</span><span class='line'>  Doc_1 | 100
</span><span class='line'>  Doc_2 | 1000
</span><span class='line'>  Doc_3 | 1500
</span><span class='line'>  Doc_4 | 1200
</span><span class='line'>  Doc_5 | 300
</span><span class='line'>  Doc_6 | 1900
</span><span class='line'>  Doc_7 | 4200
</span><span class='line'>  -----------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p>你会注意到这里每个数字都是 100 的倍数，<code>Doc Values</code> 会检测一个段里面的所有数值，并使用一个 <em>最大公约数</em> ，方便做进一步的数据压缩。我们可以对每个数字都除以 100，然后得到：  <code>[1,10,15,12,3,19,42]</code> 。现在这些数字变小了，只需要很少的位就可以存储下，也减少了磁盘存放的大小。</p>

<p><code>Doc Values</code> 在压缩过程中使用如下技巧。它会按依次检测以下压缩模式:</p>

<ul>
<li>如果所有的数值各不相同（或缺失），设置一个标记并记录这些值</li>
<li>如果这些值小于 256，将使用一个简单的编码表</li>
<li>如果这些值大于 256，检测是否存在一个最大公约数</li>
<li>如果没有存在最大公约数，从最小的数值开始，统一计算偏移量进行编码</li>
</ul>


<p>当然如果存储<code>String</code>类型，其一样可以通过顺序表对<code>String</code>类型进行数字编码，然后再把数字类型构建<code>Doc Values</code>。</p>

<h2>禁用 Doc Values</h2>

<p><code>Doc Values</code> 默认对所有字段启用，除了 <code>analyzed strings</code>。也就是说所有的数字、地理坐标、日期、IP 和不分析（<code>not_analyzed</code>）字符类型都会默认开启。</p>

<p><code>analyzed strings</code> 暂时还不能使用 <code>Doc Values</code>，是因为经过分析以后的文本会生成大量的<code>Token</code>，这样非常影响性能。</p>

<p>虽然<code>Doc Values</code>非常好用，但是如果你存储的数据确实不需要这个特性，就不如禁用他，这样不仅节省磁盘空间，也许会提升索引的速度。</p>

<p>要禁用 <code>Doc Values</code> ，在字段的映射（mapping）设置 <code>doc_values: false</code> 即可。例如，这里我们创建了一个新的索引，字段 <code>"session_id"</code> 禁用了  <code>Doc Values</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUT my_index
</span><span class='line'>{
</span><span class='line'>  "mappings": {
</span><span class='line'>    "my_type": {
</span><span class='line'>      "properties": {
</span><span class='line'>        "session_id": {
</span><span class='line'>          "type":       "string",
</span><span class='line'>          "index":      "not_analyzed",
</span><span class='line'>          "doc_values": false 
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>通过设置 <code>doc_values: false</code> ，这个字段将不能被用于聚合、排序以及脚本操作</p>

<p>同样可以禁用倒排索引，使它不能被正常搜索，但是可以排序，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUT my_index
</span><span class='line'>{
</span><span class='line'>  "mappings": {
</span><span class='line'>    "my_type": {
</span><span class='line'>      "properties": {
</span><span class='line'>        "customer_token": {
</span><span class='line'>          "type":       "string",
</span><span class='line'>          "index":      "not_analyzed",
</span><span class='line'>          "doc_values": true, 
</span><span class='line'>          "index": "no" 
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>通过设置 <code>doc_values: true</code> 和 <code>index: no</code> ，我们得到一个只能被用于聚合/排序/脚本的字段。</p>

<h2>总结</h2>

<p><code>倒排索引</code>和 <code>Doc Values</code> 只是 <code>ElasticSearch</code>的冰山一角，如果有兴趣的同学可以做更深入的研究，本文只是笔者的学习笔记，希望对大家有帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是什么让我放弃印象笔记而使用有道云笔记的]]></title>
    <link href="http://www.majiang.life/blog/migrate-evernote-to-youdao-note/"/>
    <updated>2017-11-04T09:28:59+08:00</updated>
    <id>http://www.majiang.life/blog/migrate-evernote-to-youdao-note</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>云笔记已经成了每一个开发人员的装机必备，联想到每一个开发人员的折腾也从未停止过，安装各种操作系统，各种IDE，各种博客系统，各种浏览器等等，有过同样经历的同学举手，虽然我也看不到！这次笔者就折腾起来云笔记！</p>

<!-- more -->


<h2>为什么放弃？</h2>

<p>起初是因为印象笔记不支持Markdown笔记，我就在网上搜罗一番，最终发现就两个方案，马克飞象和有道云笔记。</p>

<h2>马克飞象</h2>

<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通俗点说它就是提供 Markdown编辑功能，然后同步编辑内容到印象笔记。它同时提供网页版和应用版，然而毕竟是依托印象笔记的第三方应还用，所以有一些不足：</p>

<ul>
<li>单向编辑，支持单向编辑功能较好，在印象笔记里面编辑可能导致数据丢失和排版混乱；</li>
<li>配合使用，在印象笔记里面不能方便的编   Markdown文档，所以导致普通笔记的时候需要切换，做一件事情需要两个工具难免有一些麻烦；</li>
<li>移动设备，不支持移动设备</li>
<li>同步，同步需要手动或者每十分钟同步一次；</li>
<li>收费，最大的问题它是收费的，当然费用也非常便宜，79一年。虽然我们不吝啬在学习上，但是记录笔记收费其实也并非所有人可接受，排除那些酷爱破解的人。</li>
</ul>


<h2>有道云笔记</h2>

<p>有道云笔记就比较直接，直接支 Markdown和标准模式的笔记，为了方便比对我们也按照列表方式罗列：</p>

<ul>
<li>Markdown，支持标准文本 Markdown两种合适笔记</li>
<li>移动设备，并且基本支持所有的移动设备</li>
<li>免费，虽然它也有收费版本，但是免费版本的功能对于记录笔记来说已经足够了。唯一不足的地方是免费版本会有广告，但是谁都得吃饭嘛，不收费让人家赚点广告费也不伤大雅嘛。</li>
<li>PDF导出，支持 Markdown导出PDF合适</li>
<li>快捷收藏，支持微信公共号文章内容一键收藏，微博一键收藏和地址收藏。很方便整理收藏。</li>
<li>功能，印象笔记拥有的功能有道云笔记都包括。</li>
</ul>


<h2>迁移印象笔记</h2>

<p>迁移就非常简答了，直接在印象笔记里面导出<code>enex</code>文件，然后在有道云笔记里面直接导入<code>enex</code>即可。只是<code>Mac</code>版本的有道云笔记不支持导入功能，可以选择PC版本或者Web版本导入。</p>

<h2>总结</h2>

<p>虽然说只是一个工具，重点在于内容。但是有一句话说得好，工欲善其事，必先利其器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[总是听别人说响应式布局，原来这么简单]]></title>
    <link href="http://www.majiang.life/blog/head-first-responsive-web-design/"/>
    <updated>2017-10-28T10:37:55+08:00</updated>
    <id>http://www.majiang.life/blog/head-first-responsive-web-design</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>总听别人说响应式布局，觉得是一个很高大上的东西，近日做的一个项目需要适配不同的屏幕尺寸，于是就简单研究了一下<code>Web响应式布局</code>，其实原理很简单，下面就简单整理了一下分享给大家。</p>

<!-- more -->


<h2>什么是响应式布局</h2>

<p><img src="http://www.majiang.life/images/posts/rwd-demo.gif" alt="Demo" />
<font color=gray size=4>[<em>图片来源</em><code>caktusgroup</code>]</font><br/></p>

<p>如图就是响应式布局的体现，简单的说响应式布局就是一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本。这个概念随着移动设备的兴起而深入人心。<br/>
比如<code>头条</code>他做的就不是响应式布局，他通过实时检测设备信息，在<code>www.toutiao.com</code>和<code>m.toutiao.com</code>两个网站之间切换。而最近比较火的开发者社区<code>segmentfault.com</code>就是响应式布局，页面的布局会会随着你拖动浏览器窗口大小变化而变化。响应式布局没有绝对的话好与坏，需要根据网站的性质来确定，比如<code>toutiao</code>的页面元素非常多，页面需要包括所有屏幕尺寸的样式显示不是很好操作，然而<code>segmentfault</code>页面元素较少，反而放在一起方便维护。</p>

<h2>如何快速实现<code>web响应式布局</code></h2>

<p>我们通过一个例子来具体说明，首先使用<code>@media</code>关键字为不同的屏幕尺寸设置不同样式，关于<code>@media</code>我们下文有更详细的介绍</p>

<figure class='code'><figcaption><span>代码片段</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">480px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.col-sm-6</span><span class="o">,</span> <span class="nc">.col-sm-12</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.col-sm-12</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.col-sm-6</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">768px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.col-md-6</span><span class="o">,</span> <span class="nc">.col-md-12</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.col-md-12</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.col-md-6</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-12 col-sm-12 row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-6 col-sm-12 col-1 col&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
</span><span class='line'>          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
</span><span class='line'>          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
</span><span class='line'>          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-6 col-sm-12 col-2 col&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
</span><span class='line'>          consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
</span><span class='line'>          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
</span><span class='line'>          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>    
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们简单解释一下上述代码片段<br/>
<code>min-width</code>指的是当屏幕尺寸大于当前值的时候样式生效。<br/>
外层的<code>div</code>包裹内层的两个<code>div</code>。<br/>
<code>col-md-6 col-sm-12</code>当屏幕尺寸大于<code>768px</code>的时候子<code>div</code>宽度是父<code>div</code>的一半，所以是并排。当屏幕尺寸大于<code>480px</code>的时候子<code>div</code>宽度和父<code>div</code>的宽度一样。下图为不同尺寸下的效果图。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 768px        </th>
<th style="text-align:center;"> 480px         </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"><img src="http://www.majiang.life/images/posts/rwd-desktop.png" alt="Demo" /></td>
<td style="text-align:center;"> <img src="http://www.majiang.life/images/posts/rwd-iphone5.png" alt="Demo" /></td>
</tr>
</tbody>
</table>


<p>那么问题来了，图一尺寸大于<code>768px</code>不假，但是也大于<code>480px</code>啊，那么怎么就按照<code>768px</code>的尺寸排布了呢？这里就涉及到了<code>CSS 优先级</code>：<br/>
<code>CSS</code> 的基本优先级如下 <br/>
<code>（外部样式）External style sheet &lt;（内部样式）Internal style sheet &lt;（内联样式）Inline style</code><br/>
如果优先级一样便有一个覆盖原则，后面的覆盖前面的，于是如例，当屏幕尺寸慢慢变大到<code>768px</code>的时候，后者遍生效了。</p>

<p>注意观察的同学又发现问题了，图二没有办法看啊，太小了吧。是的，我们的响应式还没有做完，这个时候我们在<code>head</code>里面添加如下一行代码再试试？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span>
</span><span class='line'>  <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如图神奇的一幕出现了：<br/>
<img src="http://www.majiang.life/images/posts/rwd-iphone-mete-viewport.png" alt="Demo" /><br/>
width=device-width: 表示此宽度不依赖于原始象素(px)，而依赖于屏幕的宽度.这样我们就大功告成了.如需要下载源码请<a href="http://www.majiang.life/repository/asserts/rwd.html.zip">点击</a>，在线查看请<a href="http://www.majiang.life/repository/asserts/rwd.html">点击</a>。想知道为什么<code>meta</code>有这么大作用请翻看下文。</p>

<h2>Meta ViewPort 是什么</h2>

<p>手机浏览器是把页面放在一个虚拟的“窗口”(<code>viewport</code>)中，通常这个虚拟的“窗口”(<code>viewport</code>)比屏幕宽，默认是把网页挤到一个很小窗口以便全部预览，这样也不会破坏没有适配手机布局的网页。移动版的 Safari 浏览器最新引进了 <code>viewport</code> 这个 meta tag，让网页开发者来控制 viewport 的大小和缩放，其他手机浏览器也逐步支持。我们如果做了手机屏幕尺寸的适配就可以手动调整<code>viewport</code>，这样就可以把网页内容和手机布局合理的展示给用户。下面是具体参数的说明：</p>

<table>
<thead>
<tr>
<th style="text-align:left;">                 </th>
<th style="text-align:left;">               </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">width</td>
<td style="text-align:left;"> 设置layout viewport  的宽度，为一个正整数，或字符串&#8221;width-device&#8221;</td>
</tr>
<tr>
<td style="text-align:left;">initial-scale</td>
<td style="text-align:left;">     设置页面的初始缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td style="text-align:left;">minimum-scale</td>
<td style="text-align:left;"> 允许用户的最小缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td style="text-align:left;">maximum-scale</td>
<td style="text-align:left;"> 允许用户的最大缩放值，为一个数字，可以带小数</td>
</tr>
<tr>
<td style="text-align:left;">height</td>
<td style="text-align:left;"> 设置layout viewport  的高度，这个属性对我们并不重要，很少使用&#8221;</td>
</tr>
<tr>
<td style="text-align:left;">user-scalable</td>
<td style="text-align:left;"> 是否允许用户进行缩放，值为&#8221;no&#8221;或&#8221;yes&#8221;, no 代表不允许，yes代表允许</td>
</tr>
</tbody>
</table>


<h2>Media Queries 详解</h2>

<p>中文叫做媒体查询，它包含一个媒体类型(media type)和至少一个表达式，用媒体特性限制样式表的作用范围。下面我们直接通过例子对相对的关键字进行分析：</p>

<h4>only</h4>

<p>用于向早期浏览器隐藏媒体查询，比如IE如果不支持的话直接忽略当前定义的样式。和其他表达式一起用需要<code>and</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">400px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>screen</h4>

<p>screen是一种<code>媒体类型</code>，例中的<code>screen</code>意思是仅支持彩色电脑显示器。其他属性如下：<br/>
all：适用与所有设备<br/>
print：paged material and documents viewed on screen in print previe mode.<br/>
screen: 彩色电脑显示器<br/>
speech：intended for speech synthesizers</p>

<h4>and</h4>

<p><code>and</code>是一种<code>操作符</code>，表示被链接的表达式不许同时满足，其他表达式如下：  <br/>
<code>and</code>：所有条件必须满足<br/>
<code>,</code>：只要满足一种条件即可<br/>
<code>not</code>：条件的取反</p>

<h4>min-width</h4>

<p><code>min-width</code>是<code>媒体特征</code>，他的意思是最小宽度满足的时候就为真，其他媒体特征：<br/>
width： viewport width<br/>
height: viewport height <br/>
aspect-ratio: viewport的宽高比如：16/9 <br/>
orientation: 宽度和高度的大小关系 <br/>
resolution: pixel density of the output device <br/>
scan: scanning process of the output device <br/>
grid: is the device a grid or bitmap <br/>
color: number of bits per color component of the output device, or zero if the device isn&rsquo;t color <br/>
color-index: number of entries in the output device&rsquo;s color lookup table, or zero if the device does not use such a table</p>

<h2>总结</h2>

<p>笔者只是随学随卖，抛砖引玉，如有想更深入理解<code>响应式布局</code>请观看如下参考链接。</p>

<h2>参考链接</h2>

<p><a href="http://www.cnblogs.com/xugang/archive/2010/09/24/1833760.html">CSS 优先级</a>  <br/>
<a href="https://segmentfault.com/a/1190000002812335/sharing-classes-or-interfaces-between-different-projects">Media Queries 详解</a>  <br/>
<a href="https://www.cnblogs.com/2050/p/3877280.html">ViewPort 详解</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 集成 Redis 扫雷]]></title>
    <link href="http://www.majiang.life/blog/quick-start-spring-data-redis/"/>
    <updated>2017-10-21T10:37:55+08:00</updated>
    <id>http://www.majiang.life/blog/quick-start-spring-data-redis</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>关于<code>Redis</code>已然是烂大街的技术了，但是近日新起了一个项目需要集成<code>Redis</code>，看了一下之前的封装实在是不怎么优雅，于是查了一下发现了一个非常简单的解决方案，那就是<code>Spring</code>家族的<code>Spring Data Redis</code>。话不多说直接“上码”:</p>

<!-- more -->


<h2>Spring Data Redis 介绍</h2>

<p>Spring Data Redis是Spring Data系列的一部分，它可以轻松地使得Spring应用程序配置和访问Redis。</p>

<h2>快速搭建 Spring Data Redis</h2>

<p>直接可以参照官方地址进行配置，以往的<code>Spring</code>的文档都写着预计阅读时间，这个没有写你就知道有多简单啦。你可以直接<a href="http://projects.spring.io/spring-data-redis/">点击查看官方文档</a>，或者往下阅读。<br/>
<code>Maven</code>直接引入如下依赖：</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.data<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-data-redis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.8.8.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;&lt;repositories&gt;</span>
</span><span class='line'>    <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id&gt;</span>spring-libs-release<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Spring Releases<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url&gt;</span>https://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>        <span class="nt">&lt;snapshots&gt;</span>
</span><span class='line'>            <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/snapshots&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后直接在<code>Spring</code>的配置文件里面定义<code>bean</code>就可以了，官方没有说怎么配置<code>hostname</code>等等，但是点击<code>JedisConnectionFactory</code>里面一看就知道了，直接添加一行<code>p:host-name="172.10.23.234"</code>即可。</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jedisConnFactory&quot;</span>
</span><span class='line'>    <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>
</span><span class='line'>    <span class="na">p:use-pool=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">p:host-name=</span><span class="s">&quot;172.10.23.234&quot;</span>
</span><span class='line'>    <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- redis template definition --&gt;</span>
</span><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;redisTemplate&quot;</span>
</span><span class='line'>    <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span>
</span><span class='line'>    <span class="na">p:connection-factory-ref=</span><span class="s">&quot;jedisConnFactory&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后直接引入<code>bean</code>使用：</p>

<figure class='code'><figcaption><span>Example.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// inject the actual template</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// inject the template as ListOperations</span>
</span><span class='line'>    <span class="c1">// can also inject as Value, Set, ZSet, and HashOperations</span>
</span><span class='line'>    <span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;redisTemplate&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ListOperations</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">listOps</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLink</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">,</span> <span class="n">URL</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">listOps</span><span class="o">.</span><span class="na">leftPush</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">url</span><span class="o">.</span><span class="na">toExternalForm</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">// or use template directly</span>
</span><span class='line'>        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">boundListOps</span><span class="o">(</span><span class="n">userId</span><span class="o">).</span><span class="na">leftPush</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">toExternalForm</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上，根据<code>Spring</code>的官方文档已经全部完成，是不是非常简单？那么接下来我们运行一下试一试。<br/>
这时候出现了第一个异常。</p>

<h2>NoClassDefFoundError 问题解决</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nested exception is java.lang.NoClassDefFoundError: org/apache/commons/pool2/impl/GenericObjectPoolConfig
</span></code></pre></td></tr></table></div></figure>


<p>很明显是没有引入这个包嘛，我们直接从<code>spring-data-redis</code>的<code>pom.xml</code>里面可以看到多了一个<code>optional</code>属性。</p>

<figure class='code'><figcaption><span>pom.xml[spring-data-redis]</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么这个问题就迎刃而解了，因为在<code>spring-data-redis</code>里面声明的<code>commons-pool2</code>是<code>optional</code>的，根据<code>Maven</code>的规则如果A项目依赖配置为optional的，那么依赖A项目的B项目如果不手动引入A里面optional的依赖B项目是不会自动引入依赖的的。说起来有点绕，反正就是导致我们必须手动添加下面的依赖。详情可以参照<code>Maven</code>的官方网文档。<a href="http://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html">点击查看官方文档</a>。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次运行的时候我们发现了另一个问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nested exception is java.lang.NoClassDefFoundError: redis/clients/jedis/JedisPoolConfig
</span></code></pre></td></tr></table></div></figure>


<p>这问题就显而易见了，直接添加如下到<code>pom.xml</code>中即可。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>redis.clients<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jedis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.9.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候我们再次运行项目可以正常运行啦，然而有出现了一个奇怪的问题，存入<code>Redis</code>里面的<code>Key</code>有一个看起来像是乱码的前缀<code>\xac\xed\x00\x05t\x00</code>:</p>

<h2>\xac\xed\x00\x05t\x00 到底是啥</h2>

<p>出现这个问题的原因是因为其使用的默认是RedisTemplate，它使用的是Java的Serialization方式，所以会在前面有一段类似乱码的东西。如果是String作为key的话可以直接修改为StringRedisTemplate这个问题就修改了。</p>

<h2>参考链接</h2>

<p><a href="http://projects.spring.io/spring-data-redis/">Spring Data Redis</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从 Spring 集成 Mybatis 到 浅析Java动态代理]]></title>
    <link href="http://www.majiang.life/blog/spring-mybatis-and-dynamic-proxy/"/>
    <updated>2017-10-15T21:10:30+08:00</updated>
    <id>http://www.majiang.life/blog/spring-mybatis-and-dynamic-proxy</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>因为 <code>MyBatis</code> 的易上手性和可控性，使得它成为了<code>ORM</code>框架中的首选。近日新起了一个项目，所以重新搭建了一下 <code>Spring-mybatis</code>, 下面是搭建笔记和从<code>Spring-mybatis</code>源码分析其如何使用<code>Java动态代理</code>，希望对大家有帮助。</p>

<!-- more -->


<h2>Spring 集成 Mybatis</h2>

<p><code>Spring</code> 集成 <code>Mybatis</code>的方式有很多种，大家耳熟能详的<code>xml</code>配置方式或者本文的采用的方式：<br/>
首先需要添加<code>MyBatis</code>的和<code>MyBatis-Spring</code>的依赖，本文使用的<code>Spring-mybatis</code>版本是1.3.1。在<code>mvnrepository</code>里面我们可以找到当前<code>Spring-mybatis</code>依赖的<code>spring</code>和<code>mybatis</code>版本，最好是选择匹配的版本以避免处理不必要的兼容性问题。因为<code>MyBatis-Spring</code>中对<code>mybatis</code>的依赖选择了<code>provided</code>模式，所以我们不得不额外添加<code>mybatis</code>依赖，依赖配置如下。</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>mybatis-spring<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.mybatis<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>mybatis<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>3.4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来会我们要创建工厂bean,放置下面的代码在 Spring 的 XML 配置文件中:</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这个工厂需要一个<code>DataSource</code>，就是我们熟知的数据源了。这里我们选择了阿里的<code>Druid</code>，同样我们需要引入两个配置</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'> <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'> <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'> <span class="nt">&lt;version&gt;</span>5.1.41<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'> <span class="nt">&lt;groupId&gt;</span>com.alibaba<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'> <span class="nt">&lt;artifactId&gt;</span>druid<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'> <span class="nt">&lt;version&gt;</span>1.1.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>          <br/>
添加<code>Spring</code>配置如下</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="na">init-method=</span><span class="s">&quot;init&quot;</span> <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 基本属性 url、user、password --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;value&gt;</span><span class="cp">&lt;![CDATA[${db.url}]]&gt;</span><span class="nt">&lt;/value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;${db.username}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;${db.password}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 省略其他配置 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们要编写数据库访问对象，大多数人会把它叫做<code>DAO</code>或者<code>Repository</code>，在这里其被称为<code>Mapper</code>，也是因为它的实现方式所决定。要注意的是所指定的映射器类必须是一个接口，而不是具体的实现类。这便因为<code>Mybatis</code>的内部实现使用的是<code>Java动态代理</code>，而<code>Java动态代理</code>只支持接口，关于<code>动态代理</code>我们下文有更详细的描述。</p>

<figure class='code'><figcaption><span>UserMapper.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Select</span><span class="o">(</span><span class="s">&quot;SELECT * FROM users WHERE id = #{userId}&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;userId&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">userId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来可以使用 <code>MapperFactoryBean</code>,像下面这样来把接口加入到 <code>Spring</code> 中，这样就把 <code>UserMapper</code> 和 <code>SessionFactory</code>关联到一起了，原来使用<code>xml</code>配置的时候还需要Dao继承<code>SqlSessionDaoSupport</code>才能注入<code>SessionFactory</code>，这种方式直接通过<code>Java动态代理</code>把<code>SqlSessionFactory</code>代理给了<code>UserMapper</code>，使得我们直接使用<code>UserMapper</code>即可。配置如下。</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;userMapper&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapperInterface&quot;</span> <span class="na">value=</span><span class="s">&quot;org.mybatis.spring.sample.mapper.UserMapper&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们已经完成了90%，就差调用了，前提是你<code>Spring</code>环境是OK的。调用 <code>MyBatis</code> 数据方法现在只需一行代码:</p>

<figure class='code'><figcaption><span>FooServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FooServiceImpl</span> <span class="kd">implements</span> <span class="n">FooService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserMapper</span><span class="o">(</span><span class="n">UserMapper</span> <span class="n">userMapper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">userMapper</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">User</span> <span class="nf">doSomeBusinessStuff</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">userMapper</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么问题又来了，每次写一个DAO都需要为其写一个<code>Bean</code>配置，那不是累死？于是我们又寻找另一种方案，代替手动声明<code>*Mapper</code>。<code>MapperScannerConfigurer</code>的出现解决了这个问题， 它会根据你配置的包路径自动的扫描类文件并自动将它们创建成<code>MapperFactoryBean</code>，可以在 Spring 的配置中添加如下代码:</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basePackage&quot;</span> <span class="na">value=</span><span class="s">&quot;com.github.codedrinker.mapper&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>basePackage</code>属性是让你为映射器接口文件设置基本的包路径。你可以使用分号或逗号作为分隔符设置多于一个的包路径。这个时候如果想自定义<code>sqlSessionFactory</code>可以添加如下配置：</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样以后还有一点点小瑕疵，如果我们数据的<code>column</code>名字是<code>_</code>连接的，那么它不会那么聪明自动转换为驼峰的变量，所以我们需要对<code>SqlSessionFactoryBean</code>做如下配置，但是在1.3.0以后才可以通过xml配置，如果用早起版本的需要注意了。</p>

<figure class='code'><figcaption><span>applicationContext.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;configuration&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.apache.ibatis.session.Configuration&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此关于<code>Spring MyBatis</code>的配置已经全部结束，后面我们会简单说下<code>Spring MyBatis</code>中的动态代理。</p>

<h2>浅析 Java 动态代理</h2>

<p><code>JDK</code>自带的动态代理需要了解InvocationHandler接口和Proxy类，他们都是在java.lang.reflect包下。<br/>
<code>InvocationHandler</code>是代理实例的调用处理程序实现的接口。每个代理实例都具有一个关联的<code>InvocationHandler</code>。对代理实例调用方法时，这个方法会调用<code>InvocationHandler</code>的<code>invoke</code>方法。
<code>Proxy</code>提供静态方法用于创建动态代理类和实例,同时后面自动生成的代理类都是<code>Proxy</code>对象。下面我们直接通过代码来分析<code>Java动态代理</code>：
<code>InvocationInterceptor</code>实现<code>InvocationHandler</code>接口，用于处理具体的代理逻辑。</p>

<figure class='code'><figcaption><span>InvocationInterceptor.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by codedrinker on 12/10/2017.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvocationInterceptor</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">InvocationInterceptor</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before user create&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;end user create&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>User</code>和<code>UserImpl</code>是被代理对象的接口和类</p>

<figure class='code'><figcaption><span>User.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by codedrinker on 12/10/2017.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">create</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>UserImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by codedrinker on 12/10/2017.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserImpl</span> <span class="kd">implements</span> <span class="n">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;create user&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>DynamicProxyTest</code>是测试类，用于创建<code>InvocationInterceptor</code>和<code>Proxy</code>类以便测试。</p>

<figure class='code'><figcaption><span>DynamicProxyTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by codedrinker on 12/10/2017.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicProxyTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">User</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="n">InvocationInterceptor</span> <span class="n">invocationInterceptor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InvocationInterceptor</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
</span><span class='line'>        <span class="n">User</span> <span class="n">proxyInstance</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">UserImpl</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">UserImpl</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getInterfaces</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">invocationInterceptor</span><span class="o">);</span>
</span><span class='line'>        <span class="n">proxyInstance</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>before user create
</span><span class='line'>create user
</span><span class='line'>end user create
</span></code></pre></td></tr></table></div></figure>


<p>很明显，我们通过proxyInstance这个代理类进行方法调用的时候，会在方法调用前后进行输出打印，这样就简单的实现了一个<code>Java动态代理</code>例子。动态代理不仅仅是打印输出这么简单，我们可以通过它打印日志，打开关闭事务， 权限检查了等等。当然它更是许多框架的钟爱，就如下文我们要说的<code>MyBatis</code>中<code>Java动态代理</code>的实现。再多说一句<code>Spring</code>的<code>AOP</code>也是使用动态代理实现的，当然它同时使用了<code>Java动态代理</code>和<code>CGLib</code>两种方式。不过<code>CGLIB</code>不是本文要讨论的范围。<br/>
注意观察的同学看到上面代码的时候可能发现<code>invoke</code>方法的<code>proxy</code>参数并没有被使用，笔者查阅了一些相关文档也没有找到合理的说法，只能在源码中看看究竟喽，笔者当前的JDK版本是1.8。我们从入口开始，<code>Proxy.newProxyInstance</code>:</p>

<figure class='code'><figcaption><span>Proxy.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Look up or generate the designated proxy class.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@CallerSensitive</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">newProxyInstance</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">InvocationHandler</span> <span class="n">h</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">IllegalArgumentException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cl</span> <span class="o">=</span> <span class="n">getProxyClass0</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">intfs</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上代码由此可见，它调用了<code>getProxyClass0</code>来获取<code>Proxy Class</code>，那我们继续往下看。</p>

<figure class='code'><figcaption><span>Proxy.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getProxyClass0</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span>
</span><span class='line'>                                           <span class="n">Class</span><span class="o">&lt;?&gt;...</span> <span class="n">interfaces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">interfaces</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">65535</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;interface limit exceeded&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//If the proxy class defined by the given loader implementing</span>
</span><span class='line'>    <span class="c1">//the given interfaces exists, this will simply return the cached copy;</span>
</span><span class='line'>    <span class="c1">//otherwise, it will create the proxy class via the ProxyClassFactory</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">proxyClassCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实上面写的已经很简单了，如果存在就在<code>proxyClassCache</code>里面获取到，如果不存在就使用<code>ProxyClassFactory</code>创建一个。当然我们如果看一下<code>proxyClassCache</code>变量的话其也是<code>ProxyClassFactory</code>对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">WeakCache</span><span class="o">&lt;</span><span class="n">ClassLoader</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;[],</span> <span class="n">Class</span><span class="o">&lt;?&gt;&gt;</span>
</span><span class='line'>        <span class="n">proxyClassCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakCache</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nf">KeyFactory</span><span class="o">(),</span> <span class="k">new</span> <span class="nf">ProxyClassFactory</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么我们直接就去查看<code>ProxyClassFactory</code>的实现问题不就解决了吗？</p>

<figure class='code'><figcaption><span>Proxy.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ProxyClassFactory</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">BiFunction</span><span class="o">&lt;</span><span class="n">ClassLoader</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;[],</span> <span class="n">Class</span><span class="o">&lt;?&gt;&gt;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">// prefix for all proxy class names</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">proxyClassNamePrefix</span> <span class="o">=</span> <span class="s">&quot;$Proxy&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//next number to use for generation of unique proxy class names</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">AtomicLong</span> <span class="n">nextUniqueNumber</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AtomicLong</span><span class="o">();</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">apply</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">proxyName</span> <span class="o">=</span> <span class="n">proxyPkg</span> <span class="o">+</span> <span class="n">proxyClassNamePrefix</span> <span class="o">+</span> <span class="n">num</span><span class="o">;</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Generate the specified proxy class.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">proxyClassFile</span> <span class="o">=</span> <span class="n">ProxyGenerator</span><span class="o">.</span><span class="na">generateProxyClass</span><span class="o">(</span>
</span><span class='line'>            <span class="n">proxyName</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">,</span> <span class="n">accessFlags</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上代码便一目了然了，为什么我们<code>Debug</code>的时候<code>Proxy</code>对象是<code>$Proxy0</code>，是因为他通过<code>$Proxy</code>和<code>AtomicLong</code>拼起来的类名，其实这不是重点。重点是<code>ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags)</code>。这就是生成<code>class</code>的地方，它把所有的条件组合好，生成<code>class</code>文件，然后再加载到内存里面以供使用。有兴趣的同学可以继续往深处查看。而我们需要做的是获取到他生成的字节码，看一下里面到底是什么？当<code>saveGeneratedFiles</code>为<code>true</code>的时候会保存<code>class</code>文件，所以我们在<code>DynamicProxyTest</code>的<code>main</code>函数添加一行即可：</p>

<figure class='code'><figcaption><span>DynamicProxyTest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span><span class="o">,</span> <span class="s">&quot;true&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<code>Debug</code>我们可以发现，它存储<code>class</code>文件的路径是<code>com/sun/proxy/$Proxy0.class</code>，所以直接在我们项目的目录下面就能找到它，然后通过<code>Idea</code>打开便得到如下代码：</p>

<figure class='code'><figcaption><span>$Proxy0.class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">$Proxy0</span> <span class="kd">extends</span> <span class="n">Proxy</span> <span class="kd">implements</span> <span class="n">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m2</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m3</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">$Proxy0</span><span class="o">(</span><span class="n">InvocationHandler</span> <span class="n">var1</span><span class="o">)</span> <span class="kd">throws</span>  <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">var1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">var1</span><span class="o">)</span> <span class="kd">throws</span>  <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">((</span><span class="n">Boolean</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m1</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]{</span><span class="n">var1</span><span class="o">})).</span><span class="na">booleanValue</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="o">|</span> <span class="n">Error</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">var3</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var4</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">var4</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="kd">throws</span>  <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m2</span><span class="o">,</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="o">|</span> <span class="n">Error</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">var2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">var3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="kd">throws</span>  <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m3</span><span class="o">,</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="o">|</span> <span class="n">Error</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">var2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">var3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="kd">throws</span>  <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m0</span><span class="o">,</span> <span class="o">(</span><span class="n">Object</span><span class="o">[])</span><span class="kc">null</span><span class="o">)).</span><span class="na">intValue</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="o">|</span> <span class="n">Error</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">var2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">var3</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">m1</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;equals&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">)});</span>
</span><span class='line'>            <span class="n">m2</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;toString&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">m3</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;local.dynimicproxy.User&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;create&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>            <span class="n">m0</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;hashCode&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">var2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchMethodError</span><span class="o">(</span><span class="n">var2</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">var3</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoClassDefFoundError</span><span class="o">(</span><span class="n">var3</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样好多问题就迎刃而解。<br/>
为什么<code>Java动态代理</code>必须是接口，因为生成的类要去实现这个接口。<br/>
<code>invoke</code>方法的<code>proxy</code>是干嘛的，通过<code>super.h.invoke(this, m3, (Object[])null);</code>我们可以发现传递给<code>invoke</code>方法的就是<code>Proxy</code>本身。<br/>
同时<code>Proxy</code>类也通过反射实现了<code>toString</code>,<code>equals</code>,和<code>hashcode</code>等方法。<br/>
自此关于<code>Java动态代理</code>的讲解已经告段落，下面让我们简单看一下<code>Spring-mybatis</code>中关于<code>Java动态代理</code>的使用。</p>

<h2>Java动态代理在Spring-mybatis中的实现</h2>

<p>关于<code>Spring-mybatis</code>的实现我们得从<code>MapperScannerConfigurer</code>说起，首先<code>MapperScannerConfigurer</code>实现了<code>BeanDefinitionRegistryPostProcessor</code>接口。而<code>BeanDefinitionRegistryPostProcessor</code>依赖于<code>Spring</code>框架，简单的说<code>BeanDefinitionRegistryPostProcessor</code>使得我们可以将<code>BeanDefinition</code>添加到<code>BeanDefinitionRegistry</code>中，而<code>BeanDefinition</code>描述了一个Bean实例所拥有的实例、结构参数和参数值，简单点说拥有它就可以实例化<code>Bean</code>了。<code>BeanDefinitionRegistryPostProcessor</code>的<code>postProcessBeanDefinitionRegistry</code>方法在<code>Bean</code>被定义但还没被创建的时候执行，所以<code>Spring-mybatis</code>也是借助了这一点。需要想需要更深入的了解可以查看<code>Spring</code>的生命周期。</p>

<figure class='code'><figcaption><span>MapperScannerConfigurer.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MapperScannerConfigurer</span> <span class="kd">implements</span> <span class="n">BeanDefinitionRegistryPostProcessor</span><span class="o">,</span> <span class="n">InitializingBean</span><span class="o">,</span> <span class="n">ApplicationContextAware</span><span class="o">,</span> <span class="n">BeanNameAware</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * {@inheritDoc}</span>
</span><span class='line'><span class="cm">   * </span>
</span><span class='line'><span class="cm">   * @since 1.0.2</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postProcessBeanDefinitionRegistry</span><span class="o">(</span><span class="n">BeanDefinitionRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ClassPathMapperScanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClassPathMapperScanner</span><span class="o">(</span><span class="n">registry</span><span class="o">);</span>
</span><span class='line'>    <span class="n">scanner</span><span class="o">.</span><span class="na">scan</span><span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">tokenizeToStringArray</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">basePackage</span><span class="o">,</span> <span class="n">ConfigurableApplicationContext</span><span class="o">.</span><span class="na">CONFIG_LOCATION_DELIMITERS</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上代码我们可以看到在<code>postProcessBeanDefinitionRegistry</code>里面得到<code>registry</code>然后使用<code>ClassPathMapperScanner</code>开始扫描包路径得到的<code>Bean</code>并且注册到<code>registry</code>里面。我们接着往里面看。</p>

<figure class='code'><figcaption><span>ClassPathMapperScanner.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">BeanDefinitionHolder</span><span class="o">&gt;</span> <span class="nf">doScan</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">basePackages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">BeanDefinitionHolder</span><span class="o">&gt;</span> <span class="n">beanDefinitions</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">doScan</span><span class="o">(</span><span class="n">basePackages</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">beanDefinitions</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;No MyBatis mapper was found in &#39;&quot;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">basePackages</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;&#39; package. Please check your configuration.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">processBeanDefinitions</span><span class="o">(</span><span class="n">beanDefinitions</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">beanDefinitions</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ClassPathMapperScanner</code>继承了<code>Spring</code>的<code>ClassPathBeanDefinitionScanner</code>所以调用父类的<code>doScan</code>方法就可以加载<code>Bean</code>然后再通过<code>processBeanDefinitions</code>方法加工成<code>MyBatis</code>需要的<code>Bean</code>。</p>

<figure class='code'><figcaption><span>ClassPathMapperScanner.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processBeanDefinitions</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">BeanDefinitionHolder</span><span class="o">&gt;</span> <span class="n">beanDefinitions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">GenericBeanDefinition</span> <span class="n">definition</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">BeanDefinitionHolder</span> <span class="n">holder</span> <span class="o">:</span> <span class="n">beanDefinitions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">definition</span> <span class="o">=</span> <span class="o">(</span><span class="n">GenericBeanDefinition</span><span class="o">)</span> <span class="n">holder</span><span class="o">.</span><span class="na">getBeanDefinition</span><span class="o">();</span>
</span><span class='line'>      <span class="n">definition</span><span class="o">.</span><span class="na">setBeanClass</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperFactoryBean</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上代码循环了所有由<code>Spring</code>容器解析出来的<code>beanDefinitions</code>然后把他们的<code>BeanClass</code>修改为<code>mapperFactoryBean</code>，这就进入了行文的重点。我们翻看到<code>MapperFactoryBean</code>:</p>

<figure class='code'><figcaption><span>MapperFactoryBean.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">checkDaoConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">checkDaoConfig</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">notNull</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span><span class="o">,</span> <span class="s">&quot;Property &#39;mapperInterface&#39; is required&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="n">getSqlSession</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">addToConfig</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">configuration</span><span class="o">.</span><span class="na">hasMapper</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">configuration</span><span class="o">.</span><span class="na">addMapper</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error while adding the mapper &#39;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span> <span class="o">+</span> <span class="s">&quot;&#39; to configuration.&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ErrorContext</span><span class="o">.</span><span class="na">instance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其调用了<code>Configuration</code>的<code>addMapper</code>方法，这样就把<code>Bean</code>交给<code>MyBatis</code>管理了。那么<code>checkDaoConfig</code>是什么时候调用的呢？我们翻看其父类<code>DaoSupport</code>可以看到:</p>

<figure class='code'><figcaption><span>DaoSupport.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">DaoSupport</span> <span class="kd">implements</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span><span class="o">,</span> <span class="n">BeanInitializationException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkDaoConfig</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为<code>DaoSupport</code>实现了<code>InitializingBean</code>并重写<code>afterPropertiesSet</code>方法，了解<code>Spring</code>生命周期的同学知道<code>afterPropertiesSet</code>方法会在资源加载完以后，初始化bean之前执行。我们继续查看<code>addMapper</code>方法。</p>

<figure class='code'><figcaption><span>MapperRegistry.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">addMapper</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">isInterface</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">hasMapper</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">BindingException</span><span class="o">(</span><span class="s">&quot;Type &quot;</span> <span class="o">+</span> <span class="n">type</span> <span class="o">+</span> <span class="s">&quot; is already known to the MapperRegistry.&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">loadCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">knownMappers</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="k">new</span> <span class="n">MapperProxyFactory</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">type</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">// It&#39;s important that the type is added before the parser is run</span>
</span><span class='line'>        <span class="c1">// otherwise the binding may automatically be attempted by the</span>
</span><span class='line'>        <span class="c1">// mapper parser. If the type is already known, it won&#39;t try.</span>
</span><span class='line'>        <span class="n">MapperAnnotationBuilder</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MapperAnnotationBuilder</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">();</span>
</span><span class='line'>        <span class="n">loadCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">loadCompleted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">knownMappers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>addMapper</code>方法最终创建了<code>MapperProxyFactory</code>对象，在<code>MapperProxyFactory</code>里面我们两眼泪汪汪地发现了似曾相识的代码：</p>

<figure class='code'><figcaption><span>MapperProxyFactory.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperProxy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">mapperInterface</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span> <span class="n">mapperInterface</span> <span class="o">},</span> <span class="n">mapperProxy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">SqlSession</span> <span class="n">sqlSession</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperProxy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">sqlSession</span><span class="o">,</span> <span class="n">mapperInterface</span><span class="o">,</span> <span class="n">methodCache</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">mapperProxy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>MapperProxy</code>实现了<code>InvocationHandler</code>方法，最终实现对<code>Bean</code>的代理，同时获取到上下文的<code>sqlSession</code>以供使用。具体生成过程我们不再累述，直接通过其源码结束本篇文章：</p>

<figure class='code'><figcaption><span>MapperProxy.java片段</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span><span class="o">,</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">6424540398559729838L</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperInterface</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Method</span><span class="o">,</span> <span class="n">MapperMethod</span><span class="o">&gt;</span> <span class="n">methodCache</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MapperProxy</span><span class="o">(</span><span class="n">SqlSession</span> <span class="n">sqlSession</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperInterface</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Method</span><span class="o">,</span> <span class="n">MapperMethod</span><span class="o">&gt;</span> <span class="n">methodCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sqlSession</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span> <span class="o">=</span> <span class="n">mapperInterface</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">methodCache</span> <span class="o">=</span> <span class="n">methodCache</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getDeclaringClass</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">isDefaultMethod</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">invokeDefaultMethod</span><span class="o">(</span><span class="n">proxy</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">ExceptionUtil</span><span class="o">.</span><span class="na">unwrapThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">MapperMethod</span> <span class="n">mapperMethod</span> <span class="o">=</span> <span class="n">cachedMapperMethod</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mapperMethod</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">sqlSession</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考链接</h2>

<p><a href="http://www.mybatis.org/spring/getting-started.html">Spring Mybatis 配置</a>  <br/>
<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">Spring Boot Mybatis</a><br/>
<a href="https://stackoverflow.com/questions/22930195/understanding-proxy-arguments-of-the-invoke-method-of-java-lang-reflect-invoca">InvocationHandler Proxy Parameter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome自动生成网页目录插件的编写和使用]]></title>
    <link href="http://www.majiang.life/blog/table-of-contents-sidebar-chrome-extension-introduction/"/>
    <updated>2017-08-13T00:16:06+08:00</updated>
    <id>http://www.majiang.life/blog/table-of-contents-sidebar-chrome-extension-introduction</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>虽然移动设备已经很普遍了，但是大家使用电脑阅读网页的时间还是很长，尤其是做我们这个行业，除了阅读博客，通过网页搜索资料的时间也是比其他行业要多出来很多的。每次遇到特别长的文章的时候，从上到下的翻阅查找重点内容，肉眼的分离段落实在是比较费劲。但是有的网站这方面比较人性化，<code>Hexo</code>的博客系统或者是最近比较火的<code>segmentfault</code>，他们的文章目录就很方便，便于我们快速的定位(如下图)。但是大部分博客或者是贴吧还是没有目录的，于是笔者就突发奇想，自己写一个<code>Chrome</code>的插件，能自动的识别出来文章的目录，于是就有了这篇文章：</p>

<!-- more -->


<p><img src="http://www.majiang.life/images/posts/chrome-extension-segmentfault.png" alt="SegmentFault" /></p>

<h2>效果展示</h2>

<p>如图，简单的展示了一下插件的使用方式。
<img src="http://www.majiang.life/images/posts/chrome-extension-tutorial.gif" alt="Chrome Extension Toturial" /></p>

<h2>怎么快速编写Chrome Extension？</h2>

<p>首先需要的是<code>翻墙</code>，这个应该是<code>攻城狮</code>必备了吧。然后访问<code>Google</code>的官方<a href="https://developer.chrome.com/extensions/getstarted">Get Started</a>文章即可。里面的通过一个具体的实力详解，非常详细。如果想用更简单的办法，直接<code>clone</code>笔者的<a href="https://github.com/codedrinker/table-of-contents-sidebar">Repo</a>，然后修修改改。</p>

<h2>简单描述一下Chrome Extension的目录结构</h2>

<p>如下是笔者插件项目的目录结构，内容很多，我们挑一些重点说。
<img src="http://www.majiang.life/images/posts/chrome-extension-tree.png" alt="Tree" /><br/>
<code>manifest.json</code>是必不可少的，它是插件的入口，包括名字，版本，权限，icon等配置都在这里面。</p>

<p><code>background.js</code>可以是长时间运行在<code>Extension</code>的生性周期里面长时间运行的脚本，用它来管理一些任务或状态非常方便。他可以这样的原因是如下配置：</p>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;background&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;background.js&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;persistent&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>app.js</code>是使用插件过程中，网页里面可以执行的<code>js</code>文件，原因如下配置：</p>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;content_scripts&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;css&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;table-of-contents-sidebar.css&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;js&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;app.js&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;matches&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;http://*/*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;https://*/*&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>options.html</code>是设置界面，点击插件右键的<code>Options</code>出现的界面。因为<code>manifest.json</code>里面的<code>options_ui</code>配置了。</p>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;options_ui&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;page&quot;</span><span class="p">:</span> <span class="s2">&quot;options.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;chrome_style&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;open_in_tab&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>table-of-contents-sidebar.css</code>文件是插件的样式文件，如果需要在修改网页样式的时候使用，需要通过<code>chrome.extension.getURL("table-of-contents-sidebar.css");</code>的方式获取到他的绝对路径，然后写到页面里面使用。<br/>
<code>options.css</code>这个是设置页面需要使用的样式，不需要上面那么复杂，因为配置页面就是直接的网页了，可以直接引用：</p>

<figure class='code'><figcaption><span>options.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;options.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;options.css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其他的都是一起图片或者是样式资源，没有特别要说的，只要路径对应好就可以了。</p>

<h2>插件的实现思路</h2>

<p>1.采用遍历h<em>标签作为菜单<br/>
2.使用元素距离屏幕的垂直距离来过滤无用标签，笔者初步认为，h</em>标签高度递增说明一直是一个<code>Section</code>里面的标签，如果有变化，说明已经不对了，所以通过这个方式过滤一部分无用标签。<br/>
3.通过原始元素的<code>ID</code>定位锚，但是如果原始元素没有，自动生成一个<code>UUID</code>绑定到原始元素，方便定位。<br/>
4.使用获取当前页面的<code>domain</code>实现黑名单拦截功能，过滤掉一些使用者不希望看到<code>目录</code>的页面。
5.使用<code>mouseover</code>和<code>mouseout</code>事件实现鼠标移走就自动消失，最大限度的不要遮挡阅读内容。<br/>
6.使用<code>LocalStorage</code>实现保持用户搜索的设置，包括黑名单拦截。这样保证重启浏览器配置不会丢失。</p>

<h2>踩过的坑</h2>

<p>1.<code>Extension</code>使用的<code>icon</code>不能大于<code>190px</code>，所以再设置<code>broswer_action</code>或者是<code>content_menus</code>的时候一定要控制<code>icon</code>大小，因为大小超过以后他不会报错，只是不显示而已。<br/>
2.如果是页面想访问<code>Extension</code>资源，需要配置<code>web_accessible_resources</code>访问权限：</p>

<figure class='code'><figcaption><span>manifest.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;web_accessible_resources&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;images/*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;table-of-contents-sidebar.css&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;options.html&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;themes/*&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.修改完代码以后，必须到<code>chrome://extensions/</code>页面强制刷新，不然不会更新。  <br/>
4.上传第一个<code>Chrome Extension</code>需要交纳<code>7$</code>费用，官方说这是为了验证你的合法性。<br/>
5.如果更新的<code>Plugin</code>到商店的话，已经安装的用户会在5小时左右自动更新。<code>Chrome</code>的默认配置是5小时更新一次配置。</p>

<h2>下载和使用</h2>

<p>直接在<code>Chrome Webstore</code>搜索<code>Table of contents sidebar</code>下载，或者直接点击如下地址<a href="https://chrome.google.com/webstore/detail/table-of-contents-sidebar/ohohkfheangmbedkgechjkmbepeikkej">https://chrome.google.com/webstore/detail/table-of-contents-sidebar/ohohkfheangmbedkgechjkmbepeikkej</a>安装。操作是非常简单的，所以就不具体说了，如果需要讲解，可以参照插件下载页面的视频(YouTube)。</p>

<h2>自定义样式</h2>

<p>由于笔者是后端出身，虽然编码前端没问题，但是对于页面美观上面还是差一些。于是笔者提供了一个用户可以简单的编写样式的方式，这样如果想自己编写一个样式并且应用到<code>Chrome Extension</code>的同学，可以按照如下操作。  <br/>
1.第一步，<code>fork</code><a href="https://github.com/codedrinker/table-of-contents-sidebar">项目</a>代码，<code>clone</code>到自己本地。<br/>
2.第二步，<code>load</code>项目到<code>Chrome</code>，需要在开发模式才能<code>load</code>本地的包。<br/>
3.第三步，在<code>themes</code>目录添加你自定义样式文件，比如<code>darcula.css</code>。里面的内容仿照<code>table-of-contents-sidebar.css</code>编写即可，里面的元素很清楚。<br/>
4.第四步，在<code>options.html</code>里面找到<code>theme</code>的<code>select</code>，添加一个<code>option</code>如下即可：</p>

<figure class='code'><figcaption><span>options.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;themes/darcula.css&quot;</span><span class="nt">&gt;</span>Darcula<span class="nt">&lt;/option&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.第五步，提交一个<code>Pull Request</code>，我会尽快<code>Accept</code>。
这样你自定义的样式就可以展示在设置页面了。
<img src="http://www.majiang.life/images/posts/chrome-extension-theme.png" alt="Chrome Extension Theme" /></p>

<h2>使用愉快</h2>

<p>希望这个插件对大家有用，如果有任何问题，可以提<a href="https://github.com/codedrinker/table-of-contents-sidebar/issues">Issue</a>到<code>GitHub</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阅读模式是如何实现的?]]></title>
    <link href="http://www.majiang.life/blog/make-article-more-readable/"/>
    <updated>2017-07-04T21:09:10+08:00</updated>
    <id>http://www.majiang.life/blog/make-article-more-readable</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近使用读读日报发现其阅读模式很是方便，除了字体和布局舒服了，最重要的是去掉了干扰阅读的所有因素，包括广告，相关文章，栏目等等。于是就查找了一下有没有类似的实现方案。最后找了一些方案，不过并不知道正解，只是抛砖引玉罢了。(PS:感觉更深层次的处理应该是机器学习吧)</p>

<!-- more -->


<h2>霸王硬上弓</h2>

<p>这种方式就非常简单了，如题，直接对于每一个网站做适配，就是麻烦一些。直接通过编程语言解析页面的元素，然后找出对应的文章正文的位置，然后重新绘制样式，最后输出就搞定了。这样做麻烦一些，每一个网页都要做适配，不过可控的是对每一个元素的样式都可以把握。</p>

<h2>使用轮子</h2>

<p>使用第三方<code>API</code>，<a href="https://mercury.postlight.com/">Mercury</a>。这是一个免费的非常强大的<code>API</code>，他提供在线的把文章转换为便于阅读的文章。官方给的解释是：</p>

<figure class='code'><figcaption><span>官方文档 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Make your content work anywhere. Free.
</span><span class='line'>Mercury transforms web pages into clean text. 
</span><span class='line'>Publishers and programmers use it to make the web make sense, 
</span><span class='line'>and readers use it to read any web article comfortably.</span></code></pre></td></tr></table></div></figure>


<p>我们只需要注册一个账号，然后使用它的<code>api-key</code>调用接口就可以了。下面是预览效果：</p>

<p><img src="http://www.majiang.life/images/posts/article-readable-preview.png" alt="article-readable-preview" /><br/>
同时他提供了一个免费的Chrome 插件，如果想预先看看效果的话可以下载下来试用。<a href="https://chrome.google.com/webstore/detail/oknpjjbmpnndlpmnhmekjpocelpnlfdi">插件地址</a> <br/>
当然免费的肯定也有免费的弊端，他对于网页制作比较规格的适配比较好，有一些网页并不是很好。</p>

<h2>野路子</h2>

<p>我们大家都用过<code>pocket</code>吧，他就是通过离线阅读起家的，所以无论是他的效果，适配都是一流的，但是他官方的<code>API</code>只支持<code>CUD</code>不支持<code>R</code>。不过有说明，如果你真的需要的话可以找他们合作。我本着学习做了如下理论推测：首先通过调用其<code>API</code>存储网址，然后直接通过网页登录，然后就能看到<code>完美</code>的预览图了，拷贝下来不就行了嘛。当然程序如果想实现也是可以的，不过笔者就不提供代码了。但是如果你选择这个方案一定仔细阅读以下他的<code>Terms</code>。</p>

<h2>总结</h2>

<p>笔者只是抛砖引玉，希望有更好实现的人可以赐教。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加标签云]]></title>
    <link href="http://www.majiang.life/blog/octopress-tag-cloud/"/>
    <updated>2017-06-24T15:11:51+08:00</updated>
    <id>http://www.majiang.life/blog/octopress-tag-cloud</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>随着文章数量越来越多，分类也越来越多，不是很方便归类和查找，于是就有了<code>标签云</code>这个概念。简单明了的展示了标签和每一个标签下面的文章数量。这个功能可以自己编写，也非常简单。不过反正已经有轮子了，如果不喜欢重新造轮子，直接使用一个网上已经写好的就行了。下面直接进入正题：</p>

<h2>使用轮子</h2>

<p>直接<code>clone</code>轮子<code>https://github.com/tokkonopapa/octopress-tagcloud.git</code>到本地，如果不想<code>clone</code>直接点击<a href="http://www.majiang.life/assets/octopress-tagcloud-master.zip">下载</a>，然后把对应的资源拷贝到相应的目录：</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├─ plugins/
</span><span class='line'>│  └── tag_cloud.rb
</span><span class='line'>└─ source/
</span><span class='line'>   └─ _includes/
</span><span class='line'>      └─ custom/
</span><span class='line'>         └─ asides/
</span><span class='line'>            ├─ category_list.html
</span><span class='line'>            └─ tag_cloud.html</span></code></pre></td></tr></table></div></figure>


<p>然后修改 <code>_config.yml</code>，添加 <code>tag_cloud.html</code> 到 <code>default_asides</code> 数组，重新<code>rake preview</code>即可。</p>

<h2>造轮子</h2>

<p>造轮子原理也是很简单，遍历所有的<code>category</code>和每一个<code>category</code>下面的<code>posts</code>，然后编写好样式做输出就可以了。<code>plugins</code>这个目录用户存放一些<code>Ruby</code>的<code>plugins</code>文件，所以我们直接写一个脚本到这个目录:</p>

<figure class='code'><figcaption><span>plugins/tag_cloud.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># plugins/tag_cloud.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>      <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>        <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>        <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">category_url</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">category_dir</span><span class="p">,</span> <span class="n">category</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/-{2,}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;tag_cloud&#39;</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>source/_includes/custom/asides/tag_cloud.html</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- source/_includes/custom/asides/tag_cloud.html--&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% tag_cloud %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_.config.yml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#_config.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">...</span><span class="p-Indicator">,</span><span class="nv">custom/asides/tag_cloud.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们逐行解释： <br/>
<code>context</code>会传递传递静态博客需要的上下文,<code>category</code>和<code>posts</code>都可以在里面获取。<br/>
<code>Liquid::Template.register_tag</code> 最后生成<code>tag_cloud</code>标签，以便在<code>html</code>里面可以直接使用。<br/>
<code>tag_cloud.html</code> 直接在<code>html</code>里面使用<code>tag_cloud</code>标签<br/>
<code>_config.yml</code> 最后再里面配置就可以了</p>

<p>笔者前端不是很好，如果想把轮子造的好看一点，直接自定义<code>tag_cloud.rb</code>里面的<code>html</code>样式即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 首页添加‘更多’功能]]></title>
    <link href="http://www.majiang.life/blog/octopress-index-page-read-more/"/>
    <updated>2017-06-24T14:32:31+08:00</updated>
    <id>http://www.majiang.life/blog/octopress-index-page-read-more</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>在使用 <code>Octopress</code> 的过程中随着文章数量的增加，首页越来越臃肿，不仅加载慢而且可读性很差。看到过其他人的 <code>Octopress</code> 首页很简洁，有一个 <code>Read more</code>，这样就非常方便了。查询了一下操作起来也非常简单。</p>

<h2>添加更多</h2>

<p>方法是十分的简单，只是因为不是太熟悉<code>Octopress</code>导致查了很久。直接在 <code>*.markdown</code> 的 <code>post</code> 里面添加<code>&lt;!--more--&gt;</code>，这个标记下面的内容就不会在首页展示出来，并且通过一个<code>Read on</code>替换。原因是因为本身<code>Octopress</code>就支持，只是你没有使用。具体在<code>_config.yml</code>里面。</p>

<figure class='code'><figcaption><span>_.config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">//_.config.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">excerpt_link</span><span class="p-Indicator">:</span> <span class="s">&quot;Read</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">&amp;rarr;&quot;</span>  <span class="c1"># &quot;Continue reading&quot; link text at the bottom of excerpted articles</span>
</span><span class='line'><span class="l-Scalar-Plain">excerpt_separator</span><span class="p-Indicator">:</span> <span class="s">&quot;&lt;!--more--&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想修改<code>Read on</code>直接在<code>_config.yml</code>里面修改就可以了。</p>
]]></content>
  </entry>
  
</feed>
