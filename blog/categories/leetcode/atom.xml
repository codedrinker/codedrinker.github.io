<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | 码匠笔记]]></title>
  <link href="http://www.majiang.life/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2018-05-11T22:46:59+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Two Sum]]></title>
    <link href="http://www.majiang.life/blog/leetcode-two-sum/"/>
    <updated>2018-05-10T23:36:59+08:00</updated>
    <id>http://www.majiang.life/blog/leetcode-two-sum</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br/>
You may assume that each input would have exactly one solution, and you may not use the same element twice.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given nums = [2, 7, 11, 15], target = 9,&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Because nums[0] + nums[1] = 2 + 7 = 9,
</span><span class='line'>return [0, 1].</span></code></pre></td></tr></table></div></figure></p>

<h2>中文解释</h2>

<p>给定一个整型数组和一个给定的整数，返回两个数加和等于给定数的下标值。假设答案只有一个并且数组中没有重复的整数。</p>

<h2>解题思路</h2>

<p>首先循环数组中的整数，巧妙的定义一个 HashMap，用 key 记录整数的值，用 value 记录 该整数的下标。<br/>
使用 <code>map.get(target-nums[i]);</code> 判断其是否存在，如果存在说明给定的值减去当前的值的整数已经存在，意思就是说已经找到了加和等于给定数的两个值，他们的下标就放在了map的 value里面，直接取出即可。那么可以判断循环结束了，如果不存在那么就继续把当前值和下标放到 Map中。</p>

<h2>源码</h2>

<pre><code class="java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            Integer integer = map.get(target - nums[i]);
            if (integer != null) {
                result[0] = integer;
                result[1] = i;
                break;
            }
            map.put(nums[i], i);

        }
        return result;
    }
}
</code></pre>

<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></p>
]]></content>
  </entry>
  
</feed>
