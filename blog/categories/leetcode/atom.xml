<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Leetcode | 码匠笔记]]></title>
  <link href="http://www.majiang.life/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2018-05-13T15:30:39+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Longest Substring Without Repeating Characters]]></title>
    <link href="http://www.majiang.life/blog/longest-substring-without-repeating-characters/"/>
    <updated>2018-05-13T14:42:51+08:00</updated>
    <id>http://www.majiang.life/blog/longest-substring-without-repeating-characters</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>Given a string, find the length of the longest substring without repeating characters.</p>

<p>Examples:</p>

<p>Given &ldquo;abcabcbb&rdquo;, the answer is &ldquo;abc&rdquo;, which the length is 3.</p>

<p>Given &ldquo;bbbbb&rdquo;, the answer is &ldquo;b&rdquo;, with the length of 1.</p>

<p>Given &ldquo;pwwkew&rdquo;, the answer is &ldquo;wke&rdquo;, with the length of 3. Note that the answer must be a substring, &ldquo;pwke&rdquo; is a subsequence and not a substring.</p>

<h2>中文解释</h2>

<p>给定一个字符串，获得它不重复连续子序列的长度</p>

<!-- more -->


<h2>解题思路</h2>

<p>这题没有什么巧妙的方式，误区是我们不需要太关注子字符串是什么，只要记录它的长度最终比较就可以了，所以求解方式比较简单，直接循环字符串的每一个字节，判断是否出现过，如果出现过从头计算，更新重复的index，如果没有出现过，计数+1继续循环。</p>

<h2>源码</h2>

<pre><code class="java">public class LongestSubstringWithoutRepeatingCharacters {
    public int lengthOfLongestSubstring(String s) {
        int repeatedIndex = 0, length = 0;
        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; s.length(); i++) {
            if (map.containsKey(s.charAt(i))) {
                repeatedIndex = Math.max(map.get(s.charAt(i)), repeatedIndex);
            }

            length = Math.max(length, i - repeatedIndex + 1);
            map.put(s.charAt(i), i + 1);
        }
        return length;
    }

    public static void main(String[] args) {
        LongestSubstringWithoutRepeatingCharacters lswrc = new LongestSubstringWithoutRepeatingCharacters();
        System.out.println(lswrc.lengthOfLongestSubstring("abcabcbb") == 3);
        System.out.println(lswrc.lengthOfLongestSubstring("bbbbb") == 1);
        System.out.println(lswrc.lengthOfLongestSubstring("pwwkew") == 3);

    }
}
</code></pre>

<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters">https://leetcode.com/problems/longest-substring-without-repeating-characters</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Add Two Numbers]]></title>
    <link href="http://www.majiang.life/blog/leetcode-add-two-numbers/"/>
    <updated>2018-05-11T22:37:53+08:00</updated>
    <id>http://www.majiang.life/blog/leetcode-add-two-numbers</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>

<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.
<code>
Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
Output: 7 -&gt; 0 -&gt; 8
Explanation: 342 + 465 = 807.
</code></p>

<h2>中文解释</h2>

<p>给定两个非空的链表里面分别包含不等数量的正整数，每一个节点都包含一个正整数，肯能是0，但是不会是<code>01</code>这种情况。我们需要按照倒序计算他们的和然后再次倒序输出。</p>

<!-- more -->


<h2>解题思路</h2>

<p>这题没有什么巧妙的方式，不过仔细思考一下，它其实是在模拟正常的多位数加法。我们试想在计算多位数加法的时候，从最末位开始计算，如果大于10就进位，并加到下次高位计算中；如果不大于10继续计算；就这样我们就有了下面的阶梯思路。<br/>
一次循环就可以搞定，通过判断他们其中是不是空，就像是多位数加减法，如果一个高位没有了，当然也要继续计算，所以有了下面默认 <code>int carry = 0</code>，然后通过 <code>sum / 10</code> 算出进位，通过 <code>sum % 10</code> 算出当前位，这个题就迎刃而解。</p>

<h2>源码</h2>

<pre><code class="java">public class AddTwoNumbers {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode tempNode = new ListNode(0);
        ListNode a = l1, b = l2, curr = tempNode;
        int carry = 0;
        while (a != null || b != null) {
            int x = a != null ? a.val : 0;
            int y = b != null ? b.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (a != null) a = a.next;
            if (b != null) b = b.next;
        }

        if (carry &gt; 0) {
            curr.next = new ListNode(carry);
        }

        return tempNode.next;
    }

    public static void main(String[] args) {
        ListNode l1 = new ListNode(2);
        l1.add(new ListNode(4));
        l1.add(new ListNode(3));
        ListNode l2 = new ListNode(5);
        l2.add(new ListNode(6));
        l2.add(new ListNode(4));
        ListNode listNode = new AddTwoNumbers().addTwoNumbers(l1, l2);
        System.out.println(listNode.val);
        while (listNode.next != null) {
            System.out.println(listNode.next.val);
            listNode = listNode.next;
        }
    }
}

class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
    }

    public void add(ListNode next) {
        ListNode last = getLast(this);
        last.next = next;
    }

    private ListNode getLast(ListNode next) {
        while (next.next != null) {
            return getLast(next.next);
        }
        return next;
    }
}
</code></pre>

<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/add-two-numbers/">https://leetcode.com/problems/add-two-numbers/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一则 LeetCode: Two Sum]]></title>
    <link href="http://www.majiang.life/blog/leetcode-two-sum/"/>
    <updated>2018-05-10T23:36:59+08:00</updated>
    <id>http://www.majiang.life/blog/leetcode-two-sum</id>
    <content type="html"><![CDATA[<h2>描述</h2>

<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br/>
You may assume that each input would have exactly one solution, and you may not use the same element twice.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Given nums = [2, 7, 11, 15], target = 9,&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Because nums[0] + nums[1] = 2 + 7 = 9,
</span><span class='line'>return [0, 1].</span></code></pre></td></tr></table></div></figure></p>

<h2>中文解释</h2>

<p>给定一个整型数组和一个给定的整数，返回两个数加和等于给定数的下标值。假设答案只有一个并且数组中没有重复的整数。</p>

<!-- more -->


<h2>解题思路</h2>

<p>首先循环数组中的整数，巧妙的定义一个 HashMap，用 key 记录整数的值，用 value 记录 该整数的下标。<br/>
使用 <code>map.get(target-nums[i]);</code> 判断其是否存在，如果存在说明给定的值减去当前的值的整数已经存在，意思就是说已经找到了加和等于给定数的两个值，他们的下标就放在了map的 value里面，直接取出即可。那么可以判断循环结束了，如果不存在那么就继续把当前值和下标放到 Map中。</p>

<h2>源码</h2>

<pre><code class="java">class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            Integer integer = map.get(target - nums[i]);
            if (integer != null) {
                result[0] = integer;
                result[1] = i;
                break;
            }
            map.put(nums[i], i);

        }
        return result;
    }
}
</code></pre>

<h2>原题地址</h2>

<p><a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></p>
]]></content>
  </entry>
  
</feed>
