<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Threadlocal | 码匠笔记]]></title>
  <link href="http://www.majiang.life/blog/categories/threadlocal/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2018-02-23T11:46:09+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[优雅的使用 ThreadLocal 传递参数]]></title>
    <link href="http://www.majiang.life/blog/the-smart-way-of-passing-parameter-by-threadlocal/"/>
    <updated>2017-05-20T18:04:38+08:00</updated>
    <id>http://www.majiang.life/blog/the-smart-way-of-passing-parameter-by-threadlocal</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>在我们日常 <code>Web</code> 开发中难免遇到需要把一个参数层层的传递到最内层，然后中间层根本不需要使用这个参数，或者是仅仅在特定的工具类中使用，这样我们完全没有必要在每一个方法里面都传递这样一个<code>通用</code>的参数。如果有一个办法能够在任何一个类里面想用的时候直接拿来使用就太好了。<code>Java</code>的<code>Web</code>项目大部分都是基于<code>Tomcat</code>，每次访问都是一个新的线程，这样让我们联想到了<code>ThreadLocal</code>，每一个线程都独享一个<code>ThreadLocal</code>，在接收请求的时候<code>set</code>特定内容，在需要的时候<code>get</code>这个值。下面我们就进入主题。</p>

<!-- more -->


<h2>ThreadLocal</h2>

<p>维持线程封闭性的一种更规范的方法就是使用<code>ThreadLocal</code>，这个类能使线程中的某个值与保存的值的对象关联起来。<code>ThreadLocal</code>提供<code>get</code>和<code>set</code>等接口或方法，这些方法为每一个使用这个变量的线程都存有一份独立的副本，因此<code>get</code>总是返回由当前线程在调用<code>set</code>时设置的最新值。
<code>ThreadLocal</code>有如下方法
<code>java
public T get() { }
public void set(T value) { }
public void remove() { }
protected T initialValue() { }
</code>
<code>get()</code>方法是用来获取<code>ThreadLocal</code>在当前线程中保存的变量副本<br/>
<code>set()</code>用来设置当前线程中变量的副本<br/>
<code>remove()</code>用来移除当前线程中变量的副本 <br/>
<code>initialValue()</code>是一个<code>protected</code>方法，一般是用来在使用时进行重写的，如果在没有set的时候就调用<code>get</code>，会调用<code>initialValue</code>方法初始化内容。
为了使用的更放心，我们简单的看一下具体的实现:</p>

<h3><code>set</code>方法</h3>

<pre><code class="java ThreadLocal.java">public void set(T value) {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null)
            map.set(this, value);
        else
            createMap(t, value);
    }
</code></pre>

<p><code>set</code>方法会获取当前的线程，通过当前线程获取<code>ThreadLocalMap</code>对象。然后把需要存储的值放到这个<code>map</code>里面。如果没有就调用<code>createMap</code>创建对象。</p>

<h3><code>getMap</code>方法</h3>

<pre><code class="java ThreadLocal.java"> ThreadLocalMap getMap(Thread t) {
        return t.threadLocals;
    }
</code></pre>

<p><code>getMap</code>方法直接返回当前<code>Thread</code>的<code>threadLocals</code>变量，这样说明了之所以说<code>ThreadLocal</code>是<code>线程局部变量</code>就是因为它只是通过<code>ThreadLocal</code>把<code>变量</code>存在了<code>Thread</code>本身而已。</p>

<h3><code>createMap</code>方法</h3>

<pre><code class="java ThreadLocal.java">void createMap(Thread t, T firstValue) {
        t.threadLocals = new ThreadLocalMap(this, firstValue);
    }
</code></pre>

<p>在<code>set</code>的时候如果不存在<code>threadLocals</code>，直接创建对象。由上看出，放入<code>map</code>的<code>key</code>是当前的<code>ThreadLocal</code>，<code>value</code>是需要存放的内容，所以我们设置属性的时候需要注意存放和获取的是一个<code>ThreadLocal</code>。</p>

<h3><code>get</code>方法</h3>

<pre><code class="java ThreadLocal.java">public T get() {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);
            if (e != null)
                return (T)e.value;
        }
        return setInitialValue();
    }
</code></pre>

<p><code>get</code>方法就比较简单，获取当前线程，尝试获取当前线程里面的<code>threadLocals</code>，如果没有获取到就调用<code>setInitialValue</code>方法，<code>setInitialValue</code>基本和<code>set</code>是一样的，就不累累述了。</p>

<h2>场景</h2>

<p>本文应用<code>ThreadLocal</code>的场景：在调用API接口的时候传递了一些公共参数，这些公共参数携带了一些设备信息，服务端接口根据不同的信息组装不同的格式数据返回给客户端。假定服务器端需要通过设备类型(device)来下发下载地址，当然接口也有同样的其他逻辑，我们只要在返回数据的时候判断好是什么类型的客户端就好了。如下:</p>

<h4>场景一</h4>

<p>请求
<code>sh
GET api/users?device=android
</code>
返回
<code>JSON
    {
        user : {        
        },
        link : "https://play.google.com/store/apps/details?id=***"
    }
</code></p>

<h4>场景二</h4>

<p>请求
<code>sh
GET api/users?device=ios
</code>
返回
<code>JSON
    {
        user : {    
        },
        link : "https://itunes.apple.com/us/app/**"
    }
</code></p>

<h2>实现</h2>

<p>首先准备一个<code>BaseSigntureRequest</code>类用来存放公共参数
&#8220;`java BaseSignatureRequest.java
public class BaseSignatureRequest {
    private String device;</p>

<pre><code>public String getDevice() {
    return device;
}

public void setDevice(String device) {
    this.device = device;
}
</code></pre>

<p>}
<code>
然后准备一个`static`的`ThreadLocal`类用来存放`ThreadLocal`，以便存储和获取时候的`ThreadLocal`一致。
</code>java ThreadLocalCache.java
public class ThreadLocalCache {
    public static ThreadLocal<BaseSignatureRequest>
        baseSignatureRequestThreadLocal = new ThreadLocal&lt;>();
}
<code>
然后编写一个`Interceptor`，在请求的时候获取`device`参数，存入当前线程的`ThreadLocal`中。这里需要注意的是，重写了`afterCompletion`方法，当请求结束的时候把`ThreadLocal` `remove`，移除不必须要键值对。
</code>java ParameterInterceptor.java
public class ParameterInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response,
                             Object handler) throws Exception {
        String device = request.getParameter(&ldquo;device&rdquo;);
        BaseSignatureRequest baseSignatureRequest = new BaseSignatureRequest();
        baseSignatureRequest.setDevice(device);
        ThreadLocalCache.baseSignatureRequestThreadLocal.set(baseSignatureRequest);
        return true;
    }</p>

<pre><code>@Override
public void afterCompletion(HttpServletRequest request, HttpServletResponse response,
                            Object handler, Exception ex) throws Exception {
    ThreadLocalCache.baseSignatureRequestThreadLocal.remove();
}

@Override
public void postHandle(HttpServletRequest httpServletRequest,
                       HttpServletResponse httpServletResponse, 
                       Object o, ModelAndView modelAndView) throws Exception {

}
</code></pre>

<p>}
<code>
当然需要在`spring`里面配置`interceptor`
</code>xml applicationContext.xml
    &lt;mvc:interceptors>
        &lt;mvc:interceptor>
            &lt;mvc:mapping path=&ldquo;/api/**&rdquo;/>
            <bean class="life.majiang.ParameterInterceptor"></bean>
        &lt;/mvc:interceptor>
    &lt;/mvc:interceptors>
&#8220;`</p>

<p>最后在<code>Converter</code>里面转换实体的时候直接使用即可，这样就大功告成了。
<code>java UserConverter.java
public class UserConverter {
    public static ResultDO toDO(User user) {
        ResultDO resultDO = new ResultDO();
        resultDO.setUser(user);
        BaseSignatureRequest baseSignatureRequest = ThreadLocalCache.baseSignatureRequestThreadLocal.get();
        String device = baseSignatureRequest.getDevice();
        if (StringUtils.equals(device, "ios")) {
            resultDO.setLink("https://itunes.apple.com/us/app/**");
        } else {
            resultDO.setLink("https://play.google.com/store/apps/details?id=***");
        }
        return resultDO;
    }
</code></p>

<h2>总结</h2>

<p>这种机制很方便，因为他避免了在调用每一个方法时都要传递执行上下文信息，合理的使用<code>ThreadLocal</code>可以起到事倍功半的效果，但是需要避免滥用，例如将所有的全局变量作为<code>ThreadLocal</code>对象，<code>ThreadLocal</code>类似全局变量，他能降低代码的可重用性，并在类之间引入隐含的耦合性，所以再使用前需要格外小心。</p>
]]></content>
  </entry>
  
</feed>
