<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | 码匠笔记]]></title>
  <link href="http://www.majiang.life/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2017-10-31T21:27:50+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring 集成 Redis 扫雷]]></title>
    <link href="http://www.majiang.life/blog/quick-start-spring-data-redis/"/>
    <updated>2017-10-21T10:37:55+08:00</updated>
    <id>http://www.majiang.life/blog/quick-start-spring-data-redis</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>关于<code>Redis</code>已然是烂大街的技术了，但是近日新起了一个项目需要集成<code>Redis</code>，看了一下之前的封装实在是不怎么优雅，于是查了一下发现了一个非常简单的解决方案，那就是<code>Spring</code>家族的<code>Spring Data Redis</code>。话不多说直接“上码”:</p>

<!-- more -->


<h2>Spring Data Redis 介绍</h2>

<p>Spring Data Redis是Spring Data系列的一部分，它可以轻松地使得Spring应用程序配置和访问Redis。</p>

<h2>快速搭建 Spring Data Redis</h2>

<p>直接可以参照官方地址进行配置，以往的<code>Spring</code>的文档都写着预计阅读时间，这个没有写你就知道有多简单啦。你可以直接<a href="http://projects.spring.io/spring-data-redis/">点击查看官方文档</a>，或者往下阅读。<br/>
<code>Maven</code>直接引入如下依赖：
<code>xml pom.xml
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
        &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;
        &lt;version&gt;1.8.8.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;spring-libs-release&lt;/id&gt;
        &lt;name&gt;Spring Releases&lt;/name&gt;
        &lt;url&gt;https://repo.spring.io/libs-release&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code>
然后直接在<code>Spring</code>的配置文件里面定义<code>bean</code>就可以了，官方没有说怎么配置<code>hostname</code>等等，但是点击<code>JedisConnectionFactory</code>里面一看就知道了，直接添加一行<code>p:host-name="172.10.23.234"</code>即可。
&#8220;`xml applicationContext.xml
<bean id="jedisConnFactory"
    class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
    p:use-pool="true"
    p:host-name="172.10.23.234"
    /></p>

<!-- redis template definition -->


<p><bean id="redisTemplate"
    class="org.springframework.data.redis.core.RedisTemplate"
    p:connection-factory-ref="jedisConnFactory"/>
<code>
最后直接引入`bean`使用：
</code>java Example.java
public class Example {</p>

<pre><code>// inject the actual template
@Autowired
private RedisTemplate&lt;String, String&gt; template;

// inject the template as ListOperations
// can also inject as Value, Set, ZSet, and HashOperations
@Resource(name="redisTemplate")
private ListOperations&lt;String, String&gt; listOps;

public void addLink(String userId, URL url) {
    listOps.leftPush(userId, url.toExternalForm());
    // or use template directly
    redisTemplate.boundListOps(userId).leftPush(url.toExternalForm());
}
</code></pre>

<p>}
<code>``
如上，根据</code>Spring`的官方文档已经全部完成，是不是非常简单？那么接下来我们运行一下试一试。<br/>
这时候出现了第一个异常。</p>

<h2>NoClassDefFoundError 问题解决</h2>

<pre><code class="sh">nested exception is java.lang.NoClassDefFoundError: org/apache/commons/pool2/impl/GenericObjectPoolConfig
</code></pre>

<p>很明显是没有引入这个包嘛，我们直接从<code>spring-data-redis</code>的<code>pom.xml</code>里面可以看到多了一个<code>optional</code>属性。
<code>xml pom.xml[spring-data-redis]
  &lt;dependency&gt;
      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
      &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
      &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
</code>
那么这个问题就迎刃而解了，因为在<code>spring-data-redis</code>里面声明的<code>commons-pool2</code>是<code>optional</code>的，根据<code>Maven</code>的规则如果A项目依赖配置为optional的，那么依赖A项目的B项目如果不手动引入A里面optional的依赖B项目是不会自动引入依赖的的。说起来有点绕，反正就是导致我们必须手动添加下面的依赖。详情可以参照<code>Maven</code>的官方网文档。<a href="http://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html">点击查看官方文档</a>。
<code>xml pom.xml
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
    &lt;version&gt;2.2&lt;/version&gt;
&lt;/dependency&gt;
</code>
再次运行的时候我们发现了另一个问题
<code>sh
nested exception is java.lang.NoClassDefFoundError: redis/clients/jedis/JedisPoolConfig
</code>
这问题就显而易见了，直接添加如下到<code>pom.xml</code>中即可。
<code>xml pom.xml
&lt;dependency&gt;
    &lt;groupId&gt;redis.clients&lt;/groupId&gt;
    &lt;artifactId&gt;jedis&lt;/artifactId&gt;
    &lt;version&gt;2.9.0&lt;/version&gt;
&lt;/dependency&gt;
</code>
这时候我们再次运行项目可以正常运行啦，然而有出现了一个奇怪的问题，存入<code>Redis</code>里面的<code>Key</code>有一个看起来像是乱码的前缀<code>\xac\xed\x00\x05t\x00</code>:</p>

<h2>\xac\xed\x00\x05t\x00 到底是啥</h2>

<p>出现这个问题的原因是因为其使用的默认是RedisTemplate，它使用的是Java的Serialization方式，所以会在前面有一段类似乱码的东西。如果是String作为key的话可以直接修改为StringRedisTemplate这个问题就修改了。</p>

<h2>参考链接</h2>

<p><a href="http://projects.spring.io/spring-data-redis/">String Date Redis</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Idea 创建 Spring Boot 项目]]></title>
    <link href="http://www.majiang.life/blog/spring-boot-get-started/"/>
    <updated>2017-06-22T22:22:14+08:00</updated>
    <id>http://www.majiang.life/blog/spring-boot-get-started</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近 <code>Spring Boot</code> 如火如荼，于是也开始试试，不过上手真的太简单了。<code>Idea</code>非常方便的就可以创建，或者直接<code>clone</code>官方的例子<a href="https://spring.io/guides/gs/spring-boot/">https://spring.io/guides/gs/spring-boot/</a>。通俗理解<code>Spring Boot</code>就是一个<code>平台</code>，让你非常便捷的构建和运行一个项目，并且他是基于组件化的，你想用什么直接<code>拿来主义</code>就可以了，话不多少直接上手。</p>

<!-- more -->


<h2>使用 <code>Idea</code> 快速搭建</h2>

<p>选择<code>Spring Initialiar</code>直接创建。
<img src="/images/posts/spring-boot-get-started-1.png" alt="spring-boot-get-started-1" /></p>

<p>填写好<code>Group</code>和<code>Artifact</code>。
<img src="/images/posts/spring-boot-get-started-2.png" alt="spring-boot-get-started-2" /></p>

<p>下面直接选择<code>Web</code>就可以了，但是如果你想选择其他的直接勾选就行，她会自动为你加载依赖。并且一些<code>dependency</code>不需要配置版本，每一个<code>Spring Boot</code>的<code>parent</code>项目集成管理，这样省去了好多兼容麻烦。
<img src="/images/posts/spring-boot-get-started-3.png" alt="spring-boot-get-started-3" /></p>

<p>我们写一个<code>HelloController</code>试一下效果。
<img src="/images/posts/spring-boot-get-started-4.png" alt="spring-boot-get-started-4" /></p>

<p>最后访问<code>http://localhost:8080</code>成功。
<img src="/images/posts/spring-boot-get-started-5.png" alt="spring-boot-get-started-5" /></p>

<p>如果想改变端口也是非常简单的。
<img src="/images/posts/spring-boot-get-started-6.png" alt="spring-boot-get-started-6" /></p>
]]></content>
  </entry>
  
</feed>
