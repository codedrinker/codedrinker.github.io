<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 码匠笔记]]></title>
  <link href="http://www.majiang.life/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2017-11-07T09:35:32+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从 Spring 集成 Mybatis 到 浅析Java动态代理]]></title>
    <link href="http://www.majiang.life/blog/spring-mybatis-and-dynamic-proxy/"/>
    <updated>2017-10-15T21:10:30+08:00</updated>
    <id>http://www.majiang.life/blog/spring-mybatis-and-dynamic-proxy</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>因为 <code>MyBatis</code> 的易上手性和可控性，使得它成为了<code>ORM</code>框架中的首选。近日新起了一个项目，所以重新搭建了一下 <code>Spring-mybatis</code>, 下面是搭建笔记和从<code>Spring-mybatis</code>源码分析其如何使用<code>Java动态代理</code>，希望对大家有帮助。</p>

<!-- more -->


<h2>Spring 集成 Mybatis</h2>

<p><code>Spring</code> 集成 <code>Mybatis</code>的方式有很多种，大家耳熟能详的<code>xml</code>配置方式或者本文的采用的方式：<br/>
首先需要添加<code>MyBatis</code>的和<code>MyBatis-Spring</code>的依赖，本文使用的<code>Spring-mybatis</code>版本是1.3.1。在<code>mvnrepository</code>里面我们可以找到当前<code>Spring-mybatis</code>依赖的<code>spring</code>和<code>mybatis</code>版本，最好是选择匹配的版本以避免处理不必要的兼容性问题。因为<code>MyBatis-Spring</code>中对<code>mybatis</code>的依赖选择了<code>provided</code>模式，所以我们不得不额外添加<code>mybatis</code>依赖，依赖配置如下。
<code>xml pom.xml
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
    &lt;version&gt;1.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
      &lt;version&gt;3.4.1&lt;/version&gt;
&lt;/dependency&gt;
</code>
接下来会我们要创建工厂bean,放置下面的代码在 Spring 的 XML 配置文件中:<br/>
<code>xml applicationContext.xml
&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;
  &lt;property name="dataSource" ref="dataSource" /&gt;
&lt;/bean&gt;
</code><br/>
这个工厂需要一个<code>DataSource</code>，就是我们熟知的数据源了。这里我们选择了阿里的<code>Druid</code>，同样我们需要引入两个配置
<code>xml pom.xml
&lt;dependency&gt;
 &lt;groupId&gt;mysql&lt;/groupId&gt;
 &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
 &lt;version&gt;5.1.41&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
 &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
 &lt;artifactId&gt;druid&lt;/artifactId&gt;
 &lt;version&gt;1.1.2&lt;/version&gt;
&lt;/dependency&gt;
</code>          <br/>
添加<code>Spring</code>配置如下
<code>xml applicationContext.xml
&lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt;
        &lt;!-- 基本属性 url、user、password --&gt;
        &lt;property name="url"&gt;
            &lt;value&gt;&lt;![CDATA[${db.url}]]&gt;&lt;/value&gt;
        &lt;/property&gt;
        &lt;property name="username" value="${db.username}"/&gt;
        &lt;property name="password" value="${db.password}"/&gt;       
        &lt;!-- 省略其他配置 --&gt;   
&lt;/bean&gt;
</code>
接下来我们要编写数据库访问对象，大多数人会把它叫做<code>DAO</code>或者<code>Repository</code>，在这里其被称为<code>Mapper</code>，也是因为它的实现方式所决定。要注意的是所指定的映射器类必须是一个接口，而不是具体的实现类。这便因为<code>Mybatis</code>的内部实现使用的是<code>Java动态代理</code>，而<code>Java动态代理</code>只支持接口，关于<code>动态代理</code>我们下文有更详细的描述。
<code>java UserMapper.java
public interface UserMapper {
  @Select("SELECT * FROM users WHERE id = #{userId}")
  User getUser(@Param("userId") String userId);
}
</code>
接下来可以使用 <code>MapperFactoryBean</code>,像下面这样来把接口加入到 <code>Spring</code> 中，这样就把 <code>UserMapper</code> 和 <code>SessionFactory</code>关联到一起了，原来使用<code>xml</code>配置的时候还需要Dao继承<code>SqlSessionDaoSupport</code>才能注入<code>SessionFactory</code>，这种方式直接通过<code>Java动态代理</code>把<code>SqlSessionFactory</code>代理给了<code>UserMapper</code>，使得我们直接使用<code>UserMapper</code>即可。配置如下。
<code>xml applicationContext.xml
&lt;bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"&gt;
  &lt;property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper" /&gt;
  &lt;property name="sqlSessionFactory" ref="sqlSessionFactory" /&gt;
&lt;/bean&gt;
</code>
这样我们已经完成了90%，就差调用了，前提是你<code>Spring</code>环境是OK的。调用 <code>MyBatis</code> 数据方法现在只需一行代码:
<figure class='code'><figcaption><span>FooServiceImpl.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FooServiceImpl</span> <span class="kd">implements</span> <span class="n">FooService</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">UserMapper</span> <span class="n">userMapper</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserMapper</span><span class="o">(</span><span class="n">UserMapper</span> <span class="n">userMapper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">userMapper</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">User</span> <span class="nf">doSomeBusinessStuff</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">userMapper</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">那么问题又来了</span><span class="err">，</span><span class="n">每次写一个DAO都需要为其写一个</span><span class="err">`</span><span class="n">Bean</span><span class="err">`</span><span class="n">配置</span><span class="err">，</span><span class="n">那不是累死</span><span class="err">？</span><span class="n">于是我们又寻找另一种方案</span><span class="err">，</span><span class="n">代替手动声明</span><span class="err">`</span><span class="o">*</span><span class="n">Mapper</span><span class="err">`。`</span><span class="n">MapperScannerConfigurer</span><span class="err">`</span><span class="n">的出现解决了这个问题</span><span class="err">，</span> <span class="n">它会根据你配置的包路径自动的扫描类文件并自动将它们创建成</span><span class="err">`</span><span class="n">MapperFactoryBean</span><span class="err">`，</span><span class="n">可以在</span> <span class="n">Spring</span> <span class="nl">的配置中添加如下代码:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">xml</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">xml</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bean</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;basePackage&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;com.github.codedrinker.mapper&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">basePackage</span><span class="err">`</span><span class="n">属性是让你为映射器接口文件设置基本的包路径</span><span class="err">。</span><span class="n">你可以使用分号或逗号作为分隔符设置多于一个的包路径</span><span class="err">。</span><span class="n">这个时候如果想自定义</span><span class="err">`</span><span class="n">sqlSessionFactory</span><span class="err">`</span><span class="n">可以添加如下配置</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">xml</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">xml</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="n">这样以后还有一点点小瑕疵</span><span class="err">，</span><span class="n">如果我们数据的</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">column</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">名字是</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">连接的</span><span class="err">，</span><span class="n">那么它不会那么聪明自动转换为驼峰的变量</span><span class="err">，</span><span class="n">所以我们需要对</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SqlSessionFactoryBean</span><span class="err">`</span><span class="n">做如下配置</span><span class="err">，</span><span class="n">但是在1</span><span class="o">.</span><span class="mf">3.0</span><span class="n">以后才可以通过xml配置</span><span class="err">，</span><span class="n">如果用早起版本的需要注意了</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;xml applicationContext.xml&quot;</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;dataSource&quot;</span> <span class="n">ref</span><span class="o">=</span><span class="s">&quot;dataSource&quot;</span> <span class="o">/&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;configuration&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">bean</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;org.apache.ibatis.session.Configuration&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">property</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="o">/&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">bean</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">property</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="n">bean</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">至此关于</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Spring</span> <span class="n">MyBatis</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">的配置已经全部结束</span><span class="err">，</span><span class="n">后面我们会简单说下</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Spring</span> <span class="n">MyBatis</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">中的动态代理</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">浅析</span> <span class="n">Java</span> <span class="n">动态代理</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">JDK</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">自带的动态代理需要了解InvocationHandler接口和Proxy类</span><span class="err">，</span><span class="n">他们都是在java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect包下</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InvocationHandler</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">是代理实例的调用处理程序实现的接口</span><span class="err">。</span><span class="n">每个代理实例都具有一个关联的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InvocationHandler</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。</span><span class="n">对代理实例调用方法时</span><span class="err">，</span><span class="n">这个方法会调用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InvocationHandler</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">invoke</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">方法</span><span class="err">。</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Proxy</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">提供静态方法用于创建动态代理类和实例</span><span class="o">,</span><span class="n">同时后面自动生成的代理类都是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Proxy</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">对象</span><span class="err">。</span><span class="n">下面我们直接通过代码来分析</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Java动态代理</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InvocationInterceptor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">实现</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InvocationHandler</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">接口</span><span class="err">，</span><span class="n">用于处理具体的代理逻辑</span><span class="err">。</span>
</span></code></pre></td></tr></table></div></figure>java InvocationInterceptor.java
/<em>*
 * Created by codedrinker on 12/10/2017.
 </em>/
public class InvocationInterceptor implements InvocationHandler {
    private Object target;</p>

<pre><code>public InvocationInterceptor(Object target) {
    this.target = target;
}
@Override
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
    System.out.println("before user create");
    method.invoke(target, args);
    System.out.println("end user create");
    return null;
}
</code></pre>

<p>}
<code>
`User`和`UserImpl`是被代理对象的接口和类
</code>java User.java
/<em>*
 * Created by codedrinker on 12/10/2017.
 </em>/
public interface User {
    void create();
}</p>

<p><code>
</code>java UserImpl.java
/<strong>
 * Created by codedrinker on 12/10/2017.
 */
public class UserImpl implements User {
    @Override
    public void create() {
        System.out.println(&ldquo;create user&rdquo;);
    }
}
<code>
`DynamicProxyTest`是测试类，用于创建`InvocationInterceptor`和`Proxy`类以便测试。
</code>java DynamicProxyTest.java
/</strong>
 * Created by codedrinker on 12/10/2017.
 <em>/
public class DynamicProxyTest {
    public static void main(String[] args) {
        User target = new UserImpl();
        InvocationInterceptor invocationInterceptor = new InvocationInterceptor(target);
        User proxyInstance = (User) Proxy.newProxyInstance(UserImpl.class.getClassLoader(),
                UserImpl.class.getInterfaces(),
                invocationInterceptor);
        proxyInstance.create();
    }
}
<code>
输入结果如下：
</code>sh
before user create
create user
end user create
<code>
很明显，我们通过proxyInstance这个代理类进行方法调用的时候，会在方法调用前后进行输出打印，这样就简单的实现了一个`Java动态代理`例子。动态代理不仅仅是打印输出这么简单，我们可以通过它打印日志，打开关闭事务， 权限检查了等等。当然它更是许多框架的钟爱，就如下文我们要说的`MyBatis`中`Java动态代理`的实现。再多说一句`Spring`的`AOP`也是使用动态代理实现的，当然它同时使用了`Java动态代理`和`CGLib`两种方式。不过`CGLIB`不是本文要讨论的范围。  
注意观察的同学看到上面代码的时候可能发现`invoke`方法的`proxy`参数并没有被使用，笔者查阅了一些相关文档也没有找到合理的说法，只能在源码中看看究竟喽，笔者当前的JDK版本是1.8。我们从入口开始，`Proxy.newProxyInstance`:
</code>java Proxy.java片段
/</em>
 * Look up or generate the designated proxy class.
 */
@CallerSensitive
public static Object newProxyInstance(ClassLoader loader,
                                      Class&lt;?>[] interfaces,
                                      InvocationHandler h)
    throws IllegalArgumentException
{
    Class&lt;?> cl = getProxyClass0(loader, intfs);
}
<code>
如上代码由此可见，它调用了`getProxyClass0`来获取`Proxy Class`，那我们继续往下看。
</code>java Proxy.java片段
private static Class&lt;?> getProxyClass0(ClassLoader loader,
                                           Class&lt;?>&hellip; interfaces) {
    if (interfaces.length > 65535) {
        throw new IllegalArgumentException(&ldquo;interface limit exceeded&rdquo;);
    }
    //If the proxy class defined by the given loader implementing
    //the given interfaces exists, this will simply return the cached copy;
    //otherwise, it will create the proxy class via the ProxyClassFactory
    return proxyClassCache.get(loader, interfaces);
}
<code>
其实上面写的已经很简单了，如果存在就在`proxyClassCache`里面获取到，如果不存在就使用`ProxyClassFactory`创建一个。当然我们如果看一下`proxyClassCache`变量的话其也是`ProxyClassFactory`对象。
</code>java
   private static final WeakCache&lt;ClassLoader, Class&lt;?>[], Class&lt;?>>
        proxyClassCache = new WeakCache&lt;>(new KeyFactory(), new ProxyClassFactory());
<code>
那么我们直接就去查看`ProxyClassFactory`的实现问题不就解决了吗？
</code>java Proxy.java片段
    private static final class ProxyClassFactory
        implements BiFunction&lt;ClassLoader, Class&lt;?>[], Class&lt;?>>
    {
        // prefix for all proxy class names
        private static final String proxyClassNamePrefix = &ldquo;$Proxy&rdquo;;
        //next number to use for generation of unique proxy class names
        private static final AtomicLong nextUniqueNumber = new AtomicLong();
        @Override
        public Class&lt;?> apply(ClassLoader loader, Class&lt;?>[] interfaces) {</p>

<pre><code>        String proxyName = proxyPkg + proxyClassNamePrefix + num;
        /*
         * Generate the specified proxy class.
         */
        byte[] proxyClassFile = ProxyGenerator.generateProxyClass(
            proxyName, interfaces, accessFlags);
    }
}
</code></pre>

<pre><code>由上代码便一目了然了，为什么我们`Debug`的时候`Proxy`对象是`$Proxy0`，是因为他通过`$Proxy`和`AtomicLong`拼起来的类名，其实这不是重点。重点是`ProxyGenerator.generateProxyClass(proxyName, interfaces, accessFlags)`。这就是生成`class`的地方，它把所有的条件组合好，生成`class`文件，然后再加载到内存里面以供使用。有兴趣的同学可以继续往深处查看。而我们需要做的是获取到他生成的字节码，看一下里面到底是什么？当`saveGeneratedFiles`为`true`的时候会保存`class`文件，所以我们在`DynamicProxyTest`的`main`函数添加一行即可：
</code></pre>

<p>System.setProperty(&ldquo;sun.misc.ProxyGenerator.saveGeneratedFiles&rdquo;, &ldquo;true&rdquo;);
<code>
通过`Debug`我们可以发现，它存储`class`文件的路径是`com/sun/proxy/$Proxy0.class`，所以直接在我们项目的目录下面就能找到它，然后通过`Idea`打开便得到如下代码：
</code>java $Proxy0.class
public final class $Proxy0 extends Proxy implements User {
    private static Method m1;
    private static Method m2;
    private static Method m3;
    private static Method m0;</p>

<pre><code>public $Proxy0(InvocationHandler var1) throws  {
    super(var1);
}

public final boolean equals(Object var1) throws  {
    try {
        return ((Boolean)super.h.invoke(this, m1, new Object[]{var1})).booleanValue();
    } catch (RuntimeException | Error var3) {
        throw var3;
    } catch (Throwable var4) {
        throw new UndeclaredThrowableException(var4);
    }
}

public final String toString() throws  {
    try {
        return (String)super.h.invoke(this, m2, (Object[])null);
    } catch (RuntimeException | Error var2) {
        throw var2;
    } catch (Throwable var3) {
        throw new UndeclaredThrowableException(var3);
    }
}

public final void create() throws  {
    try {
        super.h.invoke(this, m3, (Object[])null);
    } catch (RuntimeException | Error var2) {
        throw var2;
    } catch (Throwable var3) {
        throw new UndeclaredThrowableException(var3);
    }
}

public final int hashCode() throws  {
    try {
        return ((Integer)super.h.invoke(this, m0, (Object[])null)).intValue();
    } catch (RuntimeException | Error var2) {
        throw var2;
    } catch (Throwable var3) {
        throw new UndeclaredThrowableException(var3);
    }
}

static {
    try {
        m1 = Class.forName("java.lang.Object").getMethod("equals", new Class[]{Class.forName("java.lang.Object")});
        m2 = Class.forName("java.lang.Object").getMethod("toString", new Class[0]);
        m3 = Class.forName("local.dynimicproxy.User").getMethod("create", new Class[0]);
        m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);
    } catch (NoSuchMethodException var2) {
        throw new NoSuchMethodError(var2.getMessage());
    } catch (ClassNotFoundException var3) {
        throw new NoClassDefFoundError(var3.getMessage());
    }
}
</code></pre>

<p>}
<code>``
这样好多问题就迎刃而解。  
为什么</code>Java动态代理<code>必须是接口，因为生成的类要去实现这个接口。  
</code>invoke<code>方法的</code>proxy<code>是干嘛的，通过</code>super.h.invoke(this, m3, (Object[])null);<code>我们可以发现传递给</code>invoke<code>方法的就是</code>Proxy<code>本身。  
同时</code>Proxy<code>类也通过反射实现了</code>toString<code>,</code>equals<code>,和</code>hashcode<code>等方法。  
自此关于</code>Java动态代理<code>的讲解已经告段落，下面让我们简单看一下</code>Spring-mybatis<code>中关于</code>Java动态代理`的使用。</p>

<h2>Java动态代理在Spring-mybatis中的实现</h2>

<p>关于<code>Spring-mybatis</code>的实现我们得从<code>MapperScannerConfigurer</code>说起，首先<code>MapperScannerConfigurer</code>实现了<code>BeanDefinitionRegistryPostProcessor</code>接口。而<code>BeanDefinitionRegistryPostProcessor</code>依赖于<code>Spring</code>框架，简单的说<code>BeanDefinitionRegistryPostProcessor</code>使得我们可以将<code>BeanDefinition</code>添加到<code>BeanDefinitionRegistry</code>中，而<code>BeanDefinition</code>描述了一个Bean实例所拥有的实例、结构参数和参数值，简单点说拥有它就可以实例化<code>Bean</code>了。<code>BeanDefinitionRegistryPostProcessor</code>的<code>postProcessBeanDefinitionRegistry</code>方法在<code>Bean</code>被定义但还没被创建的时候执行，所以<code>Spring-mybatis</code>也是借助了这一点。需要想需要更深入的了解可以查看<code>Spring</code>的生命周期。
<code>java MapperScannerConfigurer.java片段
public class MapperScannerConfigurer implements BeanDefinitionRegistryPostProcessor, InitializingBean, ApplicationContextAware, BeanNameAware {
  /**
   * {@inheritDoc}
   *
   * @since 1.0.2
   */
  @Override
  public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {
    ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);
    scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));
  }
</code>
由上代码我们可以看到在<code>postProcessBeanDefinitionRegistry</code>里面得到<code>registry</code>然后使用<code>ClassPathMapperScanner</code>开始扫描包路径得到的<code>Bean</code>并且注册到<code>registry</code>里面。我们接着往里面看。
<figure class='code'><figcaption><span>ClassPathMapperScanner.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">BeanDefinitionHolder</span><span class="o">&gt;</span> <span class="nf">doScan</span><span class="o">(</span><span class="n">String</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span> <span class="n">basePackages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">BeanDefinitionHolder</span><span class="o">&gt;</span> <span class="n">beanDefinitions</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">doScan</span><span class="o">(</span><span class="n">basePackages</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">beanDefinitions</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="na">warn</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">No</span> <span class="n">MyBatis</span> <span class="n">mapper</span> <span class="n">was</span> <span class="n">found</span> <span class="n">in</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">basePackages</span><span class="o">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">package</span><span class="o">.</span> <span class="n">Please</span> <span class="n">check</span> <span class="n">your</span> <span class="n">configuration</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">processBeanDefinitions</span><span class="o">(</span><span class="n">beanDefinitions</span><span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">beanDefinitions</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">ClassPathMapperScanner</span><span class="err">`</span><span class="n">继承了</span><span class="err">`</span><span class="n">Spring</span><span class="err">`</span><span class="n">的</span><span class="err">`</span><span class="n">ClassPathBeanDefinitionScanner</span><span class="err">`</span><span class="n">所以调用父类的</span><span class="err">`</span><span class="n">doScan</span><span class="err">`</span><span class="n">方法就可以加载</span><span class="err">`</span><span class="n">Bean</span><span class="err">`</span><span class="n">然后再通过</span><span class="err">`</span><span class="n">processBeanDefinitions</span><span class="err">`</span><span class="n">方法加工成</span><span class="err">`</span><span class="n">MyBatis</span><span class="err">`</span><span class="n">需要的</span><span class="err">`</span><span class="n">Bean</span><span class="err">`。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">ClassPathMapperScanner</span><span class="o">.</span><span class="na">java片段</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processBeanDefinitions</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">BeanDefinitionHolder</span><span class="o">&gt;</span> <span class="n">beanDefinitions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">GenericBeanDefinition</span> <span class="n">definition</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">BeanDefinitionHolder</span> <span class="n">holder</span> <span class="o">:</span> <span class="n">beanDefinitions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">definition</span> <span class="o">=</span> <span class="o">(</span><span class="n">GenericBeanDefinition</span><span class="o">)</span> <span class="n">holder</span><span class="o">.</span><span class="na">getBeanDefinition</span><span class="o">();</span>
</span><span class='line'>      <span class="n">definition</span><span class="o">.</span><span class="na">setBeanClass</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperFactoryBean</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">如上代码循环了所有由</span><span class="err">`</span><span class="n">Spring</span><span class="err">`</span><span class="n">容器解析出来的</span><span class="err">`</span><span class="n">beanDefinitions</span><span class="err">`</span><span class="n">然后把他们的</span><span class="err">`</span><span class="n">BeanClass</span><span class="err">`</span><span class="n">修改为</span><span class="err">`</span><span class="n">mapperFactoryBean</span><span class="err">`，</span><span class="n">这就进入了行文的重点</span><span class="err">。</span><span class="n">我们翻看到</span><span class="err">`</span><span class="n">MapperFactoryBean</span><span class="err">`</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">MapperFactoryBean</span><span class="o">.</span><span class="na">java片段</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">checkDaoConfig</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="kd">super</span><span class="o">.</span><span class="na">checkDaoConfig</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">notNull</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Property</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">mapperInterface</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">is</span> <span class="n">required</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Configuration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="n">getSqlSession</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">addToConfig</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">!</span><span class="n">configuration</span><span class="o">.</span><span class="na">hasMapper</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">configuration</span><span class="o">.</span><span class="na">addMapper</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Error</span> <span class="k">while</span> <span class="n">adding</span> <span class="n">the</span> <span class="n">mapper</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">to</span> <span class="n">configuration</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ErrorContext</span><span class="o">.</span><span class="na">instance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">其调用了</span><span class="err">`</span><span class="n">Configuration</span><span class="err">`</span><span class="n">的</span><span class="err">`</span><span class="n">addMapper</span><span class="err">`</span><span class="n">方法</span><span class="err">，</span><span class="n">这样就把</span><span class="err">`</span><span class="n">Bean</span><span class="err">`</span><span class="n">交给</span><span class="err">`</span><span class="n">MyBatis</span><span class="err">`</span><span class="n">管理了</span><span class="err">。</span><span class="n">那么</span><span class="err">`</span><span class="n">checkDaoConfig</span><span class="err">`</span><span class="n">是什么时候调用的呢</span><span class="err">？</span><span class="n">我们翻看其父类</span><span class="err">`</span><span class="n">DaoSupport</span><span class="err">`</span><span class="nl">可以看到:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">DaoSupport</span><span class="o">.</span><span class="na">java片段</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">DaoSupport</span> <span class="kd">implements</span> <span class="n">InitializingBean</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">afterPropertiesSet</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span><span class="o">,</span> <span class="n">BeanInitializationException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">checkDaoConfig</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">因为</span><span class="err">`</span><span class="n">DaoSupport</span><span class="err">`</span><span class="n">实现了</span><span class="err">`</span><span class="n">InitializingBean</span><span class="err">`</span><span class="n">并重写</span><span class="err">`</span><span class="n">afterPropertiesSet</span><span class="err">`</span><span class="n">方法</span><span class="err">，</span><span class="n">了解</span><span class="err">`</span><span class="n">Spring</span><span class="err">`</span><span class="n">生命周期的同学知道</span><span class="err">`</span><span class="n">afterPropertiesSet</span><span class="err">`</span><span class="n">方法会在资源加载完以后</span><span class="err">，</span><span class="n">初始化bean之前执行</span><span class="err">。</span><span class="n">我们继续查看</span><span class="err">`</span><span class="n">addMapper</span><span class="err">`</span><span class="n">方法</span><span class="err">。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">MapperRegistry</span><span class="o">.</span><span class="na">java片段</span>
</span><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">addMapper</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">type</span><span class="o">.</span><span class="na">isInterface</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">hasMapper</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">BindingException</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Type</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">type</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span> <span class="n">is</span> <span class="n">already</span> <span class="n">known</span> <span class="n">to</span> <span class="n">the</span> <span class="n">MapperRegistry</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">loadCompleted</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">knownMappers</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="k">new</span> <span class="n">MapperProxyFactory</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">type</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">// It&amp;rsquo;s important that the type is added before the parser is run</span>
</span><span class='line'>        <span class="c1">// otherwise the binding may automatically be attempted by the</span>
</span><span class='line'>        <span class="c1">// mapper parser. If the type is already known, it won&amp;rsquo;t try.</span>
</span><span class='line'>        <span class="n">MapperAnnotationBuilder</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MapperAnnotationBuilder</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">();</span>
</span><span class='line'>        <span class="n">loadCompleted</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">loadCompleted</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">knownMappers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">addMapper</span><span class="err">`</span><span class="n">方法最终创建了</span><span class="err">`</span><span class="n">MapperProxyFactory</span><span class="err">`</span><span class="n">对象</span><span class="err">，</span><span class="n">在</span><span class="err">`</span><span class="n">MapperProxyFactory</span><span class="err">`</span><span class="n">里面我们两眼泪汪汪地发现了似曾相识的代码</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">MapperProxyFactory</span><span class="o">.</span><span class="na">java片段</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperProxy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">mapperInterface</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span> <span class="n">mapperInterface</span> <span class="o">},</span> <span class="n">mapperProxy</span><span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">SqlSession</span> <span class="n">sqlSession</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperProxy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;(</span><span class="n">sqlSession</span><span class="o">,</span> <span class="n">mapperInterface</span><span class="o">,</span> <span class="n">methodCache</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">mapperProxy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">而</span><span class="err">`</span><span class="n">MapperProxy</span><span class="err">`</span><span class="n">实现了</span><span class="err">`</span><span class="n">InvocationHandler</span><span class="err">`</span><span class="n">方法</span><span class="err">，</span><span class="n">最终实现对</span><span class="err">`</span><span class="n">Bean</span><span class="err">`</span><span class="n">的代理</span><span class="err">，</span><span class="n">同时获取到上下文的</span><span class="err">`</span><span class="n">sqlSession</span><span class="err">`</span><span class="n">以供使用</span><span class="err">。</span><span class="n">具体生成过程我们不再累述</span><span class="err">，</span><span class="n">直接通过其源码结束本篇文章</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">MapperProxy</span><span class="o">.</span><span class="na">java片段</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MapperProxy</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span><span class="o">,</span> <span class="n">Serializable</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">6424540398559729838L</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">SqlSession</span> <span class="n">sqlSession</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperInterface</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Method</span><span class="o">,</span> <span class="n">MapperMethod</span><span class="o">&gt;</span> <span class="n">methodCache</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="nf">MapperProxy</span><span class="o">(</span><span class="n">SqlSession</span> <span class="n">sqlSession</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">mapperInterface</span><span class="o">,</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Method</span><span class="o">,</span> <span class="n">MapperMethod</span><span class="o">&gt;</span> <span class="n">methodCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sqlSession</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">mapperInterface</span> <span class="o">=</span> <span class="n">mapperInterface</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">methodCache</span> <span class="o">=</span> <span class="n">methodCache</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">Object</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getDeclaringClass</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">isDefaultMethod</span><span class="o">(</span><span class="n">method</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">invokeDefaultMethod</span><span class="o">(</span><span class="n">proxy</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">ExceptionUtil</span><span class="o">.</span><span class="na">unwrapThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">MapperMethod</span> <span class="n">mapperMethod</span> <span class="o">=</span> <span class="n">cachedMapperMethod</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mapperMethod</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">sqlSession</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>参考链接</h2>

<p><a href="http://www.mybatis.org/spring/getting-started.html">Spring Mybatis 配置</a>  <br/>
<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">Spring Boot Mybatis</a><br/>
<a href="https://stackoverflow.com/questions/22930195/understanding-proxy-arguments-of-the-invoke-method-of-java-lang-reflect-invoca">InvocationHandler Proxy Parameter</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Idea 创建 Spring Boot 项目]]></title>
    <link href="http://www.majiang.life/blog/spring-boot-get-started/"/>
    <updated>2017-06-22T22:22:14+08:00</updated>
    <id>http://www.majiang.life/blog/spring-boot-get-started</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近 <code>Spring Boot</code> 如火如荼，于是也开始试试，不过上手真的太简单了。<code>Idea</code>非常方便的就可以创建，或者直接<code>clone</code>官方的例子<a href="https://spring.io/guides/gs/spring-boot/">https://spring.io/guides/gs/spring-boot/</a>。通俗理解<code>Spring Boot</code>就是一个<code>平台</code>，让你非常便捷的构建和运行一个项目，并且他是基于组件化的，你想用什么直接<code>拿来主义</code>就可以了，话不多少直接上手。</p>

<!-- more -->


<h2>使用 <code>Idea</code> 快速搭建</h2>

<p>选择<code>Spring Initialiar</code>直接创建。
<img src="/images/posts/spring-boot-get-started-1.png" alt="spring-boot-get-started-1" /></p>

<p>填写好<code>Group</code>和<code>Artifact</code>。
<img src="/images/posts/spring-boot-get-started-2.png" alt="spring-boot-get-started-2" /></p>

<p>下面直接选择<code>Web</code>就可以了，但是如果你想选择其他的直接勾选就行，她会自动为你加载依赖。并且一些<code>dependency</code>不需要配置版本，每一个<code>Spring Boot</code>的<code>parent</code>项目集成管理，这样省去了好多兼容麻烦。
<img src="/images/posts/spring-boot-get-started-3.png" alt="spring-boot-get-started-3" /></p>

<p>我们写一个<code>HelloController</code>试一下效果。
<img src="/images/posts/spring-boot-get-started-4.png" alt="spring-boot-get-started-4" /></p>

<p>最后访问<code>http://localhost:8080</code>成功。
<img src="/images/posts/spring-boot-get-started-5.png" alt="spring-boot-get-started-5" /></p>

<p>如果想改变端口也是非常简单的。
<img src="/images/posts/spring-boot-get-started-6.png" alt="spring-boot-get-started-6" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优雅的使用 ThreadLocal 传递参数]]></title>
    <link href="http://www.majiang.life/blog/the-smart-way-of-passing-parameter-by-threadlocal/"/>
    <updated>2017-05-20T18:04:38+08:00</updated>
    <id>http://www.majiang.life/blog/the-smart-way-of-passing-parameter-by-threadlocal</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>在我们日常 <code>Web</code> 开发中难免遇到需要把一个参数层层的传递到最内层，然后中间层根本不需要使用这个参数，或者是仅仅在特定的工具类中使用，这样我们完全没有必要在每一个方法里面都传递这样一个<code>通用</code>的参数。如果有一个办法能够在任何一个类里面想用的时候直接拿来使用就太好了。<code>Java</code>的<code>Web</code>项目大部分都是基于<code>Tomcat</code>，每次访问都是一个新的线程，这样让我们联想到了<code>ThreadLocal</code>，每一个线程都独享一个<code>ThreadLocal</code>，在接收请求的时候<code>set</code>特定内容，在需要的时候<code>get</code>这个值。下面我们就进入主题。</p>

<!-- more -->


<h2>ThreadLocal</h2>

<p>维持线程封闭性的一种更规范的方法就是使用<code>ThreadLocal</code>，这个类能使线程中的某个值与保存的值的对象关联起来。<code>ThreadLocal</code>提供<code>get</code>和<code>set</code>等接口或方法，这些方法为每一个使用这个变量的线程都存有一份独立的副本，因此<code>get</code>总是返回由当前线程在调用<code>set</code>时设置的最新值。
<code>ThreadLocal</code>有如下方法
<code>java
public T get() { }
public void set(T value) { }
public void remove() { }
protected T initialValue() { }
</code>
<code>get()</code>方法是用来获取<code>ThreadLocal</code>在当前线程中保存的变量副本<br/>
<code>set()</code>用来设置当前线程中变量的副本<br/>
<code>remove()</code>用来移除当前线程中变量的副本 <br/>
<code>initialValue()</code>是一个<code>protected</code>方法，一般是用来在使用时进行重写的，如果在没有set的时候就调用<code>get</code>，会调用<code>initialValue</code>方法初始化内容。
为了使用的更放心，我们简单的看一下具体的实现:</p>

<h3><code>set</code>方法</h3>

<pre><code class="java ThreadLocal.java">public void set(T value) {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null)
            map.set(this, value);
        else
            createMap(t, value);
    }
</code></pre>

<p><code>set</code>方法会获取当前的线程，通过当前线程获取<code>ThreadLocalMap</code>对象。然后把需要存储的值放到这个<code>map</code>里面。如果没有就调用<code>createMap</code>创建对象。</p>

<h3><code>getMap</code>方法</h3>

<pre><code class="java ThreadLocal.java"> ThreadLocalMap getMap(Thread t) {
        return t.threadLocals;
    }
</code></pre>

<p><code>getMap</code>方法直接返回当前<code>Thread</code>的<code>threadLocals</code>变量，这样说明了之所以说<code>ThreadLocal</code>是<code>线程局部变量</code>就是因为它只是通过<code>ThreadLocal</code>把<code>变量</code>存在了<code>Thread</code>本身而已。</p>

<h3><code>createMap</code>方法</h3>

<pre><code class="java ThreadLocal.java">void createMap(Thread t, T firstValue) {
        t.threadLocals = new ThreadLocalMap(this, firstValue);
    }
</code></pre>

<p>在<code>set</code>的时候如果不存在<code>threadLocals</code>，直接创建对象。由上看出，放入<code>map</code>的<code>key</code>是当前的<code>ThreadLocal</code>，<code>value</code>是需要存放的内容，所以我们设置属性的时候需要注意存放和获取的是一个<code>ThreadLocal</code>。</p>

<h3><code>get</code>方法</h3>

<pre><code class="java ThreadLocal.java">public T get() {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);
            if (e != null)
                return (T)e.value;
        }
        return setInitialValue();
    }
</code></pre>

<p><code>get</code>方法就比较简单，获取当前线程，尝试获取当前线程里面的<code>threadLocals</code>，如果没有获取到就调用<code>setInitialValue</code>方法，<code>setInitialValue</code>基本和<code>set</code>是一样的，就不累累述了。</p>

<h2>场景</h2>

<p>本文应用<code>ThreadLocal</code>的场景：在调用API接口的时候传递了一些公共参数，这些公共参数携带了一些设备信息，服务端接口根据不同的信息组装不同的格式数据返回给客户端。假定服务器端需要通过设备类型(device)来下发下载地址，当然接口也有同样的其他逻辑，我们只要在返回数据的时候判断好是什么类型的客户端就好了。如下:</p>

<h4>场景一</h4>

<p>请求
<code>sh
GET api/users?device=android
</code>
返回
<code>JSON
    {
        user : {        
        },
        link : "https://play.google.com/store/apps/details?id=***"
    }
</code></p>

<h4>场景二</h4>

<p>请求
<code>sh
GET api/users?device=ios
</code>
返回
<code>JSON
    {
        user : {    
        },
        link : "https://itunes.apple.com/us/app/**"
    }
</code></p>

<h2>实现</h2>

<p>首先准备一个<code>BaseSigntureRequest</code>类用来存放公共参数
<figure class='code'><figcaption><span>BaseSignatureRequest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseSignatureRequest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">device</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">String</span> <span class="nf">getDevice</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">device</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDevice</span><span class="o">(</span><span class="n">String</span> <span class="n">device</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">device</span> <span class="o">=</span> <span class="n">device</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">然后准备一个</span><span class="err">`</span><span class="kd">static</span><span class="err">`</span><span class="n">的</span><span class="err">`</span><span class="n">ThreadLocal</span><span class="err">`</span><span class="n">类用来存放</span><span class="err">`</span><span class="n">ThreadLocal</span><span class="err">`，</span><span class="n">以便存储和获取时候的</span><span class="err">`</span><span class="n">ThreadLocal</span><span class="err">`</span><span class="n">一致</span><span class="err">。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">ThreadLocalCache</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadLocalCache</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">BaseSignatureRequest</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="n">baseSignatureRequestThreadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&gt;();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">然后编写一个</span><span class="err">`</span><span class="n">Interceptor</span><span class="err">`，</span><span class="n">在请求的时候获取</span><span class="err">`</span><span class="n">device</span><span class="err">`</span><span class="n">参数</span><span class="err">，</span><span class="n">存入当前线程的</span><span class="err">`</span><span class="n">ThreadLocal</span><span class="err">`</span><span class="n">中</span><span class="err">。</span><span class="n">这里需要注意的是</span><span class="err">，</span><span class="n">重写了</span><span class="err">`</span><span class="n">afterCompletion</span><span class="err">`</span><span class="n">方法</span><span class="err">，</span><span class="n">当请求结束的时候把</span><span class="err">`</span><span class="n">ThreadLocal</span><span class="err">`</span> <span class="err">`</span><span class="n">remove</span><span class="err">`，</span><span class="n">移除不必须要键值对</span><span class="err">。</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span> <span class="n">ParameterInterceptor</span><span class="o">.</span><span class="na">java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ParameterInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span><span class='line'>                             <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">device</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">device</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>        <span class="n">BaseSignatureRequest</span> <span class="n">baseSignatureRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BaseSignatureRequest</span><span class="o">();</span>
</span><span class='line'>        <span class="n">baseSignatureRequest</span><span class="o">.</span><span class="na">setDevice</span><span class="o">(</span><span class="n">device</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ThreadLocalCache</span><span class="o">.</span><span class="na">baseSignatureRequestThreadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">baseSignatureRequest</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ThreadLocalCache</span><span class="o">.</span><span class="na">baseSignatureRequestThreadLocal</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">postHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">httpServletRequest</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">HttpServletResponse</span> <span class="n">httpServletResponse</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">Object</span> <span class="n">o</span><span class="o">,</span> <span class="n">ModelAndView</span> <span class="n">modelAndView</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">当然需要在</span><span class="err">`</span><span class="n">spring</span><span class="err">`</span><span class="n">里面配置</span><span class="err">`</span><span class="n">interceptor</span><span class="err">`</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">xml</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">xml</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nl">mvc:</span><span class="n">interceptors</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nl">mvc:</span><span class="n">interceptor</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nl">mvc:</span><span class="n">mapping</span> <span class="n">path</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="o">;/</span><span class="n">api</span><span class="o">/**&amp;</span><span class="n">rdquo</span><span class="o">;/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">bean</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;life.majiang.ParameterInterceptor&quot;</span><span class="o">&gt;&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="nl">mvc:</span><span class="n">interceptor</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="o">;/</span><span class="nl">mvc:</span><span class="n">interceptors</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>最后在<code>Converter</code>里面转换实体的时候直接使用即可，这样就大功告成了。
<code>java UserConverter.java
public class UserConverter {
    public static ResultDO toDO(User user) {
        ResultDO resultDO = new ResultDO();
        resultDO.setUser(user);
        BaseSignatureRequest baseSignatureRequest = ThreadLocalCache.baseSignatureRequestThreadLocal.get();
        String device = baseSignatureRequest.getDevice();
        if (StringUtils.equals(device, "ios")) {
            resultDO.setLink("https://itunes.apple.com/us/app/**");
        } else {
            resultDO.setLink("https://play.google.com/store/apps/details?id=***");
        }
        return resultDO;
    }
</code></p>

<h2>总结</h2>

<p>这种机制很方便，因为他避免了在调用每一个方法时都要传递执行上下文信息，合理的使用<code>ThreadLocal</code>可以起到事倍功半的效果，但是需要避免滥用，例如将所有的全局变量作为<code>ThreadLocal</code>对象，<code>ThreadLocal</code>类似全局变量，他能降低代码的可重用性，并在类之间引入隐含的耦合性，所以再使用前需要格外小心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建 Java 应用内存级缓存]]></title>
    <link href="http://www.majiang.life/blog/simple-in-memory-cache-in-java/"/>
    <updated>2017-04-30T10:49:21+08:00</updated>
    <id>http://www.majiang.life/blog/simple-in-memory-cache-in-java</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>缓存是我们日常开发中是必不可少的一种解决性能问题的方法。早期Cache只应用在CPU和内存之间，现在遍布在每一个角落，内存和磁盘，磁盘和网路都存在Cache。Cache同样是做Java应用必不可少的元素。缓存在各种用例中非常有用。例如，当一个值计算或检索成本高昂时，应该考虑使用高速缓存，并且需要在某个输入上多次使用它的值。通常我们使用的缓存有<code>分布式的缓存数据库</code>,<code>本机的缓存数据库</code>,<code>本地的内存缓存</code>，当然也有直接使用数据库的。无论我们选择哪一种实现，都需要结合自身的机器配置和网路情况考虑，毕竟内存，网路带宽都是量化的。下面的表格来源于<a href="https://research.google.com/pubs/jeff.html"> Jeff Dean</a>的一个PPT，里面罗列了不同级别的IO时间，这正是我们评估如何设计我们系统的必要因素。
<br></p>

<table>
<thead>
<tr>
<th style="text-align:left;">                                   </th>
<th style="text-align:left;">               </th>
<th style="text-align:left;">         </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">L1 cache reference                 </td>
<td style="text-align:left;"> 0.5 ns        </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Branch mispredict                  </td>
<td style="text-align:left;"> 5 ns          </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">L2 cache reference                 </td>
<td style="text-align:left;"> 7 ns          </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Mutex lock/unlock                  </td>
<td style="text-align:left;"> 100 ns        </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Main memory reference              </td>
<td style="text-align:left;"> 100 ns        </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Compress 1K bytes with Zippy       </td>
<td style="text-align:left;"> 10,000 ns     </td>
<td style="text-align:left;"> 0.01 ms </td>
</tr>
<tr>
<td style="text-align:left;">Send 1K bytes over 1 Gbps network  </td>
<td style="text-align:left;"> 10,000 ns     </td>
<td style="text-align:left;"> 0.01 ms </td>
</tr>
<tr>
<td style="text-align:left;">Read 1 MB sequentially from memory </td>
<td style="text-align:left;"> 250,000 ns    </td>
<td style="text-align:left;"> 0.25 ms </td>
</tr>
<tr>
<td style="text-align:left;">Round trip within same datacenter  </td>
<td style="text-align:left;"> 500,000 ns    </td>
<td style="text-align:left;"> 0.5 ms  </td>
</tr>
<tr>
<td style="text-align:left;">Disk seek                          </td>
<td style="text-align:left;"> 10,000,000 ns </td>
<td style="text-align:left;"> 10 ms   </td>
</tr>
<tr>
<td style="text-align:left;">Read 1 MB sequentially from network</td>
<td style="text-align:left;"> 10,000,000 ns </td>
<td style="text-align:left;"> 10 ms   </td>
</tr>
<tr>
<td style="text-align:left;">Read 1 MB sequentially from disk   </td>
<td style="text-align:left;"> 30,000,000 ns </td>
<td style="text-align:left;"> 30 ms   </td>
</tr>
<tr>
<td style="text-align:left;">Send packet CA->Netherlands->CA    </td>
<td style="text-align:left;"> 150,000,000 ns</td>
<td style="text-align:left;"> 150 ms  </td>
</tr>
</tbody>
</table>


<!-- more -->


<p><br><br/>
由上面表格，我们可以清楚的看出从网络上面获取1M数据和从内存中读取1M数据的差别。为什么说到这里呢，因为随着我们的用户的增加，集群的扩展，很少的情况下是把缓存数据库或者其他缓存中间件和应用程序放在一台服务器上，大部分情况都是分布式的应用系统和缓存系统，所以避免不了的我们需要考虑网络而的开销。然后网络的读取和本地的读取差别如此之大，进而引出了今天的话题，适当的使用Java应用内存级别的缓存。针对一些基本不变的数据，或者是变化不大，使用非常频繁的数据可以考虑采用Java应用内存级别缓存。</p>

<h2>Guava Cache</h2>

<p>这篇文章讲的是如何使用<code>Guava Cache</code>构建Java内存基本的缓存，<code>Guava Cache</code>缓存类似于<code>ConcurrentMap</code>，但不完全相同。 最根本的区别是，ConcurrentMap会持续添加到其中的所有元素，如果你不手动删除它们会一直存在。然而<code>Guava Cache</code>可以通过缓存的大小，过期时间，或者其他策略自动地移除元素，来限制其内存占用。<code>Guava Cache</code>有两种方式实现，一种是<code>CacheLoader</code>在定义的时候就设置好缓存的源，另一种是<code>Callable</code>在调用缓存的时候指定如果缓存中没有的获取的方式，长话短说，我们直接进入正题。</p>

<h2>依赖</h2>

<p>笔者项目使用<code>Maven</code>构建，直接使用如下配合文件
<code>xml pom.xml
&lt;dependency&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt;
    &lt;version&gt;19.0&lt;/version&gt;
&lt;/dependency&gt;
</code></p>

<h2>CacheLoader</h2>

<p>预先准备好一个<code>MockDB</code>类，用来模拟缓存中没有的时候在数据库中获取
<figure class='code'><figcaption><span>MockDB.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockDB</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">mockPersistence</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">github</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">codedrinker</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>    <span class="o">}};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">loadFromPersistence</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;load key from persistence : &quot;</span> <span class="o">+</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mockPersistence</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
下面是使用<code>CacheLoader</code>的代码
<figure class='code'><figcaption><span>GuavaLoadingCache.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GuavaLoadingCache</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LoadingCache</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">loadingCache</span> <span class="o">=</span> <span class="n">CacheBuilder</span>
</span><span class='line'>                <span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">expireAfterWrite</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">removalListener</span><span class="o">(</span><span class="k">new</span> <span class="n">RemovalListener</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRemoval</span><span class="o">(</span><span class="n">RemovalNotification</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">notification</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">cache</span> <span class="n">expired</span><span class="o">,</span> <span class="n">remove</span> <span class="n">key</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">notification</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">})</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">MockDB</span><span class="o">.</span><span class="na">loadFromPersistence</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">from</span> <span class="n">cache</span> <span class="n">once</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">loadingCache</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">github</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">from</span> <span class="n">cache</span> <span class="n">twice</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">loadingCache</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">github</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">from</span> <span class="n">cache</span> <span class="n">third</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">loadingCache</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">github</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">not</span> <span class="n">exist</span> <span class="n">key</span> <span class="n">from</span> <span class="n">cache</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">loadingCache</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">email</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
我们逐行进行解释：</p>

<ul>
<li><code>expireAfterWrite(3, TimeUnit.SECONDS)</code>定义缓存3秒过期</li>
<li><code>removalListener</code>用来监听当缓存里面的<code>key</code>被移除时候触发的事件</li>
<li><code>build(new CacheLoader&lt;String, Optional&lt;String&gt;&gt;()</code>传入一个<code>CacheLoader</code>类，指定缓存中没有的时候调用如下方法.</li>
<li><code>Optional</code>当<code>CacheLoader</code>尝试获取数据库中不存在的数据会抛出异常，所以我们这里使用<code>Optional</code>可空对象处理一下。</li>
<li><code>Thread.sleep(2000);</code>缓存我们设置3秒过期，所以两次<code>Sleep</code>以后就会重新获取数据库。
运行输出结果如下，证明了再第三次获取的时候因为缓存过期了，所以需要重新在<code>MockDB</code>获取数据：
<code>sh
load key from persistence : github
load from cache once : codedrinker
load from cache twice : codedrinker
cache expired, remove key : github
load key from persistence : github
load from cache third : codedrinker
load key from persistence : email
load not exist key from cache : null
</code></li>
</ul>


<h2>Callable</h2>

<p>这里我们依然需要使用上面的<code>MockDB</code>类，具体代码如下。
<figure class='code'><figcaption><span>GuavaCallableCache.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GuavaCallableCache</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">github</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
</span><span class='line'>        <span class="n">Cache</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">expireAfterWrite</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">removalListener</span><span class="o">(</span><span class="k">new</span> <span class="n">RemovalListener</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onRemoval</span><span class="o">(</span><span class="n">RemovalNotification</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">notification</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">cache</span> <span class="n">expired</span><span class="o">,</span> <span class="n">remove</span> <span class="n">key</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">notification</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">optional</span><span class="o">;</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">from</span> <span class="n">cache</span> <span class="n">once</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">MockDB</span><span class="o">.</span><span class="na">loadFromPersistence</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">from</span> <span class="n">cache</span> <span class="n">twice</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">MockDB</span><span class="o">.</span><span class="na">loadFromPersistence</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">from</span> <span class="n">cache</span> <span class="n">third</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">MockDB</span><span class="o">.</span><span class="na">loadFromPersistence</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}).</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">String</span> <span class="n">nullKey</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">email</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
</span><span class='line'>            <span class="n">optional</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">nullKey</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">MockDB</span><span class="o">.</span><span class="na">loadFromPersistence</span><span class="o">(</span><span class="n">nullKey</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">load</span> <span class="n">not</span> <span class="n">exist</span> <span class="n">key</span> <span class="n">from</span> <span class="n">cache</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">optional</span><span class="o">.</span><span class="na">orNull</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
下面我们对程序进行解释，与上面例子唯一的不同就是没有在<code>build</code>的时候传入<code>CacheLoader</code>，而是在<code>cache.get</code>使用<code>Cache</code>的时候用传入<code>Callable</code>对象。这样做可以灵活配置每次获取的缓存源不一样，但是两种方案都各有好处，还是在使用的时候斟酌。
运行程序数据结果如下：
<code>sh
load key from persistence : github
load from cache once : codedrinker
load from cache twice : codedrinker
cache expired, remove key : github
load key from persistence : github
load from cache third : codedrinker
load key from persistence : email
load not exist key from cache : null
</code></p>

<h2>总结</h2>

<p>在设计Java分布式应用程序的时候，针对一些基本不变的数据，或者是变化不大然而使用非常频繁的数据可以考虑采用<code>Guava Cache</code>实现Java应用内存级别缓存。</p>

<h2>参考链接</h2>

<p><a href="https://github.com/google/guava/wiki/CachesExplained">Guava Cache</a></p>
]]></content>
  </entry>
  
</feed>
