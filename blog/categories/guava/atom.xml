<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Guava | 码匠笔记]]></title>
  <link href="http://www.majiang.life/blog/categories/guava/atom.xml" rel="self"/>
  <link href="http://www.majiang.life/"/>
  <updated>2018-02-23T11:46:09+08:00</updated>
  <id>http://www.majiang.life/</id>
  <author>
    <name><![CDATA[麻酱]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[构建 Java 应用内存级缓存]]></title>
    <link href="http://www.majiang.life/blog/simple-in-memory-cache-in-java/"/>
    <updated>2017-04-30T10:49:21+08:00</updated>
    <id>http://www.majiang.life/blog/simple-in-memory-cache-in-java</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>缓存是我们日常开发中是必不可少的一种解决性能问题的方法。早期Cache只应用在CPU和内存之间，现在遍布在每一个角落，内存和磁盘，磁盘和网路都存在Cache。Cache同样是做Java应用必不可少的元素。缓存在各种用例中非常有用。例如，当一个值计算或检索成本高昂时，应该考虑使用高速缓存，并且需要在某个输入上多次使用它的值。通常我们使用的缓存有<code>分布式的缓存数据库</code>,<code>本机的缓存数据库</code>,<code>本地的内存缓存</code>，当然也有直接使用数据库的。无论我们选择哪一种实现，都需要结合自身的机器配置和网路情况考虑，毕竟内存，网路带宽都是量化的。下面的表格来源于<a href="https://research.google.com/pubs/jeff.html"> Jeff Dean</a>的一个PPT，里面罗列了不同级别的IO时间，这正是我们评估如何设计我们系统的必要因素。
<br></p>

<table>
<thead>
<tr>
<th style="text-align:left;">                                   </th>
<th style="text-align:left;">               </th>
<th style="text-align:left;">         </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">L1 cache reference                 </td>
<td style="text-align:left;"> 0.5 ns        </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Branch mispredict                  </td>
<td style="text-align:left;"> 5 ns          </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">L2 cache reference                 </td>
<td style="text-align:left;"> 7 ns          </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Mutex lock/unlock                  </td>
<td style="text-align:left;"> 100 ns        </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Main memory reference              </td>
<td style="text-align:left;"> 100 ns        </td>
<td style="text-align:left;">         </td>
</tr>
<tr>
<td style="text-align:left;">Compress 1K bytes with Zippy       </td>
<td style="text-align:left;"> 10,000 ns     </td>
<td style="text-align:left;"> 0.01 ms </td>
</tr>
<tr>
<td style="text-align:left;">Send 1K bytes over 1 Gbps network  </td>
<td style="text-align:left;"> 10,000 ns     </td>
<td style="text-align:left;"> 0.01 ms </td>
</tr>
<tr>
<td style="text-align:left;">Read 1 MB sequentially from memory </td>
<td style="text-align:left;"> 250,000 ns    </td>
<td style="text-align:left;"> 0.25 ms </td>
</tr>
<tr>
<td style="text-align:left;">Round trip within same datacenter  </td>
<td style="text-align:left;"> 500,000 ns    </td>
<td style="text-align:left;"> 0.5 ms  </td>
</tr>
<tr>
<td style="text-align:left;">Disk seek                          </td>
<td style="text-align:left;"> 10,000,000 ns </td>
<td style="text-align:left;"> 10 ms   </td>
</tr>
<tr>
<td style="text-align:left;">Read 1 MB sequentially from network</td>
<td style="text-align:left;"> 10,000,000 ns </td>
<td style="text-align:left;"> 10 ms   </td>
</tr>
<tr>
<td style="text-align:left;">Read 1 MB sequentially from disk   </td>
<td style="text-align:left;"> 30,000,000 ns </td>
<td style="text-align:left;"> 30 ms   </td>
</tr>
<tr>
<td style="text-align:left;">Send packet CA->Netherlands->CA    </td>
<td style="text-align:left;"> 150,000,000 ns</td>
<td style="text-align:left;"> 150 ms  </td>
</tr>
</tbody>
</table>


<!-- more -->


<p><br><br/>
由上面表格，我们可以清楚的看出从网络上面获取1M数据和从内存中读取1M数据的差别。为什么说到这里呢，因为随着我们的用户的增加，集群的扩展，很少的情况下是把缓存数据库或者其他缓存中间件和应用程序放在一台服务器上，大部分情况都是分布式的应用系统和缓存系统，所以避免不了的我们需要考虑网络而的开销。然后网络的读取和本地的读取差别如此之大，进而引出了今天的话题，适当的使用Java应用内存级别的缓存。针对一些基本不变的数据，或者是变化不大，使用非常频繁的数据可以考虑采用Java应用内存级别缓存。</p>

<h2>Guava Cache</h2>

<p>这篇文章讲的是如何使用<code>Guava Cache</code>构建Java内存基本的缓存，<code>Guava Cache</code>缓存类似于<code>ConcurrentMap</code>，但不完全相同。 最根本的区别是，ConcurrentMap会持续添加到其中的所有元素，如果你不手动删除它们会一直存在。然而<code>Guava Cache</code>可以通过缓存的大小，过期时间，或者其他策略自动地移除元素，来限制其内存占用。<code>Guava Cache</code>有两种方式实现，一种是<code>CacheLoader</code>在定义的时候就设置好缓存的源，另一种是<code>Callable</code>在调用缓存的时候指定如果缓存中没有的获取的方式，长话短说，我们直接进入正题。</p>

<h2>依赖</h2>

<p>笔者项目使用<code>Maven</code>构建，直接使用如下配合文件
<code>xml pom.xml
&lt;dependency&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt;
    &lt;version&gt;19.0&lt;/version&gt;
&lt;/dependency&gt;
</code></p>

<h2>CacheLoader</h2>

<p>预先准备好一个<code>MockDB</code>类，用来模拟缓存中没有的时候在数据库中获取
{% codeblock lang:java MockDB.java%}
{% raw %}
public class MockDB {
    private static Map&lt;String, String> mockPersistence = new HashMap&lt;String, String>() {{
        this.put(&ldquo;github&rdquo;, &ldquo;codedrinker&rdquo;);
    }};</p>

<pre><code>public static String loadFromPersistence(String key) {
    System.out.println("load key from persistence : " + key);
    return mockPersistence.get(key);
}
</code></pre>

<p>}
{% endraw %}
{% endcodeblock %}
下面是使用<code>CacheLoader</code>的代码
{% codeblock lang:java GuavaLoadingCache.java%}
{% raw %}
public class GuavaLoadingCache {
    public static void main(String[] args) {
        LoadingCache&lt;String, Optional<String>> loadingCache = CacheBuilder
                .newBuilder()
                .expireAfterWrite(3, TimeUnit.SECONDS)
                .removalListener(new RemovalListener&lt;String, Optional<String>>() {
                    @Override
                    public void onRemoval(RemovalNotification&lt;String, Optional<String>> notification) {
                        System.out.println(&ldquo;cache expired, remove key : &rdquo; + notification.getKey());
                    }
                })
                .build(new CacheLoader&lt;String, Optional<String>>() {
                    @Override
                    public Optional<String> load(String key) throws Exception {
                        return Optional.fromNullable(MockDB.loadFromPersistence(key));
                    }
                });
        try {
            System.out.println(&ldquo;load from cache once : &rdquo; + loadingCache.get(&ldquo;github&rdquo;).orNull());
            Thread.sleep(2000);
            System.out.println(&ldquo;load from cache twice : &rdquo; + loadingCache.get(&ldquo;github&rdquo;).orNull());
            Thread.sleep(2000);
            System.out.println(&ldquo;load from cache third : &rdquo; + loadingCache.get(&ldquo;github&rdquo;).orNull());
            Thread.sleep(2000);
            System.out.println(&ldquo;load not exist key from cache : &rdquo; + loadingCache.get(&ldquo;email&rdquo;).orNull());
        } catch (ExecutionException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
{% endraw %}
{% endcodeblock %}
我们逐行进行解释：</p>

<ul>
<li><code>expireAfterWrite(3, TimeUnit.SECONDS)</code>定义缓存3秒过期</li>
<li><code>removalListener</code>用来监听当缓存里面的<code>key</code>被移除时候触发的事件</li>
<li><code>build(new CacheLoader&lt;String, Optional&lt;String&gt;&gt;()</code>传入一个<code>CacheLoader</code>类，指定缓存中没有的时候调用如下方法.</li>
<li><code>Optional</code>当<code>CacheLoader</code>尝试获取数据库中不存在的数据会抛出异常，所以我们这里使用<code>Optional</code>可空对象处理一下。</li>
<li><code>Thread.sleep(2000);</code>缓存我们设置3秒过期，所以两次<code>Sleep</code>以后就会重新获取数据库。
运行输出结果如下，证明了再第三次获取的时候因为缓存过期了，所以需要重新在<code>MockDB</code>获取数据：
<code>sh
load key from persistence : github
load from cache once : codedrinker
load from cache twice : codedrinker
cache expired, remove key : github
load key from persistence : github
load from cache third : codedrinker
load key from persistence : email
load not exist key from cache : null
</code></li>
</ul>


<h2>Callable</h2>

<p>这里我们依然需要使用上面的<code>MockDB</code>类，具体代码如下。
{% codeblock lang:java GuavaCallableCache.java%}
{% raw %}
public class GuavaCallableCache {
    public static void main(String[] args) {
        final String key = &ldquo;github&rdquo;;
        Cache&lt;String, Optional<String>> cache = CacheBuilder.newBuilder()
                .expireAfterWrite(3, TimeUnit.SECONDS)
                .removalListener(new RemovalListener&lt;String, Optional<String>>() {
                    @Override
                    public void onRemoval(RemovalNotification&lt;String, Optional<String>> notification) {
                        System.out.println(&ldquo;cache expired, remove key : &rdquo; + notification.getKey());
                    }
                }).build();
        try {
            Optional<String> optional;
            System.out.println(&ldquo;load from cache once : &rdquo; + cache.get(key, new Callable&lt;Optional<String>>() {
                @Override
                public Optional<String> call() throws Exception {
                    return Optional.fromNullable(MockDB.loadFromPersistence(key));
                }
            }).orNull());
            Thread.sleep(2000);
            System.out.println(&ldquo;load from cache twice : &rdquo; + cache.get(key, new Callable&lt;Optional<String>>() {
                @Override
                public Optional<String> call() throws Exception {
                    return Optional.fromNullable(MockDB.loadFromPersistence(key));
                }
            }).orNull());
            Thread.sleep(2000);
            System.out.println(&ldquo;load from cache third : &rdquo; + cache.get(key, new Callable&lt;Optional<String>>() {
                @Override
                public Optional<String> call() throws Exception {
                    return Optional.fromNullable(MockDB.loadFromPersistence(key));
                }
            }).orNull());
            Thread.sleep(2000);
            final String nullKey = &ldquo;email&rdquo;;
            optional = cache.get(nullKey, new Callable&lt;Optional<String>>() {
                @Override
                public Optional<String> call() throws Exception {
                    return Optional.fromNullable(MockDB.loadFromPersistence(nullKey));
                }
            });
            System.out.println(&ldquo;load not exist key from cache : &rdquo; + optional.orNull());
        } catch (ExecutionException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
{% endraw %}
{% endcodeblock %}
下面我们对程序进行解释，与上面例子唯一的不同就是没有在<code>build</code>的时候传入<code>CacheLoader</code>，而是在<code>cache.get</code>使用<code>Cache</code>的时候用传入<code>Callable</code>对象。这样做可以灵活配置每次获取的缓存源不一样，但是两种方案都各有好处，还是在使用的时候斟酌。
运行程序数据结果如下：
<code>sh
load key from persistence : github
load from cache once : codedrinker
load from cache twice : codedrinker
cache expired, remove key : github
load key from persistence : github
load from cache third : codedrinker
load key from persistence : email
load not exist key from cache : null
</code></p>

<h2>总结</h2>

<p>在设计Java分布式应用程序的时候，针对一些基本不变的数据，或者是变化不大然而使用非常频繁的数据可以考虑采用<code>Guava Cache</code>实现Java应用内存级别缓存。</p>

<h2>参考链接</h2>

<p><a href="https://github.com/google/guava/wiki/CachesExplained">Guava Cache</a></p>
]]></content>
  </entry>
  
</feed>
